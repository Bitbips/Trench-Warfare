declare class MaterialExpressionSceneTexture extends MaterialExpression { 
	Coordinates: ExpressionInput;
	SceneTextureId: ESceneTextureId;
	bFiltered: boolean;
	static Load(ResourceName: string): MaterialExpressionSceneTexture;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSceneTexture;
	static GetDefaultObject(): MaterialExpressionSceneTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSceneTexture;
	static C(Other: UObject | any): MaterialExpressionSceneTexture;
}

declare class MaterialExpressionScreenPosition extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionScreenPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionScreenPosition;
	static GetDefaultObject(): MaterialExpressionScreenPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionScreenPosition;
	static C(Other: UObject | any): MaterialExpressionScreenPosition;
}

declare class MaterialExpressionSetMaterialAttributes extends MaterialExpression { 
	Inputs: ExpressionInput[];
	AttributeSetTypes: Guid[];
	static Load(ResourceName: string): MaterialExpressionSetMaterialAttributes;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSetMaterialAttributes;
	static GetDefaultObject(): MaterialExpressionSetMaterialAttributes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSetMaterialAttributes;
	static C(Other: UObject | any): MaterialExpressionSetMaterialAttributes;
}

declare class MaterialExpressionShadingPathSwitch extends MaterialExpression { 
	Default: ExpressionInput;
	Inputs: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionShadingPathSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionShadingPathSwitch;
	static GetDefaultObject(): MaterialExpressionShadingPathSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionShadingPathSwitch;
	static C(Other: UObject | any): MaterialExpressionShadingPathSwitch;
}

declare class MaterialExpressionSign extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSign;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSign;
	static GetDefaultObject(): MaterialExpressionSign;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSign;
	static C(Other: UObject | any): MaterialExpressionSign;
}

declare class MaterialExpressionSine extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionSine;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSine;
	static GetDefaultObject(): MaterialExpressionSine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSine;
	static C(Other: UObject | any): MaterialExpressionSine;
}

declare class MaterialExpressionSobol extends MaterialExpression { 
	Cell: ExpressionInput;
	index: ExpressionInput;
	Seed: ExpressionInput;
	ConstIndex: any;
	ConstSeed: Vector2D;
	static Load(ResourceName: string): MaterialExpressionSobol;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSobol;
	static GetDefaultObject(): MaterialExpressionSobol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSobol;
	static C(Other: UObject | any): MaterialExpressionSobol;
}

declare type ESpeedTreeGeometryType = 'STG_Branch' | 'STG_Frond' | 'STG_Leaf' | 'STG_FacingLeaf' | 'STG_Billboard' | 'STG_MAX';
declare var ESpeedTreeGeometryType : { STG_Branch:'STG_Branch',STG_Frond:'STG_Frond',STG_Leaf:'STG_Leaf',STG_FacingLeaf:'STG_FacingLeaf',STG_Billboard:'STG_Billboard',STG_MAX:'STG_MAX', };
declare type ESpeedTreeWindType = 'STW_None' | 'STW_Fastest' | 'STW_Fast' | 'STW_Better' | 'STW_Best' | 'STW_Palm' | 'STW_BestPlus' | 'STW_MAX';
declare var ESpeedTreeWindType : { STW_None:'STW_None',STW_Fastest:'STW_Fastest',STW_Fast:'STW_Fast',STW_Better:'STW_Better',STW_Best:'STW_Best',STW_Palm:'STW_Palm',STW_BestPlus:'STW_BestPlus',STW_MAX:'STW_MAX', };
declare type ESpeedTreeLODType = 'STLOD_Pop' | 'STLOD_Smooth' | 'STLOD_MAX';
declare var ESpeedTreeLODType : { STLOD_Pop:'STLOD_Pop',STLOD_Smooth:'STLOD_Smooth',STLOD_MAX:'STLOD_MAX', };
declare class MaterialExpressionSpeedTree extends MaterialExpression { 
	GeometryInput: ExpressionInput;
	WindInput: ExpressionInput;
	LODInput: ExpressionInput;
	ExtraBendWS: ExpressionInput;
	GeometryType: ESpeedTreeGeometryType;
	WindType: ESpeedTreeWindType;
	LODType: ESpeedTreeLODType;
	BillboardThreshold: number;
	bAccurateWindVelocities: boolean;
	static Load(ResourceName: string): MaterialExpressionSpeedTree;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSpeedTree;
	static GetDefaultObject(): MaterialExpressionSpeedTree;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSpeedTree;
	static C(Other: UObject | any): MaterialExpressionSpeedTree;
}

declare class MaterialExpressionSphereMask extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	Radius: ExpressionInput;
	Hardness: ExpressionInput;
	AttenuationRadius: number;
	HardnessPercent: number;
	static Load(ResourceName: string): MaterialExpressionSphereMask;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSphereMask;
	static GetDefaultObject(): MaterialExpressionSphereMask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSphereMask;
	static C(Other: UObject | any): MaterialExpressionSphereMask;
}

declare class MaterialExpressionSphericalParticleOpacity extends MaterialExpression { 
	Density: ExpressionInput;
	ConstantDensity: number;
	static Load(ResourceName: string): MaterialExpressionSphericalParticleOpacity;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSphericalParticleOpacity;
	static GetDefaultObject(): MaterialExpressionSphericalParticleOpacity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSphericalParticleOpacity;
	static C(Other: UObject | any): MaterialExpressionSphericalParticleOpacity;
}

declare class MaterialExpressionSquareRoot extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionSquareRoot;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSquareRoot;
	static GetDefaultObject(): MaterialExpressionSquareRoot;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSquareRoot;
	static C(Other: UObject | any): MaterialExpressionSquareRoot;
}

declare class MaterialExpressionStaticBool extends MaterialExpression { 
	Value: boolean;
	static Load(ResourceName: string): MaterialExpressionStaticBool;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticBool;
	static GetDefaultObject(): MaterialExpressionStaticBool;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticBool;
	static C(Other: UObject | any): MaterialExpressionStaticBool;
}

declare class MaterialExpressionStaticBoolParameter extends MaterialExpressionParameter { 
	DefaultValue: boolean;
	static Load(ResourceName: string): MaterialExpressionStaticBoolParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticBoolParameter;
	static GetDefaultObject(): MaterialExpressionStaticBoolParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticBoolParameter;
	static C(Other: UObject | any): MaterialExpressionStaticBoolParameter;
}

declare class MaterialExpressionStaticComponentMaskParameter extends MaterialExpressionParameter { 
	Input: ExpressionInput;
	DefaultR: boolean;
	DefaultG: boolean;
	DefaultB: boolean;
	DefaultA: boolean;
	static Load(ResourceName: string): MaterialExpressionStaticComponentMaskParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticComponentMaskParameter;
	static GetDefaultObject(): MaterialExpressionStaticComponentMaskParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticComponentMaskParameter;
	static C(Other: UObject | any): MaterialExpressionStaticComponentMaskParameter;
}

declare class MaterialExpressionStaticSwitch extends MaterialExpression { 
	DefaultValue: boolean;
	A: ExpressionInput;
	B: ExpressionInput;
	Value: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionStaticSwitch;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticSwitch;
	static GetDefaultObject(): MaterialExpressionStaticSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticSwitch;
	static C(Other: UObject | any): MaterialExpressionStaticSwitch;
}

declare class MaterialExpressionStaticSwitchParameter extends MaterialExpressionStaticBoolParameter { 
	A: ExpressionInput;
	B: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionStaticSwitchParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionStaticSwitchParameter;
	static GetDefaultObject(): MaterialExpressionStaticSwitchParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionStaticSwitchParameter;
	static C(Other: UObject | any): MaterialExpressionStaticSwitchParameter;
}

declare class MaterialExpressionSubtract extends MaterialExpression { 
	A: ExpressionInput;
	B: ExpressionInput;
	ConstA: number;
	ConstB: number;
	static Load(ResourceName: string): MaterialExpressionSubtract;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSubtract;
	static GetDefaultObject(): MaterialExpressionSubtract;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSubtract;
	static C(Other: UObject | any): MaterialExpressionSubtract;
}

declare class MaterialExpressionTangent extends MaterialExpression { 
	Input: ExpressionInput;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionTangent;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTangent;
	static GetDefaultObject(): MaterialExpressionTangent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTangent;
	static C(Other: UObject | any): MaterialExpressionTangent;
}

declare class MaterialExpressionTangentOutput extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionTangentOutput;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTangentOutput;
	static GetDefaultObject(): MaterialExpressionTangentOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTangentOutput;
	static C(Other: UObject | any): MaterialExpressionTangentOutput;
}

declare class MaterialExpressionTemporalSobol extends MaterialExpression { 
	index: ExpressionInput;
	Seed: ExpressionInput;
	ConstIndex: any;
	ConstSeed: Vector2D;
	static Load(ResourceName: string): MaterialExpressionTemporalSobol;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTemporalSobol;
	static GetDefaultObject(): MaterialExpressionTemporalSobol;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTemporalSobol;
	static C(Other: UObject | any): MaterialExpressionTemporalSobol;
}

declare class MaterialExpressionTextureCoordinate extends MaterialExpression { 
	CoordinateIndex: number;
	UTiling: number;
	VTiling: number;
	UnMirrorU: boolean;
	UnMirrorV: boolean;
	static Load(ResourceName: string): MaterialExpressionTextureCoordinate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureCoordinate;
	static GetDefaultObject(): MaterialExpressionTextureCoordinate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureCoordinate;
	static C(Other: UObject | any): MaterialExpressionTextureCoordinate;
}

declare class MaterialExpressionTextureObject extends MaterialExpressionTextureBase { 
	static Load(ResourceName: string): MaterialExpressionTextureObject;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureObject;
	static GetDefaultObject(): MaterialExpressionTextureObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureObject;
	static C(Other: UObject | any): MaterialExpressionTextureObject;
}

declare class MaterialExpressionTextureObjectParameter extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureObjectParameter;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureObjectParameter;
	static GetDefaultObject(): MaterialExpressionTextureObjectParameter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureObjectParameter;
	static C(Other: UObject | any): MaterialExpressionTextureObjectParameter;
}

declare type EMaterialExposedTextureProperty = 'TMTM_TextureSize' | 'TMTM_TexelSize' | 'TMTM_MAX';
declare var EMaterialExposedTextureProperty : { TMTM_TextureSize:'TMTM_TextureSize',TMTM_TexelSize:'TMTM_TexelSize',TMTM_MAX:'TMTM_MAX', };
declare class MaterialExpressionTextureProperty extends MaterialExpression { 
	TextureObject: ExpressionInput;
	Property: EMaterialExposedTextureProperty;
	static Load(ResourceName: string): MaterialExpressionTextureProperty;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureProperty;
	static GetDefaultObject(): MaterialExpressionTextureProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureProperty;
	static C(Other: UObject | any): MaterialExpressionTextureProperty;
}

declare class MaterialExpressionTextureSampleParameterCube extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterCube;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterCube;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterCube;
	static C(Other: UObject | any): MaterialExpressionTextureSampleParameterCube;
}

declare class MaterialExpressionTextureSampleParameterSubUV extends MaterialExpressionTextureSampleParameter2D { 
	bBlend: boolean;
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterSubUV;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterSubUV;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterSubUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterSubUV;
	static C(Other: UObject | any): MaterialExpressionTextureSampleParameterSubUV;
}

declare class MaterialExpressionTextureSampleParameterVolume extends MaterialExpressionTextureSampleParameter { 
	static Load(ResourceName: string): MaterialExpressionTextureSampleParameterVolume;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTextureSampleParameterVolume;
	static GetDefaultObject(): MaterialExpressionTextureSampleParameterVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTextureSampleParameterVolume;
	static C(Other: UObject | any): MaterialExpressionTextureSampleParameterVolume;
}

declare class MaterialExpressionTime extends MaterialExpression { 
	bIgnorePause: boolean;
	bOverride_Period: boolean;
	Period: number;
	static Load(ResourceName: string): MaterialExpressionTime;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTime;
	static GetDefaultObject(): MaterialExpressionTime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTime;
	static C(Other: UObject | any): MaterialExpressionTime;
}

declare type EMaterialVectorCoordTransformSource = 'TRANSFORMSOURCE_Tangent' | 'TRANSFORMSOURCE_Local' | 'TRANSFORMSOURCE_World' | 'TRANSFORMSOURCE_View' | 'TRANSFORMSOURCE_Camera' | 'TRANSFORMSOURCE_ParticleWorld' | 'TRANSFORMSOURCE_MAX';
declare var EMaterialVectorCoordTransformSource : { TRANSFORMSOURCE_Tangent:'TRANSFORMSOURCE_Tangent',TRANSFORMSOURCE_Local:'TRANSFORMSOURCE_Local',TRANSFORMSOURCE_World:'TRANSFORMSOURCE_World',TRANSFORMSOURCE_View:'TRANSFORMSOURCE_View',TRANSFORMSOURCE_Camera:'TRANSFORMSOURCE_Camera',TRANSFORMSOURCE_ParticleWorld:'TRANSFORMSOURCE_ParticleWorld',TRANSFORMSOURCE_MAX:'TRANSFORMSOURCE_MAX', };
declare type EMaterialVectorCoordTransform = 'TRANSFORM_Tangent' | 'TRANSFORM_Local' | 'TRANSFORM_World' | 'TRANSFORM_View' | 'TRANSFORM_Camera' | 'TRANSFORM_ParticleWorld' | 'TRANSFORM_MAX';
declare var EMaterialVectorCoordTransform : { TRANSFORM_Tangent:'TRANSFORM_Tangent',TRANSFORM_Local:'TRANSFORM_Local',TRANSFORM_World:'TRANSFORM_World',TRANSFORM_View:'TRANSFORM_View',TRANSFORM_Camera:'TRANSFORM_Camera',TRANSFORM_ParticleWorld:'TRANSFORM_ParticleWorld',TRANSFORM_MAX:'TRANSFORM_MAX', };
declare class MaterialExpressionTransform extends MaterialExpression { 
	Input: ExpressionInput;
	TransformSourceType: EMaterialVectorCoordTransformSource;
	TransformType: EMaterialVectorCoordTransform;
	static Load(ResourceName: string): MaterialExpressionTransform;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransform;
	static GetDefaultObject(): MaterialExpressionTransform;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransform;
	static C(Other: UObject | any): MaterialExpressionTransform;
}

declare type EMaterialPositionTransformSource = 'TRANSFORMPOSSOURCE_Local' | 'TRANSFORMPOSSOURCE_World' | 'TRANSFORMPOSSOURCE_TranslatedWorld' | 'TRANSFORMPOSSOURCE_View' | 'TRANSFORMPOSSOURCE_Camera' | 'TRANSFORMPOSSOURCE_Particle' | 'TRANSFORMPOSSOURCE_MAX';
declare var EMaterialPositionTransformSource : { TRANSFORMPOSSOURCE_Local:'TRANSFORMPOSSOURCE_Local',TRANSFORMPOSSOURCE_World:'TRANSFORMPOSSOURCE_World',TRANSFORMPOSSOURCE_TranslatedWorld:'TRANSFORMPOSSOURCE_TranslatedWorld',TRANSFORMPOSSOURCE_View:'TRANSFORMPOSSOURCE_View',TRANSFORMPOSSOURCE_Camera:'TRANSFORMPOSSOURCE_Camera',TRANSFORMPOSSOURCE_Particle:'TRANSFORMPOSSOURCE_Particle',TRANSFORMPOSSOURCE_MAX:'TRANSFORMPOSSOURCE_MAX', };
declare class MaterialExpressionTransformPosition extends MaterialExpression { 
	Input: ExpressionInput;
	TransformSourceType: EMaterialPositionTransformSource;
	TransformType: EMaterialPositionTransformSource;
	static Load(ResourceName: string): MaterialExpressionTransformPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTransformPosition;
	static GetDefaultObject(): MaterialExpressionTransformPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTransformPosition;
	static C(Other: UObject | any): MaterialExpressionTransformPosition;
}

declare class MaterialExpressionTruncate extends MaterialExpression { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionTruncate;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTruncate;
	static GetDefaultObject(): MaterialExpressionTruncate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTruncate;
	static C(Other: UObject | any): MaterialExpressionTruncate;
}

declare class MaterialExpressionTwoSidedSign extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionTwoSidedSign;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionTwoSidedSign;
	static GetDefaultObject(): MaterialExpressionTwoSidedSign;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionTwoSidedSign;
	static C(Other: UObject | any): MaterialExpressionTwoSidedSign;
}

declare type EVectorNoiseFunction = 'VNF_CellnoiseALU' | 'VNF_VectorALU' | 'VNF_GradientALU' | 'VNF_CurlALU' | 'VNF_VoronoiALU' | 'VNF_MAX';
declare var EVectorNoiseFunction : { VNF_CellnoiseALU:'VNF_CellnoiseALU',VNF_VectorALU:'VNF_VectorALU',VNF_GradientALU:'VNF_GradientALU',VNF_CurlALU:'VNF_CurlALU',VNF_VoronoiALU:'VNF_VoronoiALU',VNF_MAX:'VNF_MAX', };
declare class MaterialExpressionVectorNoise extends MaterialExpression { 
	Position: ExpressionInput;
	NoiseFunction: EVectorNoiseFunction;
	Quality: number;
	bTiling: boolean;
	TileSize: any;
	static Load(ResourceName: string): MaterialExpressionVectorNoise;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVectorNoise;
	static GetDefaultObject(): MaterialExpressionVectorNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVectorNoise;
	static C(Other: UObject | any): MaterialExpressionVectorNoise;
}

declare class MaterialExpressionVertexColor extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionVertexColor;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexColor;
	static GetDefaultObject(): MaterialExpressionVertexColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexColor;
	static C(Other: UObject | any): MaterialExpressionVertexColor;
}

declare class MaterialExpressionVertexInterpolator extends MaterialExpressionCustomOutput { 
	Input: ExpressionInput;
	static Load(ResourceName: string): MaterialExpressionVertexInterpolator;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexInterpolator;
	static GetDefaultObject(): MaterialExpressionVertexInterpolator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexInterpolator;
	static C(Other: UObject | any): MaterialExpressionVertexInterpolator;
}

declare class MaterialExpressionVertexNormalWS extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionVertexNormalWS;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionVertexNormalWS;
	static GetDefaultObject(): MaterialExpressionVertexNormalWS;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionVertexNormalWS;
	static C(Other: UObject | any): MaterialExpressionVertexNormalWS;
}

declare type EMaterialExposedViewProperty = 'MEVP_BufferSize' | 'MEVP_FieldOfView' | 'MEVP_TanHalfFieldOfView' | 'MEVP_ViewSize' | 'MEVP_WorldSpaceViewPosition' | 'MEVP_WorldSpaceCameraPosition' | 'MEVP_ViewportOffset' | 'MEVP_MAX';
declare var EMaterialExposedViewProperty : { MEVP_BufferSize:'MEVP_BufferSize',MEVP_FieldOfView:'MEVP_FieldOfView',MEVP_TanHalfFieldOfView:'MEVP_TanHalfFieldOfView',MEVP_ViewSize:'MEVP_ViewSize',MEVP_WorldSpaceViewPosition:'MEVP_WorldSpaceViewPosition',MEVP_WorldSpaceCameraPosition:'MEVP_WorldSpaceCameraPosition',MEVP_ViewportOffset:'MEVP_ViewportOffset',MEVP_MAX:'MEVP_MAX', };
declare class MaterialExpressionViewProperty extends MaterialExpression { 
	Property: EMaterialExposedViewProperty;
	static Load(ResourceName: string): MaterialExpressionViewProperty;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewProperty;
	static GetDefaultObject(): MaterialExpressionViewProperty;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewProperty;
	static C(Other: UObject | any): MaterialExpressionViewProperty;
}

declare class MaterialExpressionViewSize extends MaterialExpression { 
	static Load(ResourceName: string): MaterialExpressionViewSize;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionViewSize;
	static GetDefaultObject(): MaterialExpressionViewSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionViewSize;
	static C(Other: UObject | any): MaterialExpressionViewSize;
}

declare type EWorldPositionIncludedOffsets = 'WPT_Default' | 'WPT_ExcludeAllShaderOffsets' | 'WPT_CameraRelative' | 'WPT_CameraRelativeNoOffsets' | 'WPT_MAX';
declare var EWorldPositionIncludedOffsets : { WPT_Default:'WPT_Default',WPT_ExcludeAllShaderOffsets:'WPT_ExcludeAllShaderOffsets',WPT_CameraRelative:'WPT_CameraRelative',WPT_CameraRelativeNoOffsets:'WPT_CameraRelativeNoOffsets',WPT_MAX:'WPT_MAX', };
declare class MaterialExpressionWorldPosition extends MaterialExpression { 
	WorldPositionShaderOffset: EWorldPositionIncludedOffsets;
	static Load(ResourceName: string): MaterialExpressionWorldPosition;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionWorldPosition;
	static GetDefaultObject(): MaterialExpressionWorldPosition;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionWorldPosition;
	static C(Other: UObject | any): MaterialExpressionWorldPosition;
}

declare class MaterialFunctionMaterialLayer extends MaterialFunction { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayer;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayer;
	static GetDefaultObject(): MaterialFunctionMaterialLayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayer;
	static C(Other: UObject | any): MaterialFunctionMaterialLayer;
}

declare class MaterialFunctionMaterialLayerInstance extends MaterialFunctionInstance { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerInstance;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerInstance;
	static GetDefaultObject(): MaterialFunctionMaterialLayerInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerInstance;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerInstance;
}

declare class MaterialFunctionMaterialLayerBlend extends MaterialFunction { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlend;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlend;
	static GetDefaultObject(): MaterialFunctionMaterialLayerBlend;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlend;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlend;
}

declare class MaterialFunctionMaterialLayerBlendInstance extends MaterialFunctionInstance { 
	static Load(ResourceName: string): MaterialFunctionMaterialLayerBlendInstance;
	static Find(Outer: UObject, ResourceName: string): MaterialFunctionMaterialLayerBlendInstance;
	static GetDefaultObject(): MaterialFunctionMaterialLayerBlendInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialFunctionMaterialLayerBlendInstance;
	static C(Other: UObject | any): MaterialFunctionMaterialLayerBlendInstance;
}

declare class MaterialInstanceActor extends Actor { 
	TargetActors: Actor[];
	static GetDefaultObject(): MaterialInstanceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialInstanceActor;
	static C(Other: UObject | any): MaterialInstanceActor;
}

declare class MatineeActorCameraAnim extends MatineeActor { 
	CameraAnim: CameraAnim;
	static GetDefaultObject(): MatineeActorCameraAnim;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeActorCameraAnim;
	static C(Other: UObject | any): MatineeActorCameraAnim;
}

declare class MatineeAnimInterface extends Interface { 
	static Load(ResourceName: string): MatineeAnimInterface;
	static Find(Outer: UObject, ResourceName: string): MatineeAnimInterface;
	static GetDefaultObject(): MatineeAnimInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeAnimInterface;
	static C(Other: UObject | any): MatineeAnimInterface;
}

declare class MatineeInterface extends Interface { 
	static Load(ResourceName: string): MatineeInterface;
	static Find(Outer: UObject, ResourceName: string): MatineeInterface;
	static GetDefaultObject(): MatineeInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MatineeInterface;
	static C(Other: UObject | any): MatineeInterface;
}

declare class MeshMergeCullingVolume extends Volume { 
	static GetDefaultObject(): MeshMergeCullingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshMergeCullingVolume;
	static C(Other: UObject | any): MeshMergeCullingVolume;
}

declare class MeshSimplificationSettings extends DeveloperSettings { 
	MeshReductionModuleName: string;
	static Load(ResourceName: string): MeshSimplificationSettings;
	static Find(Outer: UObject, ResourceName: string): MeshSimplificationSettings;
	static GetDefaultObject(): MeshSimplificationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshSimplificationSettings;
	static C(Other: UObject | any): MeshSimplificationSettings;
}

declare class MeshVertexPainterKismetLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MeshVertexPainterKismetLibrary;
	static Find(Outer: UObject, ResourceName: string): MeshVertexPainterKismetLibrary;
	static GetDefaultObject(): MeshVertexPainterKismetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshVertexPainterKismetLibrary;
	static RemovePaintedVertices(StaticMeshComponent: StaticMeshComponent): void;
	static PaintVerticesSingleColor(StaticMeshComponent: StaticMeshComponent,FillColor: LinearColor,bConvertToSRGB: boolean): void;
	static PaintVerticesLerpAlongAxis(StaticMeshComponent: StaticMeshComponent,StartColor: LinearColor,EndColor: LinearColor,Axis: EVertexPaintAxis,bConvertToSRGB: boolean): void;
	static C(Other: UObject | any): MeshVertexPainterKismetLibrary;
}

declare class PurchaseInfo { 
	Identifier: string;
	DisplayName: string;
	DisplayDescription: string;
	DisplayPrice: string;
	clone() : PurchaseInfo;
	static C(Other: UObject | any): PurchaseInfo;
}

declare class MicroTransactionBase extends PlatformInterfaceBase { 
	AvailableProducts: PurchaseInfo[];
	LastError: string;
	LastErrorSolution: string;
	static Load(ResourceName: string): MicroTransactionBase;
	static Find(Outer: UObject, ResourceName: string): MicroTransactionBase;
	static GetDefaultObject(): MicroTransactionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MicroTransactionBase;
	static C(Other: UObject | any): MicroTransactionBase;
}

declare class NavAgentInterface extends Interface { 
	static Load(ResourceName: string): NavAgentInterface;
	static Find(Outer: UObject, ResourceName: string): NavAgentInterface;
	static GetDefaultObject(): NavAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavAgentInterface;
	static C(Other: UObject | any): NavAgentInterface;
}

declare class NavEdgeProviderInterface extends Interface { 
	static Load(ResourceName: string): NavEdgeProviderInterface;
	static Find(Outer: UObject, ResourceName: string): NavEdgeProviderInterface;
	static GetDefaultObject(): NavEdgeProviderInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavEdgeProviderInterface;
	static C(Other: UObject | any): NavEdgeProviderInterface;
}

declare class NavigationDataInterface extends Interface { 
	static Load(ResourceName: string): NavigationDataInterface;
	static Find(Outer: UObject, ResourceName: string): NavigationDataInterface;
	static GetDefaultObject(): NavigationDataInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationDataInterface;
	static C(Other: UObject | any): NavigationDataInterface;
}

declare class NavigationSystem extends UObject { 
	static Load(ResourceName: string): NavigationSystem;
	static Find(Outer: UObject, ResourceName: string): NavigationSystem;
	static GetDefaultObject(): NavigationSystem;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavigationSystem;
	static SimpleMoveToLocation(Controller: Controller,Goal: Vector): void;
	static SimpleMoveToActor(Controller: Controller,Goal: Actor): void;
	static C(Other: UObject | any): NavigationSystem;
}

declare class NullNavSysConfig extends NavigationSystemConfig { 
	static Load(ResourceName: string): NullNavSysConfig;
	static Find(Outer: UObject, ResourceName: string): NullNavSysConfig;
	static GetDefaultObject(): NullNavSysConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NullNavSysConfig;
	static C(Other: UObject | any): NullNavSysConfig;
}

declare class NavPathObserverInterface extends Interface { 
	static Load(ResourceName: string): NavPathObserverInterface;
	static Find(Outer: UObject, ResourceName: string): NavPathObserverInterface;
	static GetDefaultObject(): NavPathObserverInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavPathObserverInterface;
	static C(Other: UObject | any): NavPathObserverInterface;
}

declare class NavRelevantInterface extends Interface { 
	static Load(ResourceName: string): NavRelevantInterface;
	static Find(Outer: UObject, ResourceName: string): NavRelevantInterface;
	static GetDefaultObject(): NavRelevantInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NavRelevantInterface;
	static C(Other: UObject | any): NavRelevantInterface;
}

declare class SimulatedClientNetConnection extends NetConnection { 
	static Load(ResourceName: string): SimulatedClientNetConnection;
	static Find(Outer: UObject, ResourceName: string): SimulatedClientNetConnection;
	static GetDefaultObject(): SimulatedClientNetConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimulatedClientNetConnection;
	static C(Other: UObject | any): SimulatedClientNetConnection;
}

declare class NetworkPredictionInterface extends Interface { 
	static Load(ResourceName: string): NetworkPredictionInterface;
	static Find(Outer: UObject, ResourceName: string): NetworkPredictionInterface;
	static GetDefaultObject(): NetworkPredictionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkPredictionInterface;
	static C(Other: UObject | any): NetworkPredictionInterface;
}

declare class NetworkSettings extends DeveloperSettings { 
	bVerifyPeer: boolean;
	bEnableMultiplayerWorldOriginRebasing: boolean;
	MaxRepArraySize: number;
	MaxRepArrayMemory: number;
	static Load(ResourceName: string): NetworkSettings;
	static Find(Outer: UObject, ResourceName: string): NetworkSettings;
	static GetDefaultObject(): NetworkSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NetworkSettings;
	static C(Other: UObject | any): NetworkSettings;
}

declare class NodeMappingProviderInterface extends Interface { 
	static Load(ResourceName: string): NodeMappingProviderInterface;
	static Find(Outer: UObject, ResourceName: string): NodeMappingProviderInterface;
	static GetDefaultObject(): NodeMappingProviderInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NodeMappingProviderInterface;
	static C(Other: UObject | any): NodeMappingProviderInterface;
}

declare class Note extends Actor { 
	text: string;
	SpriteComponent: BillboardComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): Note;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Note;
	static C(Other: UObject | any): Note;
}

declare class ObjectLibrary extends UObject { 
	ObjectBaseClass: UnrealEngineClass;
	bHasBlueprintClasses: boolean;
	Objects: UObject[];
	WeakObjects: any[];
	bUseWeakReferences: boolean;
	bIsFullyLoaded: boolean;
	static Load(ResourceName: string): ObjectLibrary;
	static Find(Outer: UObject, ResourceName: string): ObjectLibrary;
	static GetDefaultObject(): ObjectLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectLibrary;
	static C(Other: UObject | any): ObjectLibrary;
}

declare class ObjectReferencer extends UObject { 
	ReferencedObjects: UObject[];
	static Load(ResourceName: string): ObjectReferencer;
	static Find(Outer: UObject, ResourceName: string): ObjectReferencer;
	static GetDefaultObject(): ObjectReferencer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ObjectReferencer;
	static C(Other: UObject | any): ObjectReferencer;
}

declare class OnlineBlueprintCallProxyBase extends UObject { 
	static Load(ResourceName: string): OnlineBlueprintCallProxyBase;
	static Find(Outer: UObject, ResourceName: string): OnlineBlueprintCallProxyBase;
	static GetDefaultObject(): OnlineBlueprintCallProxyBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBlueprintCallProxyBase;
	Activate(): void;
	static C(Other: UObject | any): OnlineBlueprintCallProxyBase;
}

declare class OnlineEngineInterface extends UObject { 
	static Load(ResourceName: string): OnlineEngineInterface;
	static Find(Outer: UObject, ResourceName: string): OnlineEngineInterface;
	static GetDefaultObject(): OnlineEngineInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineEngineInterface;
	static C(Other: UObject | any): OnlineEngineInterface;
}

declare class PackageMapClient extends PackageMap { 
	static Load(ResourceName: string): PackageMapClient;
	static Find(Outer: UObject, ResourceName: string): PackageMapClient;
	static GetDefaultObject(): PackageMapClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PackageMapClient;
	static C(Other: UObject | any): PackageMapClient;
}

declare class PainCausingVolume extends PhysicsVolume { 
	bPainCausing: boolean;
	DamagePerSec: number;
	DamageType: UnrealEngineClass;
	PainInterval: number;
	bEntryPain: boolean;
	BACKUP_bPainCausing: boolean;
	DamageInstigator: Controller;
	static GetDefaultObject(): PainCausingVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PainCausingVolume;
	static C(Other: UObject | any): PainCausingVolume;
}

declare class ParticleModuleAccelerationBase extends ParticleModule { 
	bAlwaysInWorldSpace: boolean;
	static Load(ResourceName: string): ParticleModuleAccelerationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationBase;
	static GetDefaultObject(): ParticleModuleAccelerationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationBase;
	static C(Other: UObject | any): ParticleModuleAccelerationBase;
}

declare class ParticleModuleAcceleration extends ParticleModuleAccelerationBase { 
	Acceleration: RawDistributionVector;
	bApplyOwnerScale: boolean;
	static Load(ResourceName: string): ParticleModuleAcceleration;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAcceleration;
	static GetDefaultObject(): ParticleModuleAcceleration;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAcceleration;
	static C(Other: UObject | any): ParticleModuleAcceleration;
}

declare class ParticleModuleAccelerationConstant extends ParticleModuleAccelerationBase { 
	Acceleration: Vector;
	static Load(ResourceName: string): ParticleModuleAccelerationConstant;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationConstant;
	static GetDefaultObject(): ParticleModuleAccelerationConstant;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationConstant;
	static C(Other: UObject | any): ParticleModuleAccelerationConstant;
}

declare class ParticleModuleAccelerationDrag extends ParticleModuleAccelerationBase { 
	DragCoefficient: DistributionFloat;
	DragCoefficientRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAccelerationDrag;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDrag;
	static GetDefaultObject(): ParticleModuleAccelerationDrag;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDrag;
	static C(Other: UObject | any): ParticleModuleAccelerationDrag;
}

declare class ParticleModuleAccelerationDragScaleOverLife extends ParticleModuleAccelerationBase { 
	DragScale: DistributionFloat;
	DragScaleRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationDragScaleOverLife;
	static GetDefaultObject(): ParticleModuleAccelerationDragScaleOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationDragScaleOverLife;
	static C(Other: UObject | any): ParticleModuleAccelerationDragScaleOverLife;
}

declare class ParticleModuleAccelerationOverLifetime extends ParticleModuleAccelerationBase { 
	AccelOverLife: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleAccelerationOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAccelerationOverLifetime;
	static GetDefaultObject(): ParticleModuleAccelerationOverLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAccelerationOverLifetime;
	static C(Other: UObject | any): ParticleModuleAccelerationOverLifetime;
}

declare class ParticleModuleAttractorBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleAttractorBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorBase;
	static GetDefaultObject(): ParticleModuleAttractorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorBase;
	static C(Other: UObject | any): ParticleModuleAttractorBase;
}

declare class ParticleModuleAttractorLine extends ParticleModuleAttractorBase { 
	EndPoint0: Vector;
	EndPoint1: Vector;
	Range: RawDistributionFloat;
	Strength: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAttractorLine;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorLine;
	static GetDefaultObject(): ParticleModuleAttractorLine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorLine;
	static C(Other: UObject | any): ParticleModuleAttractorLine;
}

declare type EAttractorParticleSelectionMethod = 'EAPSM_Random' | 'EAPSM_Sequential' | 'EAPSM_MAX';
declare var EAttractorParticleSelectionMethod : { EAPSM_Random:'EAPSM_Random',EAPSM_Sequential:'EAPSM_Sequential',EAPSM_MAX:'EAPSM_MAX', };
declare class ParticleModuleAttractorParticle extends ParticleModuleAttractorBase { 
	EmitterName: string;
	Range: RawDistributionFloat;
	bStrengthByDistance: boolean;
	Strength: RawDistributionFloat;
	bAffectBaseVelocity: boolean;
	SelectionMethod: EAttractorParticleSelectionMethod;
	bRenewSource: boolean;
	bInheritSourceVel: boolean;
	LastSelIndex: number;
	static Load(ResourceName: string): ParticleModuleAttractorParticle;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorParticle;
	static GetDefaultObject(): ParticleModuleAttractorParticle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorParticle;
	static C(Other: UObject | any): ParticleModuleAttractorParticle;
}

declare class ParticleModuleAttractorPoint extends ParticleModuleAttractorBase { 
	Position: RawDistributionVector;
	Range: RawDistributionFloat;
	Strength: RawDistributionFloat;
	StrengthByDistance: boolean;
	bAffectBaseVelocity: boolean;
	bOverrideVelocity: boolean;
	bUseWorldSpacePosition: boolean;
	Positive_X: boolean;
	Positive_Y: boolean;
	Positive_Z: boolean;
	Negative_X: boolean;
	Negative_Y: boolean;
	Negative_Z: boolean;
	static Load(ResourceName: string): ParticleModuleAttractorPoint;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPoint;
	static GetDefaultObject(): ParticleModuleAttractorPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPoint;
	static C(Other: UObject | any): ParticleModuleAttractorPoint;
}

declare class ParticleModuleAttractorPointGravity extends ParticleModuleAttractorBase { 
	Position: Vector;
	Radius: number;
	Strength: DistributionFloat;
	StrengthRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleAttractorPointGravity;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleAttractorPointGravity;
	static GetDefaultObject(): ParticleModuleAttractorPointGravity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleAttractorPointGravity;
	static C(Other: UObject | any): ParticleModuleAttractorPointGravity;
}

declare class ParticleModuleBeamBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleBeamBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamBase;
	static GetDefaultObject(): ParticleModuleBeamBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamBase;
	static C(Other: UObject | any): ParticleModuleBeamBase;
}

declare type BeamModifierType = 'PEB2MT_Source' | 'PEB2MT_Target' | 'PEB2MT_MAX';
declare var BeamModifierType : { PEB2MT_Source:'PEB2MT_Source',PEB2MT_Target:'PEB2MT_Target',PEB2MT_MAX:'PEB2MT_MAX', };
declare class BeamModifierOptions { 
	bModify: boolean;
	bScale: boolean;
	bLock: boolean;
	clone() : BeamModifierOptions;
	static C(Other: UObject | any): BeamModifierOptions;
}

declare class ParticleModuleBeamModifier extends ParticleModuleBeamBase { 
	ModifierType: BeamModifierType;
	PositionOptions: BeamModifierOptions;
	Position: RawDistributionVector;
	TangentOptions: BeamModifierOptions;
	Tangent: RawDistributionVector;
	bAbsoluteTangent: boolean;
	StrengthOptions: BeamModifierOptions;
	Strength: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleBeamModifier;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamModifier;
	static GetDefaultObject(): ParticleModuleBeamModifier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamModifier;
	static C(Other: UObject | any): ParticleModuleBeamModifier;
}

declare class ParticleModuleBeamNoise extends ParticleModuleBeamBase { 
	bLowFreq_Enabled: boolean;
	Frequency: number;
	Frequency_LowRange: number;
	NoiseRange: RawDistributionVector;
	NoiseRangeScale: RawDistributionFloat;
	bNRScaleEmitterTime: boolean;
	NoiseSpeed: RawDistributionVector;
	bSmooth: boolean;
	NoiseLockRadius: number;
	bNoiseLock: boolean;
	bOscillate: boolean;
	NoiseLockTime: number;
	NoiseTension: number;
	bUseNoiseTangents: boolean;
	NoiseTangentStrength: RawDistributionFloat;
	NoiseTessellation: number;
	bTargetNoise: boolean;
	FrequencyDistance: number;
	bApplyNoiseScale: boolean;
	NoiseScale: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleBeamNoise;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamNoise;
	static GetDefaultObject(): ParticleModuleBeamNoise;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamNoise;
	static C(Other: UObject | any): ParticleModuleBeamNoise;
}

declare type Beam2SourceTargetMethod = 'PEB2STM_Default' | 'PEB2STM_UserSet' | 'PEB2STM_Emitter' | 'PEB2STM_Particle' | 'PEB2STM_Actor' | 'PEB2STM_MAX';
declare var Beam2SourceTargetMethod : { PEB2STM_Default:'PEB2STM_Default',PEB2STM_UserSet:'PEB2STM_UserSet',PEB2STM_Emitter:'PEB2STM_Emitter',PEB2STM_Particle:'PEB2STM_Particle',PEB2STM_Actor:'PEB2STM_Actor',PEB2STM_MAX:'PEB2STM_MAX', };
declare type Beam2SourceTargetTangentMethod = 'PEB2STTM_Direct' | 'PEB2STTM_UserSet' | 'PEB2STTM_Distribution' | 'PEB2STTM_Emitter' | 'PEB2STTM_MAX';
declare var Beam2SourceTargetTangentMethod : { PEB2STTM_Direct:'PEB2STTM_Direct',PEB2STTM_UserSet:'PEB2STTM_UserSet',PEB2STTM_Distribution:'PEB2STTM_Distribution',PEB2STTM_Emitter:'PEB2STTM_Emitter',PEB2STTM_MAX:'PEB2STTM_MAX', };
declare class ParticleModuleBeamSource extends ParticleModuleBeamBase { 
	SourceMethod: Beam2SourceTargetMethod;
	SourceName: string;
	bSourceAbsolute: boolean;
	Source: RawDistributionVector;
	bLockSource: boolean;
	SourceTangentMethod: Beam2SourceTargetTangentMethod;
	SourceTangent: RawDistributionVector;
	bLockSourceTangent: boolean;
	SourceStrength: RawDistributionFloat;
	bLockSourceStength: boolean;
	static Load(ResourceName: string): ParticleModuleBeamSource;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamSource;
	static GetDefaultObject(): ParticleModuleBeamSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamSource;
	static C(Other: UObject | any): ParticleModuleBeamSource;
}

declare class ParticleModuleBeamTarget extends ParticleModuleBeamBase { 
	TargetMethod: Beam2SourceTargetMethod;
	TargetName: string;
	Target: RawDistributionVector;
	bTargetAbsolute: boolean;
	bLockTarget: boolean;
	TargetTangentMethod: Beam2SourceTargetTangentMethod;
	TargetTangent: RawDistributionVector;
	bLockTargetTangent: boolean;
	TargetStrength: RawDistributionFloat;
	bLockTargetStength: boolean;
	LockRadius: number;
	static Load(ResourceName: string): ParticleModuleBeamTarget;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleBeamTarget;
	static GetDefaultObject(): ParticleModuleBeamTarget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleBeamTarget;
	static C(Other: UObject | any): ParticleModuleBeamTarget;
}

declare class ParticleModuleCameraBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleCameraBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraBase;
	static GetDefaultObject(): ParticleModuleCameraBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraBase;
	static C(Other: UObject | any): ParticleModuleCameraBase;
}

declare type EParticleCameraOffsetUpdateMethod = 'EPCOUM_DirectSet' | 'EPCOUM_Additive' | 'EPCOUM_Scalar' | 'EPCOUM_MAX';
declare var EParticleCameraOffsetUpdateMethod : { EPCOUM_DirectSet:'EPCOUM_DirectSet',EPCOUM_Additive:'EPCOUM_Additive',EPCOUM_Scalar:'EPCOUM_Scalar',EPCOUM_MAX:'EPCOUM_MAX', };
declare class ParticleModuleCameraOffset extends ParticleModuleCameraBase { 
	CameraOffset: RawDistributionFloat;
	bSpawnTimeOnly: boolean;
	UpdateMethod: EParticleCameraOffsetUpdateMethod;
	static Load(ResourceName: string): ParticleModuleCameraOffset;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCameraOffset;
	static GetDefaultObject(): ParticleModuleCameraOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCameraOffset;
	static C(Other: UObject | any): ParticleModuleCameraOffset;
}

declare class ParticleModuleCollisionBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleCollisionBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionBase;
	static GetDefaultObject(): ParticleModuleCollisionBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionBase;
	static C(Other: UObject | any): ParticleModuleCollisionBase;
}

declare type EParticleCollisionComplete = 'EPCC_Kill' | 'EPCC_Freeze' | 'EPCC_HaltCollisions' | 'EPCC_FreezeTranslation' | 'EPCC_FreezeRotation' | 'EPCC_FreezeMovement' | 'EPCC_MAX';
declare var EParticleCollisionComplete : { EPCC_Kill:'EPCC_Kill',EPCC_Freeze:'EPCC_Freeze',EPCC_HaltCollisions:'EPCC_HaltCollisions',EPCC_FreezeTranslation:'EPCC_FreezeTranslation',EPCC_FreezeRotation:'EPCC_FreezeRotation',EPCC_FreezeMovement:'EPCC_FreezeMovement',EPCC_MAX:'EPCC_MAX', };
declare class ParticleModuleCollision extends ParticleModuleCollisionBase { 
	DampingFactor: RawDistributionVector;
	DampingFactorRotation: RawDistributionVector;
	MaxCollisions: RawDistributionFloat;
	CollisionCompletionOption: EParticleCollisionComplete;
	CollisionTypes: EObjectTypeQuery[];
	bApplyPhysics: boolean;
	bIgnoreTriggerVolumes: boolean;
	ParticleMass: RawDistributionFloat;
	DirScalar: number;
	bPawnsDoNotDecrementCount: boolean;
	bOnlyVerticalNormalsDecrementCount: boolean;
	VerticalFudgeFactor: number;
	DelayAmount: RawDistributionFloat;
	bDropDetail: boolean;
	bCollideOnlyIfVisible: boolean;
	bIgnoreSourceActor: boolean;
	MaxCollisionDistance: number;
	static Load(ResourceName: string): ParticleModuleCollision;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollision;
	static GetDefaultObject(): ParticleModuleCollision;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollision;
	static C(Other: UObject | any): ParticleModuleCollision;
}

declare type EParticleCollisionResponse = 'Bounce' | 'Stop' | 'Kill' | 'EParticleCollisionResponse_MAX';
declare var EParticleCollisionResponse : { Bounce:'Bounce',Stop:'Stop',Kill:'Kill',EParticleCollisionResponse_MAX:'EParticleCollisionResponse_MAX', };
declare type EParticleCollisionMode = 'SceneDepth' | 'DistanceField' | 'EParticleCollisionMode_MAX';
declare var EParticleCollisionMode : { SceneDepth:'SceneDepth',DistanceField:'DistanceField',EParticleCollisionMode_MAX:'EParticleCollisionMode_MAX', };
declare class ParticleModuleCollisionGPU extends ParticleModuleCollisionBase { 
	Resilience: RawDistributionFloat;
	ResilienceScaleOverLife: RawDistributionFloat;
	Friction: number;
	RandomSpread: number;
	RandomDistribution: number;
	RadiusScale: number;
	RadiusBias: number;
	Response: EParticleCollisionResponse;
	CollisionMode: EParticleCollisionMode;
	static Load(ResourceName: string): ParticleModuleCollisionGPU;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleCollisionGPU;
	static GetDefaultObject(): ParticleModuleCollisionGPU;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleCollisionGPU;
	static C(Other: UObject | any): ParticleModuleCollisionGPU;
}

declare class ParticleModuleColorBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleColorBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorBase;
	static GetDefaultObject(): ParticleModuleColorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorBase;
	static C(Other: UObject | any): ParticleModuleColorBase;
}

declare class ParticleModuleColor extends ParticleModuleColorBase { 
	StartColor: RawDistributionVector;
	StartAlpha: RawDistributionFloat;
	bClampAlpha: boolean;
	static Load(ResourceName: string): ParticleModuleColor;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor;
	static GetDefaultObject(): ParticleModuleColor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor;
	static C(Other: UObject | any): ParticleModuleColor;
}

declare class ParticleRandomSeedInfo { 
	ParameterName: string;
	bGetSeedFromInstance: boolean;
	bInstanceSeedIsIndex: boolean;
	bResetSeedOnEmitterLooping: boolean;
	bRandomlySelectSeedArray: boolean;
	RandomSeeds: number[];
	clone() : ParticleRandomSeedInfo;
	static C(Other: UObject | any): ParticleRandomSeedInfo;
}

declare class ParticleModuleColor_Seeded extends ParticleModuleColor { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleColor_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColor_Seeded;
	static GetDefaultObject(): ParticleModuleColor_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColor_Seeded;
	static C(Other: UObject | any): ParticleModuleColor_Seeded;
}

declare class ParticleModuleColorOverLife extends ParticleModuleColorBase { 
	ColorOverLife: RawDistributionVector;
	AlphaOverLife: RawDistributionFloat;
	bClampAlpha: boolean;
	static Load(ResourceName: string): ParticleModuleColorOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorOverLife;
	static GetDefaultObject(): ParticleModuleColorOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorOverLife;
	static C(Other: UObject | any): ParticleModuleColorOverLife;
}

declare class ParticleModuleColorScaleOverLife extends ParticleModuleColorBase { 
	ColorScaleOverLife: RawDistributionVector;
	AlphaScaleOverLife: RawDistributionFloat;
	bEmitterTime: boolean;
	static Load(ResourceName: string): ParticleModuleColorScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleColorScaleOverLife;
	static GetDefaultObject(): ParticleModuleColorScaleOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleColorScaleOverLife;
	static C(Other: UObject | any): ParticleModuleColorScaleOverLife;
}

declare class ParticleModuleEventReceiverKillParticles extends ParticleModuleEventReceiverBase { 
	bStopSpawning: boolean;
	static Load(ResourceName: string): ParticleModuleEventReceiverKillParticles;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverKillParticles;
	static GetDefaultObject(): ParticleModuleEventReceiverKillParticles;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverKillParticles;
	static C(Other: UObject | any): ParticleModuleEventReceiverKillParticles;
}

declare class ParticleModuleEventReceiverSpawn extends ParticleModuleEventReceiverBase { 
	SpawnCount: RawDistributionFloat;
	bUseParticleTime: boolean;
	bUsePSysLocation: boolean;
	bInheritVelocity: boolean;
	InheritVelocityScale: RawDistributionVector;
	PhysicalMaterials: PhysicalMaterial[];
	bBanPhysicalMaterials: boolean;
	static Load(ResourceName: string): ParticleModuleEventReceiverSpawn;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleEventReceiverSpawn;
	static GetDefaultObject(): ParticleModuleEventReceiverSpawn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleEventReceiverSpawn;
	static C(Other: UObject | any): ParticleModuleEventReceiverSpawn;
}

declare class ParticleModuleKillBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleKillBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBase;
	static GetDefaultObject(): ParticleModuleKillBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBase;
	static C(Other: UObject | any): ParticleModuleKillBase;
}

declare class ParticleModuleKillBox extends ParticleModuleKillBase { 
	LowerLeftCorner: RawDistributionVector;
	UpperRightCorner: RawDistributionVector;
	bAbsolute: boolean;
	bKillInside: boolean;
	bAxisAlignedAndFixedSize: boolean;
	static Load(ResourceName: string): ParticleModuleKillBox;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillBox;
	static GetDefaultObject(): ParticleModuleKillBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillBox;
	static C(Other: UObject | any): ParticleModuleKillBox;
}

declare class ParticleModuleKillHeight extends ParticleModuleKillBase { 
	Height: RawDistributionFloat;
	bAbsolute: boolean;
	bFloor: boolean;
	bApplyPSysScale: boolean;
	static Load(ResourceName: string): ParticleModuleKillHeight;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleKillHeight;
	static GetDefaultObject(): ParticleModuleKillHeight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleKillHeight;
	static C(Other: UObject | any): ParticleModuleKillHeight;
}

declare class ParticleModuleLifetimeBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleLifetimeBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetimeBase;
	static GetDefaultObject(): ParticleModuleLifetimeBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetimeBase;
	static C(Other: UObject | any): ParticleModuleLifetimeBase;
}

declare class ParticleModuleLifetime extends ParticleModuleLifetimeBase { 
	LifeTime: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime;
	static GetDefaultObject(): ParticleModuleLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime;
	static C(Other: UObject | any): ParticleModuleLifetime;
}

declare class ParticleModuleLifetime_Seeded extends ParticleModuleLifetime { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLifetime_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLifetime_Seeded;
	static GetDefaultObject(): ParticleModuleLifetime_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLifetime_Seeded;
	static C(Other: UObject | any): ParticleModuleLifetime_Seeded;
}

declare class ParticleModuleLightBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleLightBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLightBase;
	static GetDefaultObject(): ParticleModuleLightBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLightBase;
	static C(Other: UObject | any): ParticleModuleLightBase;
}

declare class ParticleModuleLight extends ParticleModuleLightBase { 
	bUseInverseSquaredFalloff: boolean;
	bAffectsTranslucency: boolean;
	bPreviewLightRadius: boolean;
	SpawnFraction: number;
	ColorScaleOverLife: RawDistributionVector;
	BrightnessOverLife: RawDistributionFloat;
	RadiusScale: RawDistributionFloat;
	LightExponent: RawDistributionFloat;
	LightingChannels: LightingChannels;
	VolumetricScatteringIntensity: number;
	bHighQualityLights: boolean;
	bShadowCastingLights: boolean;
	static Load(ResourceName: string): ParticleModuleLight;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight;
	static GetDefaultObject(): ParticleModuleLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight;
	static C(Other: UObject | any): ParticleModuleLight;
}

declare class ParticleModuleLight_Seeded extends ParticleModuleLight { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLight_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLight_Seeded;
	static GetDefaultObject(): ParticleModuleLight_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLight_Seeded;
	static C(Other: UObject | any): ParticleModuleLight_Seeded;
}

declare class ParticleModuleLocationBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleLocationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBase;
	static GetDefaultObject(): ParticleModuleLocationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBase;
	static C(Other: UObject | any): ParticleModuleLocationBase;
}

declare class ParticleModuleLocation extends ParticleModuleLocationBase { 
	StartLocation: RawDistributionVector;
	DistributeOverNPoints: number;
	DistributeThreshold: number;
	static Load(ResourceName: string): ParticleModuleLocation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation;
	static GetDefaultObject(): ParticleModuleLocation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation;
	static C(Other: UObject | any): ParticleModuleLocation;
}

declare class ParticleModuleLocation_Seeded extends ParticleModuleLocation { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocation_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocation_Seeded;
	static GetDefaultObject(): ParticleModuleLocation_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocation_Seeded;
	static C(Other: UObject | any): ParticleModuleLocation_Seeded;
}

declare type ELocationBoneSocketSource = 'BONESOCKETSOURCE_Bones' | 'BONESOCKETSOURCE_Sockets' | 'BONESOCKETSOURCE_MAX';
declare var ELocationBoneSocketSource : { BONESOCKETSOURCE_Bones:'BONESOCKETSOURCE_Bones',BONESOCKETSOURCE_Sockets:'BONESOCKETSOURCE_Sockets',BONESOCKETSOURCE_MAX:'BONESOCKETSOURCE_MAX', };
declare class LocationBoneSocketInfo { 
	BoneSocketName: string;
	Offset: Vector;
	clone() : LocationBoneSocketInfo;
	static C(Other: UObject | any): LocationBoneSocketInfo;
}

declare type ELocationBoneSocketSelectionMethod = 'BONESOCKETSEL_Sequential' | 'BONESOCKETSEL_Random' | 'BONESOCKETSEL_MAX';
declare var ELocationBoneSocketSelectionMethod : { BONESOCKETSEL_Sequential:'BONESOCKETSEL_Sequential',BONESOCKETSEL_Random:'BONESOCKETSEL_Random',BONESOCKETSEL_MAX:'BONESOCKETSEL_MAX', };
declare class ParticleModuleLocationBoneSocket extends ParticleModuleLocationBase { 
	SourceType: ELocationBoneSocketSource;
	UniversalOffset: Vector;
	SourceLocations: LocationBoneSocketInfo[];
	SelectionMethod: ELocationBoneSocketSelectionMethod;
	bUpdatePositionEachFrame: boolean;
	bOrientMeshEmitters: boolean;
	bInheritBoneVelocity: boolean;
	InheritVelocityScale: number;
	SkelMeshActorParamName: string;
	NumPreSelectedIndices: number;
	EditorSkelMesh: SkeletalMesh;
	static Load(ResourceName: string): ParticleModuleLocationBoneSocket;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationBoneSocket;
	static GetDefaultObject(): ParticleModuleLocationBoneSocket;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationBoneSocket;
	static C(Other: UObject | any): ParticleModuleLocationBoneSocket;
}

declare class ParticleModuleLocationDirect extends ParticleModuleLocationBase { 
	Location: RawDistributionVector;
	LocationOffset: RawDistributionVector;
	ScaleFactor: RawDistributionVector;
	Direction: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleLocationDirect;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationDirect;
	static GetDefaultObject(): ParticleModuleLocationDirect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationDirect;
	static C(Other: UObject | any): ParticleModuleLocationDirect;
}

declare type ELocationEmitterSelectionMethod = 'ELESM_Random' | 'ELESM_Sequential' | 'ELESM_MAX';
declare var ELocationEmitterSelectionMethod : { ELESM_Random:'ELESM_Random',ELESM_Sequential:'ELESM_Sequential',ELESM_MAX:'ELESM_MAX', };
declare class ParticleModuleLocationEmitter extends ParticleModuleLocationBase { 
	EmitterName: string;
	SelectionMethod: ELocationEmitterSelectionMethod;
	InheritSourceVelocity: boolean;
	InheritSourceVelocityScale: number;
	bInheritSourceRotation: boolean;
	InheritSourceRotationScale: number;
	static Load(ResourceName: string): ParticleModuleLocationEmitter;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitter;
	static GetDefaultObject(): ParticleModuleLocationEmitter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitter;
	static C(Other: UObject | any): ParticleModuleLocationEmitter;
}

declare class ParticleModuleLocationEmitterDirect extends ParticleModuleLocationBase { 
	EmitterName: string;
	static Load(ResourceName: string): ParticleModuleLocationEmitterDirect;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationEmitterDirect;
	static GetDefaultObject(): ParticleModuleLocationEmitterDirect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationEmitterDirect;
	static C(Other: UObject | any): ParticleModuleLocationEmitterDirect;
}

declare class ParticleModuleLocationPrimitiveBase extends ParticleModuleLocationBase { 
	Positive_X: boolean;
	Positive_Y: boolean;
	Positive_Z: boolean;
	Negative_X: boolean;
	Negative_Y: boolean;
	Negative_Z: boolean;
	SurfaceOnly: boolean;
	Velocity: boolean;
	VelocityScale: RawDistributionFloat;
	StartLocation: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveBase;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveBase;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveBase;
}

declare type CylinderHeightAxis = 'PMLPC_HEIGHTAXIS_X' | 'PMLPC_HEIGHTAXIS_Y' | 'PMLPC_HEIGHTAXIS_Z' | 'PMLPC_HEIGHTAXIS_MAX';
declare var CylinderHeightAxis : { PMLPC_HEIGHTAXIS_X:'PMLPC_HEIGHTAXIS_X',PMLPC_HEIGHTAXIS_Y:'PMLPC_HEIGHTAXIS_Y',PMLPC_HEIGHTAXIS_Z:'PMLPC_HEIGHTAXIS_Z',PMLPC_HEIGHTAXIS_MAX:'PMLPC_HEIGHTAXIS_MAX', };
declare class ParticleModuleLocationPrimitiveCylinder extends ParticleModuleLocationPrimitiveBase { 
	RadialVelocity: boolean;
	StartRadius: RawDistributionFloat;
	StartHeight: RawDistributionFloat;
	HeightAxis: CylinderHeightAxis;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveCylinder;
}

declare class ParticleModuleLocationPrimitiveCylinder_Seeded extends ParticleModuleLocationPrimitiveCylinder { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveCylinder_Seeded;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveCylinder_Seeded;
}

declare class ParticleModuleLocationPrimitiveSphere extends ParticleModuleLocationPrimitiveBase { 
	StartRadius: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveSphere;
}

declare class ParticleModuleLocationPrimitiveSphere_Seeded extends ParticleModuleLocationPrimitiveSphere { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveSphere_Seeded;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveSphere_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveSphere_Seeded;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveSphere_Seeded;
}

declare class ParticleModuleLocationPrimitiveTriangle extends ParticleModuleLocationBase { 
	StartOffset: RawDistributionVector;
	Height: RawDistributionFloat;
	Angle: RawDistributionFloat;
	Thickness: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationPrimitiveTriangle;
	static GetDefaultObject(): ParticleModuleLocationPrimitiveTriangle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationPrimitiveTriangle;
	static C(Other: UObject | any): ParticleModuleLocationPrimitiveTriangle;
}

declare type ELocationSkelVertSurfaceSource = 'VERTSURFACESOURCE_Vert' | 'VERTSURFACESOURCE_Surface' | 'VERTSURFACESOURCE_MAX';
declare var ELocationSkelVertSurfaceSource : { VERTSURFACESOURCE_Vert:'VERTSURFACESOURCE_Vert',VERTSURFACESOURCE_Surface:'VERTSURFACESOURCE_Surface',VERTSURFACESOURCE_MAX:'VERTSURFACESOURCE_MAX', };
declare class ParticleModuleLocationSkelVertSurface extends ParticleModuleLocationBase { 
	SourceType: ELocationSkelVertSurfaceSource;
	UniversalOffset: Vector;
	bUpdatePositionEachFrame: boolean;
	bOrientMeshEmitters: boolean;
	bInheritBoneVelocity: boolean;
	InheritVelocityScale: number;
	SkelMeshActorParamName: string;
	EditorSkelMesh: SkeletalMesh;
	ValidAssociatedBones: string[];
	bEnforceNormalCheck: boolean;
	NormalToCompare: Vector;
	NormalCheckToleranceDegrees: number;
	NormalCheckTolerance: number;
	ValidMaterialIndices: number[];
	bInheritVertexColor: boolean;
	bInheritUV: boolean;
	InheritUVChannel: any;
	static Load(ResourceName: string): ParticleModuleLocationSkelVertSurface;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationSkelVertSurface;
	static GetDefaultObject(): ParticleModuleLocationSkelVertSurface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationSkelVertSurface;
	static C(Other: UObject | any): ParticleModuleLocationSkelVertSurface;
}

declare class ParticleModuleLocationWorldOffset extends ParticleModuleLocation { 
	static Load(ResourceName: string): ParticleModuleLocationWorldOffset;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset;
	static GetDefaultObject(): ParticleModuleLocationWorldOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset;
	static C(Other: UObject | any): ParticleModuleLocationWorldOffset;
}

declare class ParticleModuleLocationWorldOffset_Seeded extends ParticleModuleLocationWorldOffset { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleLocationWorldOffset_Seeded;
	static GetDefaultObject(): ParticleModuleLocationWorldOffset_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleLocationWorldOffset_Seeded;
	static C(Other: UObject | any): ParticleModuleLocationWorldOffset_Seeded;
}

declare class ParticleModuleMaterialBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleMaterialBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMaterialBase;
	static GetDefaultObject(): ParticleModuleMaterialBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMaterialBase;
	static C(Other: UObject | any): ParticleModuleMaterialBase;
}

declare class ParticleModuleMeshMaterial extends ParticleModuleMaterialBase { 
	MeshMaterials: MaterialInterface[];
	static Load(ResourceName: string): ParticleModuleMeshMaterial;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshMaterial;
	static GetDefaultObject(): ParticleModuleMeshMaterial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshMaterial;
	static C(Other: UObject | any): ParticleModuleMeshMaterial;
}

declare class ParticleModuleRotationBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleRotationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationBase;
	static GetDefaultObject(): ParticleModuleRotationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationBase;
	static C(Other: UObject | any): ParticleModuleRotationBase;
}

declare class ParticleModuleMeshRotation extends ParticleModuleRotationBase { 
	StartRotation: RawDistributionVector;
	bInheritParent: boolean;
	static Load(ResourceName: string): ParticleModuleMeshRotation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation;
	static GetDefaultObject(): ParticleModuleMeshRotation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation;
	static C(Other: UObject | any): ParticleModuleMeshRotation;
}

declare class ParticleModuleMeshRotation_Seeded extends ParticleModuleMeshRotation { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleMeshRotation_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotation_Seeded;
	static GetDefaultObject(): ParticleModuleMeshRotation_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotation_Seeded;
	static C(Other: UObject | any): ParticleModuleMeshRotation_Seeded;
}

declare class ParticleModuleRotationRateBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleRotationRateBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateBase;
	static GetDefaultObject(): ParticleModuleRotationRateBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateBase;
	static C(Other: UObject | any): ParticleModuleRotationRateBase;
}

declare class ParticleModuleMeshRotationRate extends ParticleModuleRotationRateBase { 
	StartRotationRate: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleMeshRotationRate;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate;
	static GetDefaultObject(): ParticleModuleMeshRotationRate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate;
	static C(Other: UObject | any): ParticleModuleMeshRotationRate;
}

declare class ParticleModuleMeshRotationRate_Seeded extends ParticleModuleMeshRotationRate { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRate_Seeded;
	static GetDefaultObject(): ParticleModuleMeshRotationRate_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRate_Seeded;
	static C(Other: UObject | any): ParticleModuleMeshRotationRate_Seeded;
}

declare class ParticleModuleMeshRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
	LifeMultiplier: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateMultiplyLife;
	static GetDefaultObject(): ParticleModuleMeshRotationRateMultiplyLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateMultiplyLife;
	static C(Other: UObject | any): ParticleModuleMeshRotationRateMultiplyLife;
}

declare class ParticleModuleMeshRotationRateOverLife extends ParticleModuleRotationRateBase { 
	RotRate: RawDistributionVector;
	bScaleRotRate: boolean;
	static Load(ResourceName: string): ParticleModuleMeshRotationRateOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleMeshRotationRateOverLife;
	static GetDefaultObject(): ParticleModuleMeshRotationRateOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleMeshRotationRateOverLife;
	static C(Other: UObject | any): ParticleModuleMeshRotationRateOverLife;
}

declare class ParticleModuleOrientationBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleOrientationBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationBase;
	static GetDefaultObject(): ParticleModuleOrientationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationBase;
	static C(Other: UObject | any): ParticleModuleOrientationBase;
}

declare type EParticleAxisLock = 'EPAL_NONE' | 'EPAL_X' | 'EPAL_Y' | 'EPAL_Z' | 'EPAL_NEGATIVE_X' | 'EPAL_NEGATIVE_Y' | 'EPAL_NEGATIVE_Z' | 'EPAL_ROTATE_X' | 'EPAL_ROTATE_Y' | 'EPAL_ROTATE_Z' | 'EPAL_MAX';
declare var EParticleAxisLock : { EPAL_NONE:'EPAL_NONE',EPAL_X:'EPAL_X',EPAL_Y:'EPAL_Y',EPAL_Z:'EPAL_Z',EPAL_NEGATIVE_X:'EPAL_NEGATIVE_X',EPAL_NEGATIVE_Y:'EPAL_NEGATIVE_Y',EPAL_NEGATIVE_Z:'EPAL_NEGATIVE_Z',EPAL_ROTATE_X:'EPAL_ROTATE_X',EPAL_ROTATE_Y:'EPAL_ROTATE_Y',EPAL_ROTATE_Z:'EPAL_ROTATE_Z',EPAL_MAX:'EPAL_MAX', };
declare class ParticleModuleOrientationAxisLock extends ParticleModuleOrientationBase { 
	LockAxisFlags: EParticleAxisLock;
	static Load(ResourceName: string): ParticleModuleOrientationAxisLock;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleOrientationAxisLock;
	static GetDefaultObject(): ParticleModuleOrientationAxisLock;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleOrientationAxisLock;
	static C(Other: UObject | any): ParticleModuleOrientationAxisLock;
}

declare class ParticleModuleParameterBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleParameterBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterBase;
	static GetDefaultObject(): ParticleModuleParameterBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterBase;
	static C(Other: UObject | any): ParticleModuleParameterBase;
}

declare type EEmitterDynamicParameterValue = 'EDPV_UserSet' | 'EDPV_AutoSet' | 'EDPV_VelocityX' | 'EDPV_VelocityY' | 'EDPV_VelocityZ' | 'EDPV_VelocityMag' | 'EDPV_MAX';
declare var EEmitterDynamicParameterValue : { EDPV_UserSet:'EDPV_UserSet',EDPV_AutoSet:'EDPV_AutoSet',EDPV_VelocityX:'EDPV_VelocityX',EDPV_VelocityY:'EDPV_VelocityY',EDPV_VelocityZ:'EDPV_VelocityZ',EDPV_VelocityMag:'EDPV_VelocityMag',EDPV_MAX:'EDPV_MAX', };
declare class EmitterDynamicParameter { 
	ParamName: string;
	bUseEmitterTime: boolean;
	bSpawnTimeOnly: boolean;
	ValueMethod: EEmitterDynamicParameterValue;
	bScaleVelocityByParamValue: boolean;
	ParamValue: RawDistributionFloat;
	clone() : EmitterDynamicParameter;
	static C(Other: UObject | any): EmitterDynamicParameter;
}

declare class ParticleModuleParameterDynamic extends ParticleModuleParameterBase { 
	DynamicParams: EmitterDynamicParameter[];
	UpdateFlags: number;
	bUsesVelocity: boolean;
	static Load(ResourceName: string): ParticleModuleParameterDynamic;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic;
	static GetDefaultObject(): ParticleModuleParameterDynamic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic;
	static C(Other: UObject | any): ParticleModuleParameterDynamic;
}

declare class ParticleModuleParameterDynamic_Seeded extends ParticleModuleParameterDynamic { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleParameterDynamic_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleParameterDynamic_Seeded;
	static GetDefaultObject(): ParticleModuleParameterDynamic_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleParameterDynamic_Seeded;
	static C(Other: UObject | any): ParticleModuleParameterDynamic_Seeded;
}

declare class ParticleModulePivotOffset extends ParticleModuleLocationBase { 
	PivotOffset: Vector2D;
	static Load(ResourceName: string): ParticleModulePivotOffset;
	static Find(Outer: UObject, ResourceName: string): ParticleModulePivotOffset;
	static GetDefaultObject(): ParticleModulePivotOffset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModulePivotOffset;
	static C(Other: UObject | any): ParticleModulePivotOffset;
}

declare class ParticleModuleRotation extends ParticleModuleRotationBase { 
	StartRotation: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleRotation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation;
	static GetDefaultObject(): ParticleModuleRotation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation;
	static C(Other: UObject | any): ParticleModuleRotation;
}

declare class ParticleModuleRotation_Seeded extends ParticleModuleRotation { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleRotation_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotation_Seeded;
	static GetDefaultObject(): ParticleModuleRotation_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotation_Seeded;
	static C(Other: UObject | any): ParticleModuleRotation_Seeded;
}

declare class ParticleModuleRotationOverLifetime extends ParticleModuleRotationBase { 
	RotationOverLife: RawDistributionFloat;
	Scale: boolean;
	static Load(ResourceName: string): ParticleModuleRotationOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationOverLifetime;
	static GetDefaultObject(): ParticleModuleRotationOverLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationOverLifetime;
	static C(Other: UObject | any): ParticleModuleRotationOverLifetime;
}

declare class ParticleModuleRotationRate extends ParticleModuleRotationRateBase { 
	StartRotationRate: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleRotationRate;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate;
	static GetDefaultObject(): ParticleModuleRotationRate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate;
	static C(Other: UObject | any): ParticleModuleRotationRate;
}

declare class ParticleModuleRotationRate_Seeded extends ParticleModuleRotationRate { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleRotationRate_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRate_Seeded;
	static GetDefaultObject(): ParticleModuleRotationRate_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRate_Seeded;
	static C(Other: UObject | any): ParticleModuleRotationRate_Seeded;
}

declare class ParticleModuleRotationRateMultiplyLife extends ParticleModuleRotationRateBase { 
	LifeMultiplier: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleRotationRateMultiplyLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleRotationRateMultiplyLife;
	static GetDefaultObject(): ParticleModuleRotationRateMultiplyLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleRotationRateMultiplyLife;
	static C(Other: UObject | any): ParticleModuleRotationRateMultiplyLife;
}

declare class ParticleModuleSizeBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleSizeBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeBase;
	static GetDefaultObject(): ParticleModuleSizeBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeBase;
	static C(Other: UObject | any): ParticleModuleSizeBase;
}

declare class ParticleModuleSize extends ParticleModuleSizeBase { 
	StartSize: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleSize;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize;
	static GetDefaultObject(): ParticleModuleSize;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize;
	static C(Other: UObject | any): ParticleModuleSize;
}

declare class ParticleModuleSize_Seeded extends ParticleModuleSize { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleSize_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSize_Seeded;
	static GetDefaultObject(): ParticleModuleSize_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSize_Seeded;
	static C(Other: UObject | any): ParticleModuleSize_Seeded;
}

declare class ParticleModuleSizeMultiplyLife extends ParticleModuleSizeBase { 
	LifeMultiplier: RawDistributionVector;
	MultiplyX: boolean;
	MultiplyY: boolean;
	MultiplyZ: boolean;
	static Load(ResourceName: string): ParticleModuleSizeMultiplyLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeMultiplyLife;
	static GetDefaultObject(): ParticleModuleSizeMultiplyLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeMultiplyLife;
	static C(Other: UObject | any): ParticleModuleSizeMultiplyLife;
}

declare class ParticleModuleSizeScale extends ParticleModuleSizeBase { 
	SizeScale: RawDistributionVector;
	EnableX: boolean;
	EnableY: boolean;
	EnableZ: boolean;
	static Load(ResourceName: string): ParticleModuleSizeScale;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScale;
	static GetDefaultObject(): ParticleModuleSizeScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScale;
	static C(Other: UObject | any): ParticleModuleSizeScale;
}

declare class ParticleModuleSizeScaleBySpeed extends ParticleModuleSizeBase { 
	SpeedScale: Vector2D;
	MaxScale: Vector2D;
	static Load(ResourceName: string): ParticleModuleSizeScaleBySpeed;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSizeScaleBySpeed;
	static GetDefaultObject(): ParticleModuleSizeScaleBySpeed;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSizeScaleBySpeed;
	static C(Other: UObject | any): ParticleModuleSizeScaleBySpeed;
}

declare class ParticleModuleSourceMovement extends ParticleModuleLocationBase { 
	SourceMovementScale: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleSourceMovement;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSourceMovement;
	static GetDefaultObject(): ParticleModuleSourceMovement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSourceMovement;
	static C(Other: UObject | any): ParticleModuleSourceMovement;
}

declare class ParticleModuleSpawnPerUnit extends ParticleModuleSpawnBase { 
	UnitScalar: number;
	SpawnPerUnit: RawDistributionFloat;
	bIgnoreSpawnRateWhenMoving: boolean;
	MovementTolerance: number;
	MaxFrameDistance: number;
	bIgnoreMovementAlongX: boolean;
	bIgnoreMovementAlongY: boolean;
	bIgnoreMovementAlongZ: boolean;
	static Load(ResourceName: string): ParticleModuleSpawnPerUnit;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSpawnPerUnit;
	static GetDefaultObject(): ParticleModuleSpawnPerUnit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSpawnPerUnit;
	static C(Other: UObject | any): ParticleModuleSpawnPerUnit;
}

declare class ParticleModuleSubUVBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleSubUVBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUVBase;
	static GetDefaultObject(): ParticleModuleSubUVBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUVBase;
	static C(Other: UObject | any): ParticleModuleSubUVBase;
}

declare class SubUVAnimation extends UObject { 
	SubUVTexture: Texture2D;
	SubImages_Horizontal: number;
	SubImages_Vertical: number;
	BoundingMode: ESubUVBoundingVertexCount;
	OpacitySourceMode: EOpacitySourceMode;
	AlphaThreshold: number;
	static Load(ResourceName: string): SubUVAnimation;
	static Find(Outer: UObject, ResourceName: string): SubUVAnimation;
	static GetDefaultObject(): SubUVAnimation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubUVAnimation;
	static C(Other: UObject | any): SubUVAnimation;
}

declare class ParticleModuleSubUV extends ParticleModuleSubUVBase { 
	Animation: SubUVAnimation;
	SubImageIndex: RawDistributionFloat;
	bUseRealTime: boolean;
	static Load(ResourceName: string): ParticleModuleSubUV;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUV;
	static GetDefaultObject(): ParticleModuleSubUV;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUV;
	static C(Other: UObject | any): ParticleModuleSubUV;
}

declare class ParticleModuleSubUVMovie extends ParticleModuleSubUV { 
	bUseEmitterTime: boolean;
	FrameRate: RawDistributionFloat;
	StartingFrame: number;
	static Load(ResourceName: string): ParticleModuleSubUVMovie;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleSubUVMovie;
	static GetDefaultObject(): ParticleModuleSubUVMovie;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleSubUVMovie;
	static C(Other: UObject | any): ParticleModuleSubUVMovie;
}

declare class ParticleModuleTrailBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleTrailBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTrailBase;
	static GetDefaultObject(): ParticleModuleTrailBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTrailBase;
	static C(Other: UObject | any): ParticleModuleTrailBase;
}

declare type ETrail2SourceMethod = 'PET2SRCM_Default' | 'PET2SRCM_Particle' | 'PET2SRCM_Actor' | 'PET2SRCM_MAX';
declare var ETrail2SourceMethod : { PET2SRCM_Default:'PET2SRCM_Default',PET2SRCM_Particle:'PET2SRCM_Particle',PET2SRCM_Actor:'PET2SRCM_Actor',PET2SRCM_MAX:'PET2SRCM_MAX', };
declare type EParticleSourceSelectionMethod = 'EPSSM_Random' | 'EPSSM_Sequential' | 'EPSSM_MAX';
declare var EParticleSourceSelectionMethod : { EPSSM_Random:'EPSSM_Random',EPSSM_Sequential:'EPSSM_Sequential',EPSSM_MAX:'EPSSM_MAX', };
declare class ParticleModuleTrailSource extends ParticleModuleTrailBase { 
	SourceMethod: ETrail2SourceMethod;
	SourceName: string;
	SourceStrength: RawDistributionFloat;
	bLockSourceStength: boolean;
	SourceOffsetCount: number;
	SourceOffsetDefaults: Vector[];
	SelectionMethod: EParticleSourceSelectionMethod;
	bInheritRotation: boolean;
	static Load(ResourceName: string): ParticleModuleTrailSource;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTrailSource;
	static GetDefaultObject(): ParticleModuleTrailSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTrailSource;
	static C(Other: UObject | any): ParticleModuleTrailSource;
}

declare class ParticleModuleTypeDataAnimTrail extends ParticleModuleTypeDataBase { 
	bDeadTrailsOnDeactivate: boolean;
	bEnablePreviousTangentRecalculation: boolean;
	bTangentRecalculationEveryFrame: boolean;
	TilingDistance: number;
	DistanceTessellationStepSize: number;
	TangentTessellationStepSize: number;
	WidthTessellationStepSize: number;
	static Load(ResourceName: string): ParticleModuleTypeDataAnimTrail;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataAnimTrail;
	static GetDefaultObject(): ParticleModuleTypeDataAnimTrail;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataAnimTrail;
	static C(Other: UObject | any): ParticleModuleTypeDataAnimTrail;
}

declare type EBeam2Method = 'PEB2M_Distance' | 'PEB2M_Target' | 'PEB2M_Branch' | 'PEB2M_MAX';
declare var EBeam2Method : { PEB2M_Distance:'PEB2M_Distance',PEB2M_Target:'PEB2M_Target',PEB2M_Branch:'PEB2M_Branch',PEB2M_MAX:'PEB2M_MAX', };
declare type EBeamTaperMethod = 'PEBTM_None' | 'PEBTM_Full' | 'PEBTM_Partial' | 'PEBTM_MAX';
declare var EBeamTaperMethod : { PEBTM_None:'PEBTM_None',PEBTM_Full:'PEBTM_Full',PEBTM_Partial:'PEBTM_Partial',PEBTM_MAX:'PEBTM_MAX', };
declare class ParticleModuleTypeDataBeam2 extends ParticleModuleTypeDataBase { 
	BeamMethod: EBeam2Method;
	TextureTile: number;
	TextureTileDistance: number;
	Sheets: number;
	MaxBeamCount: number;
	Speed: number;
	InterpolationPoints: number;
	bAlwaysOn: boolean;
	UpVectorStepSize: number;
	BranchParentName: string;
	Distance: RawDistributionFloat;
	TaperMethod: EBeamTaperMethod;
	TaperFactor: RawDistributionFloat;
	TaperScale: RawDistributionFloat;
	RenderGeometry: boolean;
	RenderDirectLine: boolean;
	RenderLines: boolean;
	RenderTessellation: boolean;
	static Load(ResourceName: string): ParticleModuleTypeDataBeam2;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataBeam2;
	static GetDefaultObject(): ParticleModuleTypeDataBeam2;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataBeam2;
	static C(Other: UObject | any): ParticleModuleTypeDataBeam2;
}

declare class VectorField extends UObject { 
	Bounds: Box;
	Intensity: number;
	static Load(ResourceName: string): VectorField;
	static Find(Outer: UObject, ResourceName: string): VectorField;
	static GetDefaultObject(): VectorField;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorField;
	static C(Other: UObject | any): VectorField;
}

declare class GPUSpriteLocalVectorFieldInfo { 
	Field: VectorField;
	Transform: Transform;
	MinInitialRotation: Rotator;
	MaxInitialRotation: Rotator;
	RotationRate: Rotator;
	Intensity: number;
	Tightness: number;
	bIgnoreComponentTransform: boolean;
	bTileX: boolean;
	bTileY: boolean;
	bTileZ: boolean;
	bUseFixDT: boolean;
	clone() : GPUSpriteLocalVectorFieldInfo;
	static C(Other: UObject | any): GPUSpriteLocalVectorFieldInfo;
}

declare class FloatDistribution { 
	Table: DistributionLookupTable;
	clone() : FloatDistribution;
	static C(Other: UObject | any): FloatDistribution;
}

declare class GPUSpriteEmitterInfo { 
	RequiredModule: ParticleModuleRequired;
	SpawnModule: ParticleModuleSpawn;
	SpawnPerUnitModule: ParticleModuleSpawnPerUnit;
	SpawnModules: ParticleModule[];
	LocalVectorField: GPUSpriteLocalVectorFieldInfo;
	VectorFieldScale: FloatDistribution;
	DragCoefficient: FloatDistribution;
	PointAttractorStrength: FloatDistribution;
	Resilience: FloatDistribution;
	ConstantAcceleration: Vector;
	PointAttractorPosition: Vector;
	PointAttractorRadiusSq: number;
	OrbitOffsetBase: Vector;
	OrbitOffsetRange: Vector;
	InvMaxSize: Vector2D;
	InvRotationRateScale: number;
	MaxLifetime: number;
	MaxParticleCount: number;
	ScreenAlignment: EParticleScreenAlignment;
	LockAxisFlag: EParticleAxisLock;
	bEnableCollision: boolean;
	CollisionMode: EParticleCollisionMode;
	bRemoveHMDRoll: boolean;
	MinFacingCameraBlendDistance: number;
	MaxFacingCameraBlendDistance: number;
	DynamicColor: RawDistributionVector;
	DynamicAlpha: RawDistributionFloat;
	DynamicColorScale: RawDistributionVector;
	DynamicAlphaScale: RawDistributionFloat;
	clone() : GPUSpriteEmitterInfo;
	static C(Other: UObject | any): GPUSpriteEmitterInfo;
}

declare class GPUSpriteResourceData { 
	QuantizedColorSamples: Color[];
	QuantizedMiscSamples: Color[];
	QuantizedSimulationAttrSamples: Color[];
	ColorScale: Vector4;
	ColorBias: Vector4;
	MiscScale: Vector4;
	MiscBias: Vector4;
	SimulationAttrCurveScale: Vector4;
	SimulationAttrCurveBias: Vector4;
	SubImageSize: Vector4;
	SizeBySpeed: Vector4;
	ConstantAcceleration: Vector;
	OrbitOffsetBase: Vector;
	OrbitOffsetRange: Vector;
	OrbitFrequencyBase: Vector;
	OrbitFrequencyRange: Vector;
	OrbitPhaseBase: Vector;
	OrbitPhaseRange: Vector;
	GlobalVectorFieldScale: number;
	GlobalVectorFieldTightness: number;
	PerParticleVectorFieldScale: number;
	PerParticleVectorFieldBias: number;
	DragCoefficientScale: number;
	DragCoefficientBias: number;
	ResilienceScale: number;
	ResilienceBias: number;
	CollisionRadiusScale: number;
	CollisionRadiusBias: number;
	CollisionTimeBias: number;
	CollisionRandomSpread: number;
	CollisionRandomDistribution: number;
	OneMinusFriction: number;
	RotationRateScale: number;
	CameraMotionBlurAmount: number;
	ScreenAlignment: EParticleScreenAlignment;
	LockAxisFlag: EParticleAxisLock;
	PivotOffset: Vector2D;
	bRemoveHMDRoll: boolean;
	MinFacingCameraBlendDistance: number;
	MaxFacingCameraBlendDistance: number;
	clone() : GPUSpriteResourceData;
	static C(Other: UObject | any): GPUSpriteResourceData;
}

declare class ParticleModuleTypeDataGpu extends ParticleModuleTypeDataBase { 
	EmitterInfo: GPUSpriteEmitterInfo;
	ResourceData: GPUSpriteResourceData;
	CameraMotionBlurAmount: number;
	bClearExistingParticlesOnInit: boolean;
	static Load(ResourceName: string): ParticleModuleTypeDataGpu;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataGpu;
	static GetDefaultObject(): ParticleModuleTypeDataGpu;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataGpu;
	static C(Other: UObject | any): ParticleModuleTypeDataGpu;
}

declare type EMeshScreenAlignment = 'PSMA_MeshFaceCameraWithRoll' | 'PSMA_MeshFaceCameraWithSpin' | 'PSMA_MeshFaceCameraWithLockedAxis' | 'PSMA_MAX';
declare var EMeshScreenAlignment : { PSMA_MeshFaceCameraWithRoll:'PSMA_MeshFaceCameraWithRoll',PSMA_MeshFaceCameraWithSpin:'PSMA_MeshFaceCameraWithSpin',PSMA_MeshFaceCameraWithLockedAxis:'PSMA_MeshFaceCameraWithLockedAxis',PSMA_MAX:'PSMA_MAX', };
declare type EMeshCameraFacingUpAxis = 'CameraFacing_NoneUP' | 'CameraFacing_ZUp' | 'CameraFacing_NegativeZUp' | 'CameraFacing_YUp' | 'CameraFacing_NegativeYUp' | 'CameraFacing_MAX';
declare var EMeshCameraFacingUpAxis : { CameraFacing_NoneUP:'CameraFacing_NoneUP',CameraFacing_ZUp:'CameraFacing_ZUp',CameraFacing_NegativeZUp:'CameraFacing_NegativeZUp',CameraFacing_YUp:'CameraFacing_YUp',CameraFacing_NegativeYUp:'CameraFacing_NegativeYUp',CameraFacing_MAX:'CameraFacing_MAX', };
declare type EMeshCameraFacingOptions = 'XAxisFacing_NoUp' | 'XAxisFacing_ZUp' | 'XAxisFacing_NegativeZUp' | 'XAxisFacing_YUp' | 'XAxisFacing_NegativeYUp' | 'LockedAxis_ZAxisFacing' | 'LockedAxis_NegativeZAxisFacing' | 'LockedAxis_YAxisFacing' | 'LockedAxis_NegativeYAxisFacing' | 'VelocityAligned_ZAxisFacing' | 'VelocityAligned_NegativeZAxisFacing' | 'VelocityAligned_YAxisFacing' | 'VelocityAligned_NegativeYAxisFacing' | 'EMeshCameraFacingOptions_MAX';
declare var EMeshCameraFacingOptions : { XAxisFacing_NoUp:'XAxisFacing_NoUp',XAxisFacing_ZUp:'XAxisFacing_ZUp',XAxisFacing_NegativeZUp:'XAxisFacing_NegativeZUp',XAxisFacing_YUp:'XAxisFacing_YUp',XAxisFacing_NegativeYUp:'XAxisFacing_NegativeYUp',LockedAxis_ZAxisFacing:'LockedAxis_ZAxisFacing',LockedAxis_NegativeZAxisFacing:'LockedAxis_NegativeZAxisFacing',LockedAxis_YAxisFacing:'LockedAxis_YAxisFacing',LockedAxis_NegativeYAxisFacing:'LockedAxis_NegativeYAxisFacing',VelocityAligned_ZAxisFacing:'VelocityAligned_ZAxisFacing',VelocityAligned_NegativeZAxisFacing:'VelocityAligned_NegativeZAxisFacing',VelocityAligned_YAxisFacing:'VelocityAligned_YAxisFacing',VelocityAligned_NegativeYAxisFacing:'VelocityAligned_NegativeYAxisFacing',EMeshCameraFacingOptions_MAX:'EMeshCameraFacingOptions_MAX', };
declare class ParticleModuleTypeDataMesh extends ParticleModuleTypeDataBase { 
	Mesh: StaticMesh;
	bUseStaticMeshLODs: boolean;
	LODSizeScale: number;
	CastShadows: boolean;
	DoCollisions: boolean;
	MeshAlignment: EMeshScreenAlignment;
	bOverrideMaterial: boolean;
	bOverrideDefaultMotionBlurSettings: boolean;
	bEnableMotionBlur: boolean;
	Pitch: number;
	Roll: number;
	Yaw: number;
	RollPitchYawRange: RawDistributionVector;
	AxisLockOption: EParticleAxisLock;
	bCameraFacing: boolean;
	CameraFacingUpAxisOption: EMeshCameraFacingUpAxis;
	CameraFacingOption: EMeshCameraFacingOptions;
	bApplyParticleRotationAsSpin: boolean;
	bFaceCameraDirectionRatherThanPosition: boolean;
	bCollisionsConsiderPartilceSize: boolean;
	static Load(ResourceName: string): ParticleModuleTypeDataMesh;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataMesh;
	static GetDefaultObject(): ParticleModuleTypeDataMesh;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataMesh;
	static C(Other: UObject | any): ParticleModuleTypeDataMesh;
}

declare type ETrailsRenderAxisOption = 'Trails_CameraUp' | 'Trails_SourceUp' | 'Trails_WorldUp' | 'Trails_MAX';
declare var ETrailsRenderAxisOption : { Trails_CameraUp:'Trails_CameraUp',Trails_SourceUp:'Trails_SourceUp',Trails_WorldUp:'Trails_WorldUp',Trails_MAX:'Trails_MAX', };
declare class ParticleModuleTypeDataRibbon extends ParticleModuleTypeDataBase { 
	MaxTessellationBetweenParticles: number;
	SheetsPerTrail: number;
	MaxTrailCount: number;
	MaxParticleInTrailCount: number;
	bDeadTrailsOnDeactivate: boolean;
	bDeadTrailsOnSourceLoss: boolean;
	bClipSourceSegement: boolean;
	bEnablePreviousTangentRecalculation: boolean;
	bTangentRecalculationEveryFrame: boolean;
	bSpawnInitialParticle: boolean;
	RenderAxis: ETrailsRenderAxisOption;
	TangentSpawningScalar: number;
	bRenderGeometry: boolean;
	bRenderSpawnPoints: boolean;
	bRenderTangents: boolean;
	bRenderTessellation: boolean;
	TilingDistance: number;
	DistanceTessellationStepSize: number;
	bEnableTangentDiffInterpScale: boolean;
	TangentTessellationScalar: number;
	static Load(ResourceName: string): ParticleModuleTypeDataRibbon;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleTypeDataRibbon;
	static GetDefaultObject(): ParticleModuleTypeDataRibbon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleTypeDataRibbon;
	static C(Other: UObject | any): ParticleModuleTypeDataRibbon;
}

declare class ParticleModuleVectorFieldBase extends ParticleModule { 
	static Load(ResourceName: string): ParticleModuleVectorFieldBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldBase;
	static GetDefaultObject(): ParticleModuleVectorFieldBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldBase;
	static C(Other: UObject | any): ParticleModuleVectorFieldBase;
}

declare class ParticleModuleVectorFieldGlobal extends ParticleModuleVectorFieldBase { 
	bOverrideGlobalVectorFieldTightness: boolean;
	GlobalVectorFieldScale: number;
	GlobalVectorFieldTightness: number;
	static Load(ResourceName: string): ParticleModuleVectorFieldGlobal;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldGlobal;
	static GetDefaultObject(): ParticleModuleVectorFieldGlobal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldGlobal;
	static C(Other: UObject | any): ParticleModuleVectorFieldGlobal;
}

declare class ParticleModuleVectorFieldLocal extends ParticleModuleVectorFieldBase { 
	VectorField: VectorField;
	RelativeTranslation: Vector;
	RelativeRotation: Rotator;
	RelativeScale3D: Vector;
	Intensity: number;
	Tightness: number;
	bIgnoreComponentTransform: boolean;
	bTileX: boolean;
	bTileY: boolean;
	bTileZ: boolean;
	bUseFixDT: boolean;
	static Load(ResourceName: string): ParticleModuleVectorFieldLocal;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldLocal;
	static GetDefaultObject(): ParticleModuleVectorFieldLocal;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldLocal;
	static C(Other: UObject | any): ParticleModuleVectorFieldLocal;
}

declare class ParticleModuleVectorFieldRotation extends ParticleModuleVectorFieldBase { 
	MinInitialRotation: Vector;
	MaxInitialRotation: Vector;
	static Load(ResourceName: string): ParticleModuleVectorFieldRotation;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldRotation;
	static GetDefaultObject(): ParticleModuleVectorFieldRotation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldRotation;
	static C(Other: UObject | any): ParticleModuleVectorFieldRotation;
}

declare class ParticleModuleVectorFieldRotationRate extends ParticleModuleVectorFieldBase { 
	RotationRate: Vector;
	static Load(ResourceName: string): ParticleModuleVectorFieldRotationRate;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldRotationRate;
	static GetDefaultObject(): ParticleModuleVectorFieldRotationRate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldRotationRate;
	static C(Other: UObject | any): ParticleModuleVectorFieldRotationRate;
}

declare class ParticleModuleVectorFieldScale extends ParticleModuleVectorFieldBase { 
	VectorFieldScale: DistributionFloat;
	VectorFieldScaleRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleVectorFieldScale;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldScale;
	static GetDefaultObject(): ParticleModuleVectorFieldScale;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldScale;
	static C(Other: UObject | any): ParticleModuleVectorFieldScale;
}

declare class ParticleModuleVectorFieldScaleOverLife extends ParticleModuleVectorFieldBase { 
	VectorFieldScaleOverLife: DistributionFloat;
	VectorFieldScaleOverLifeRaw: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleVectorFieldScaleOverLife;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVectorFieldScaleOverLife;
	static GetDefaultObject(): ParticleModuleVectorFieldScaleOverLife;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVectorFieldScaleOverLife;
	static C(Other: UObject | any): ParticleModuleVectorFieldScaleOverLife;
}

declare class ParticleModuleVelocityBase extends ParticleModule { 
	bInWorldSpace: boolean;
	bApplyOwnerScale: boolean;
	static Load(ResourceName: string): ParticleModuleVelocityBase;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityBase;
	static GetDefaultObject(): ParticleModuleVelocityBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityBase;
	static C(Other: UObject | any): ParticleModuleVelocityBase;
}

declare class ParticleModuleVelocity extends ParticleModuleVelocityBase { 
	StartVelocity: RawDistributionVector;
	StartVelocityRadial: RawDistributionFloat;
	static Load(ResourceName: string): ParticleModuleVelocity;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocity;
	static GetDefaultObject(): ParticleModuleVelocity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocity;
	static C(Other: UObject | any): ParticleModuleVelocity;
}

declare class ParticleModuleVelocity_Seeded extends ParticleModuleVelocity { 
	RandomSeedInfo: ParticleRandomSeedInfo;
	static Load(ResourceName: string): ParticleModuleVelocity_Seeded;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocity_Seeded;
	static GetDefaultObject(): ParticleModuleVelocity_Seeded;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocity_Seeded;
	static C(Other: UObject | any): ParticleModuleVelocity_Seeded;
}

declare class ParticleModuleVelocityCone extends ParticleModuleVelocityBase { 
	Angle: RawDistributionFloat;
	Velocity: RawDistributionFloat;
	Direction: Vector;
	static Load(ResourceName: string): ParticleModuleVelocityCone;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityCone;
	static GetDefaultObject(): ParticleModuleVelocityCone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityCone;
	static C(Other: UObject | any): ParticleModuleVelocityCone;
}

declare class ParticleModuleVelocityInheritParent extends ParticleModuleVelocityBase { 
	Scale: RawDistributionVector;
	static Load(ResourceName: string): ParticleModuleVelocityInheritParent;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityInheritParent;
	static GetDefaultObject(): ParticleModuleVelocityInheritParent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityInheritParent;
	static C(Other: UObject | any): ParticleModuleVelocityInheritParent;
}

declare class ParticleModuleVelocityOverLifetime extends ParticleModuleVelocityBase { 
	VelOverLife: RawDistributionVector;
	Absolute: boolean;
	static Load(ResourceName: string): ParticleModuleVelocityOverLifetime;
	static Find(Outer: UObject, ResourceName: string): ParticleModuleVelocityOverLifetime;
	static GetDefaultObject(): ParticleModuleVelocityOverLifetime;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleModuleVelocityOverLifetime;
	static C(Other: UObject | any): ParticleModuleVelocityOverLifetime;
}

declare class ParticleSpriteEmitter extends ParticleEmitter { 
	static Load(ResourceName: string): ParticleSpriteEmitter;
	static Find(Outer: UObject, ResourceName: string): ParticleSpriteEmitter;
	static GetDefaultObject(): ParticleSpriteEmitter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ParticleSpriteEmitter;
	static C(Other: UObject | any): ParticleSpriteEmitter;
}

declare class PathFollowingAgentInterface extends Interface { 
	static Load(ResourceName: string): PathFollowingAgentInterface;
	static Find(Outer: UObject, ResourceName: string): PathFollowingAgentInterface;
	static GetDefaultObject(): PathFollowingAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PathFollowingAgentInterface;
	static C(Other: UObject | any): PathFollowingAgentInterface;
}

declare class PawnNoiseEmitterComponent extends ActorComponent { 
	bAIPerceptionSystemCompatibilityMode: boolean;
	LastRemoteNoisePosition: Vector;
	NoiseLifetime: number;
	LastRemoteNoiseVolume: number;
	LastRemoteNoiseTime: number;
	LastLocalNoiseVolume: number;
	LastLocalNoiseTime: number;
	static Load(ResourceName: string): PawnNoiseEmitterComponent;
	static Find(Outer: UObject, ResourceName: string): PawnNoiseEmitterComponent;
	static GetDefaultObject(): PawnNoiseEmitterComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PawnNoiseEmitterComponent;
	MakeNoise(NoiseMaker: Actor,Loudness: number,NoiseLocation: Vector): void;
	static C(Other: UObject | any): PawnNoiseEmitterComponent;
}

declare class PhysicalAnimationComponent extends ActorComponent { 
	StrengthMultiplyer: number;
	SkeletalMeshComponent: SkeletalMeshComponent;
	static Load(ResourceName: string): PhysicalAnimationComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicalAnimationComponent;
	static GetDefaultObject(): PhysicalAnimationComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicalAnimationComponent;
	SetStrengthMultiplyer(InStrengthMultiplyer: number): void;
	SetSkeletalMeshComponent(InSkeletalMeshComponent: SkeletalMeshComponent): void;
	GetBodyTargetTransform(BodyName: string): Transform;
	ApplyPhysicalAnimationSettingsBelow(BodyName: string,PhysicalAnimationData: PhysicalAnimationData,bIncludeSelf: boolean): void;
	ApplyPhysicalAnimationSettings(BodyName: string,PhysicalAnimationData: PhysicalAnimationData): void;
	ApplyPhysicalAnimationProfileBelow(BodyName: string,ProfileName: string,bIncludeSelf: boolean,bClearNotFound: boolean): void;
	static C(Other: UObject | any): PhysicalAnimationComponent;
}

declare class RigidBodyBase extends Actor { 
	static GetDefaultObject(): RigidBodyBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RigidBodyBase;
	static C(Other: UObject | any): RigidBodyBase;
}

declare class ConstrainComponentPropName { 
	ComponentName: string;
	clone() : ConstrainComponentPropName;
	static C(Other: UObject | any): ConstrainComponentPropName;
}

declare type EConstraintFrame = 'Frame1' | 'Frame2' | 'EConstraintFrame_MAX';
declare var EConstraintFrame : { Frame1:'Frame1',Frame2:'Frame2',EConstraintFrame_MAX:'EConstraintFrame_MAX', };
declare class PhysicsConstraintComponent extends SceneComponent { 
	ConstraintActor1: Actor;
	ComponentName1: ConstrainComponentPropName;
	ConstraintActor2: Actor;
	ComponentName2: ConstrainComponentPropName;
	ConstraintSetup: PhysicsConstraintTemplate;
	OnConstraintBroken: UnrealEngineMulticastDelegate<(ConstraintIndex: number) => void>;
	ConstraintInstance: ConstraintInstance;
	static Load(ResourceName: string): PhysicsConstraintComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsConstraintComponent;
	static GetDefaultObject(): PhysicsConstraintComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsConstraintComponent;
	SetOrientationDriveTwistAndSwing(bEnableTwistDrive: boolean,bEnableSwingDrive: boolean): void;
	SetOrientationDriveSLERP(bEnableSLERP: boolean): void;
	SetLinearZLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearYLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearXLimit(ConstraintType: ELinearConstraintMotion,LimitSize: number): void;
	SetLinearVelocityTarget(InVelTarget: Vector): void;
	SetLinearVelocityDrive(bEnableDriveX: boolean,bEnableDriveY: boolean,bEnableDriveZ: boolean): void;
	SetLinearPositionTarget(InPosTarget: Vector): void;
	SetLinearPositionDrive(bEnableDriveX: boolean,bEnableDriveY: boolean,bEnableDriveZ: boolean): void;
	SetLinearDriveParams(PositionStrength: number,VelocityStrength: number,InForceLimit: number): void;
	SetLinearBreakable(bLinearBreakable: boolean,LinearBreakThreshold: number): void;
	SetDisableCollision(bDisableCollision: boolean): void;
	SetConstraintReferencePosition(Frame: EConstraintFrame,RefPosition: Vector): void;
	SetConstraintReferenceOrientation(Frame: EConstraintFrame,PriAxis: Vector,SecAxis: Vector): void;
	SetConstraintReferenceFrame(Frame: EConstraintFrame,RefFrame: Transform): void;
	SetConstrainedComponents(Component1: PrimitiveComponent,BoneName1: string,Component2: PrimitiveComponent,BoneName2: string): void;
	SetAngularVelocityTarget(InVelTarget: Vector): void;
	SetAngularVelocityDriveTwistAndSwing(bEnableTwistDrive: boolean,bEnableSwingDrive: boolean): void;
	SetAngularVelocityDriveSLERP(bEnableSLERP: boolean): void;
	SetAngularVelocityDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean): void;
	SetAngularTwistLimit(ConstraintType: EAngularConstraintMotion,TwistLimitAngle: number): void;
	SetAngularSwing2Limit(MotionType: EAngularConstraintMotion,Swing2LimitAngle: number): void;
	SetAngularSwing1Limit(MotionType: EAngularConstraintMotion,Swing1LimitAngle: number): void;
	SetAngularOrientationTarget(InPosTarget: Rotator): void;
	SetAngularOrientationDrive(bEnableSwingDrive: boolean,bEnableTwistDrive: boolean): void;
	SetAngularDriveParams(PositionStrength: number,VelocityStrength: number,InForceLimit: number): void;
	SetAngularDriveMode(DriveMode: EAngularDriveMode): void;
	SetAngularBreakable(bAngularBreakable: boolean,AngularBreakThreshold: number): void;
	IsBroken(): boolean;
	GetCurrentTwist(): number;
	GetCurrentSwing2(): number;
	GetCurrentSwing1(): number;
	GetConstraintForce(OutLinearForce?: Vector,OutAngularForce?: Vector): {OutLinearForce: Vector, OutAngularForce: Vector};
	BreakConstraint(): void;
	static C(Other: UObject | any): PhysicsConstraintComponent;
}

declare class PhysicsConstraintActor extends RigidBodyBase { 
	ConstraintComp: PhysicsConstraintComponent;
	ConstraintActor1: Actor;
	ConstraintActor2: Actor;
	bDisableCollision: boolean;
	static GetDefaultObject(): PhysicsConstraintActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsConstraintActor;
	static C(Other: UObject | any): PhysicsConstraintActor;
}

declare class PhysicsHandleComponent extends ActorComponent { 
	GrabbedComponent: PrimitiveComponent;
	bSoftAngularConstraint: boolean;
	bSoftLinearConstraint: boolean;
	bInterpolateTarget: boolean;
	LinearDamping: number;
	LinearStiffness: number;
	AngularDamping: number;
	AngularStiffness: number;
	InterpolationSpeed: number;
	static Load(ResourceName: string): PhysicsHandleComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsHandleComponent;
	static GetDefaultObject(): PhysicsHandleComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsHandleComponent;
	SetTargetRotation(NewRotation: Rotator): void;
	SetTargetLocationAndRotation(NewLocation: Vector,NewRotation: Rotator): void;
	SetTargetLocation(NewLocation: Vector): void;
	SetLinearStiffness(NewLinearStiffness: number): void;
	SetLinearDamping(NewLinearDamping: number): void;
	SetInterpolationSpeed(NewInterpolationSpeed: number): void;
	SetAngularStiffness(NewAngularStiffness: number): void;
	SetAngularDamping(NewAngularDamping: number): void;
	ReleaseComponent(): void;
	GrabComponentAtLocationWithRotation(Component: PrimitiveComponent,InBoneName: string,Location: Vector,Rotation: Rotator): void;
	GrabComponentAtLocation(Component: PrimitiveComponent,InBoneName: string,GrabLocation: Vector): void;
	GrabComponent(Component: PrimitiveComponent,InBoneName: string,GrabLocation: Vector,bConstrainRotation: boolean): void;
	GetTargetLocationAndRotation(TargetLocation?: Vector,TargetRotation?: Rotator): {TargetLocation: Vector, TargetRotation: Rotator};
	GetGrabbedComponent(): PrimitiveComponent;
	static C(Other: UObject | any): PhysicsHandleComponent;
}

declare class RigidBodyErrorCorrection { 
	PingExtrapolation: number;
	PingLimit: number;
	ErrorPerLinearDifference: number;
	ErrorPerAngularDifference: number;
	MaxRestoredStateError: number;
	MaxLinearHardSnapDistance: number;
	PositionLerp: number;
	AngleLerp: number;
	LinearVelocityCoefficient: number;
	AngularVelocityCoefficient: number;
	ErrorAccumulationSeconds: number;
	ErrorAccumulationDistanceSq: number;
	ErrorAccumulationSimilarity: number;
	clone() : RigidBodyErrorCorrection;
	static C(Other: UObject | any): RigidBodyErrorCorrection;
}

declare type ESettingsLockedAxis = 'None' | 'X' | 'Y' | 'Z' | 'Invalid' | 'ESettingsLockedAxis_MAX';
declare var ESettingsLockedAxis : { None:'None',X:'X',Y:'Y',Z:'Z',Invalid:'Invalid',ESettingsLockedAxis_MAX:'ESettingsLockedAxis_MAX', };
declare type ESettingsDOF = 'Full3D' | 'YZPlane' | 'XZPlane' | 'XYPlane' | 'ESettingsDOF_MAX';
declare var ESettingsDOF : { Full3D:'Full3D',YZPlane:'YZPlane',XZPlane:'XZPlane',XYPlane:'XYPlane',ESettingsDOF_MAX:'ESettingsDOF_MAX', };
declare class PhysicalSurfaceName { 
	Type: EPhysicalSurface;
	Name: string;
	clone() : PhysicalSurfaceName;
	static C(Other: UObject | any): PhysicalSurfaceName;
}

declare class PhysicsSettings extends DeveloperSettings { 
	DefaultGravityZ: number;
	DefaultTerminalVelocity: number;
	DefaultFluidFriction: number;
	SimulateScratchMemorySize: number;
	RagdollAggregateThreshold: number;
	TriangleMeshTriangleMinAreaThreshold: number;
	bEnableAsyncScene: boolean;
	bEnableShapeSharing: boolean;
	bEnablePCM: boolean;
	bEnableStabilization: boolean;
	bWarnMissingLocks: boolean;
	bEnable2DPhysics: boolean;
	PhysicErrorCorrection: RigidBodyErrorCorrection;
	LockedAxis: ESettingsLockedAxis;
	DefaultDegreesOfFreedom: ESettingsDOF;
	BounceThresholdVelocity: number;
	FrictionCombineMode: EFrictionCombineMode;
	RestitutionCombineMode: EFrictionCombineMode;
	MaxAngularVelocity: number;
	MaxDepenetrationVelocity: number;
	ContactOffsetMultiplier: number;
	MinContactOffset: number;
	MaxContactOffset: number;
	bSimulateSkeletalMeshOnDedicatedServer: boolean;
	DefaultShapeComplexity: ECollisionTraceFlag;
	bDefaultHasComplexCollision: boolean;
	bSuppressFaceRemapTable: boolean;
	bSupportUVFromHitResults: boolean;
	bDisableActiveActors: boolean;
	bDisableKinematicStaticPairs: boolean;
	bDisableKinematicKinematicPairs: boolean;
	bDisableCCD: boolean;
	bEnableEnhancedDeterminism: boolean;
	MaxPhysicsDeltaTime: number;
	bSubstepping: boolean;
	bSubsteppingAsync: boolean;
	MaxSubstepDeltaTime: number;
	MaxSubsteps: number;
	SyncSceneSmoothingFactor: number;
	AsyncSceneSmoothingFactor: number;
	InitialAverageFrameRate: number;
	PhysXTreeRebuildRate: number;
	PhysicalSurfaces: PhysicalSurfaceName[];
	DefaultBroadphaseSettings: BroadphaseSettings;
	static Load(ResourceName: string): PhysicsSettings;
	static Find(Outer: UObject, ResourceName: string): PhysicsSettings;
	static GetDefaultObject(): PhysicsSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsSettings;
	static C(Other: UObject | any): PhysicsSettings;
}

declare class PhysicsSpringComponent extends SceneComponent { 
	SpringStiffness: number;
	SpringDamping: number;
	SpringLengthAtRest: number;
	SpringRadius: number;
	SpringChannel: ECollisionChannel;
	bIgnoreSelf: boolean;
	SpringCompression: number;
	static Load(ResourceName: string): PhysicsSpringComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsSpringComponent;
	static GetDefaultObject(): PhysicsSpringComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsSpringComponent;
	GetSpringRestingPoint(): Vector;
	GetSpringDirection(): Vector;
	GetSpringCurrentEndPoint(): Vector;
	GetNormalizedCompressionScalar(): number;
	static C(Other: UObject | any): PhysicsSpringComponent;
}

declare class PhysicsThrusterComponent extends SceneComponent { 
	ThrustStrength: number;
	static Load(ResourceName: string): PhysicsThrusterComponent;
	static Find(Outer: UObject, ResourceName: string): PhysicsThrusterComponent;
	static GetDefaultObject(): PhysicsThrusterComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsThrusterComponent;
	static C(Other: UObject | any): PhysicsThrusterComponent;
}

declare class PhysicsThruster extends RigidBodyBase { 
	ThrusterComponent: PhysicsThrusterComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): PhysicsThruster;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhysicsThruster;
	static C(Other: UObject | any): PhysicsThruster;
}

declare class SceneCapture extends Actor { 
	MeshComp: StaticMeshComponent;
	static GetDefaultObject(): SceneCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture;
	static C(Other: UObject | any): SceneCapture;
}

declare type ESceneCapturePrimitiveRenderMode = 'PRM_LegacySceneCapture' | 'PRM_RenderScenePrimitives' | 'PRM_UseShowOnlyList' | 'PRM_MAX';
declare var ESceneCapturePrimitiveRenderMode : { PRM_LegacySceneCapture:'PRM_LegacySceneCapture',PRM_RenderScenePrimitives:'PRM_RenderScenePrimitives',PRM_UseShowOnlyList:'PRM_UseShowOnlyList',PRM_MAX:'PRM_MAX', };
declare class EngineShowFlagsSetting { 
	ShowFlagName: string;
	Enabled: boolean;
	clone() : EngineShowFlagsSetting;
	static C(Other: UObject | any): EngineShowFlagsSetting;
}

declare class SceneCaptureComponent extends SceneComponent { 
	PrimitiveRenderMode: ESceneCapturePrimitiveRenderMode;
	HiddenComponents: any[];
	HiddenActors: Actor[];
	ShowOnlyComponents: any[];
	ShowOnlyActors: Actor[];
	bCaptureEveryFrame: boolean;
	bCaptureOnMovement: boolean;
	bAlwaysPersistRenderingState: boolean;
	LODDistanceFactor: number;
	MaxViewDistanceOverride: number;
	CaptureSortPriority: number;
	ShowFlagSettings: EngineShowFlagsSetting[];
	ProfilingEventName: string;
	static Load(ResourceName: string): SceneCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent;
	static GetDefaultObject(): SceneCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponent;
	ShowOnlyComponent(InComponent: PrimitiveComponent): void;
	ShowOnlyActorComponents(InActor: Actor): void;
	SetCaptureSortPriority(NewCaptureSortPriority: number): void;
	RemoveShowOnlyComponent(InComponent: PrimitiveComponent): void;
	RemoveShowOnlyActorComponents(InActor: Actor): void;
	HideComponent(InComponent: PrimitiveComponent): void;
	HideActorComponents(InActor: Actor): void;
	ClearShowOnlyComponents(InComponent: PrimitiveComponent): void;
	ClearHiddenComponents(): void;
	static C(Other: UObject | any): SceneCaptureComponent;
}

declare class PlanarReflectionComponent extends SceneCaptureComponent { 
	PreviewBox: BoxComponent;
	NormalDistortionStrength: number;
	PrefilterRoughness: number;
	PrefilterRoughnessDistance: number;
	ScreenPercentage: number;
	ExtraFOV: number;
	DistanceFromPlaneFadeStart: number;
	DistanceFromPlaneFadeEnd: number;
	DistanceFromPlaneFadeoutStart: number;
	DistanceFromPlaneFadeoutEnd: number;
	AngleFromPlaneFadeStart: number;
	AngleFromPlaneFadeEnd: number;
	bRenderSceneTwoSided: boolean;
	static Load(ResourceName: string): PlanarReflectionComponent;
	static Find(Outer: UObject, ResourceName: string): PlanarReflectionComponent;
	static GetDefaultObject(): PlanarReflectionComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanarReflectionComponent;
	static C(Other: UObject | any): PlanarReflectionComponent;
}

declare class PlanarReflection extends SceneCapture { 
	PlanarReflectionComponent: PlanarReflectionComponent;
	SpriteComponent: BillboardComponent;
	bShowPreviewPlane: boolean;
	static GetDefaultObject(): PlanarReflection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanarReflection;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject | any): PlanarReflection;
}

declare class PlaneReflectionCapture extends ReflectionCapture { 
	static GetDefaultObject(): PlaneReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneReflectionCapture;
	static C(Other: UObject | any): PlaneReflectionCapture;
}

declare class PlaneReflectionCaptureComponent extends ReflectionCaptureComponent { 
	InfluenceRadiusScale: number;
	PreviewInfluenceRadius: DrawSphereComponent;
	PreviewCaptureBox: BoxComponent;
	static Load(ResourceName: string): PlaneReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): PlaneReflectionCaptureComponent;
	static GetDefaultObject(): PlaneReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlaneReflectionCaptureComponent;
	static C(Other: UObject | any): PlaneReflectionCaptureComponent;
}

declare class PlatformEventsComponent extends ActorComponent { 
	PlatformChangedToLaptopModeDelegate: UnrealEngineMulticastDelegate<() => void>;
	PlatformChangedToTabletModeDelegate: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): PlatformEventsComponent;
	static Find(Outer: UObject, ResourceName: string): PlatformEventsComponent;
	static GetDefaultObject(): PlatformEventsComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformEventsComponent;
	SupportsConvertibleLaptops(): boolean;
	IsInTabletMode(): boolean;
	IsInLaptopMode(): boolean;
	static C(Other: UObject | any): PlatformEventsComponent;
}

declare class PlatformInterfaceWebResponse extends UObject { 
	OriginalURL: string;
	ResponseCode: number;
	Tag: number;
	StringResponse: string;
	BinaryResponse: number[];
	static Load(ResourceName: string): PlatformInterfaceWebResponse;
	static Find(Outer: UObject, ResourceName: string): PlatformInterfaceWebResponse;
	static GetDefaultObject(): PlatformInterfaceWebResponse;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformInterfaceWebResponse;
	GetNumHeaders(): number;
	GetHeaderValue(HeaderName: string): string;
	GetHeader(HeaderIndex: number,Header?: string,Value?: string): {Header: string, Value: string};
	static C(Other: UObject | any): PlatformInterfaceWebResponse;
}

declare class PlayerStart extends NavigationObjectBase { 
	PlayerStartTag: string;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): PlayerStart;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerStart;
	static C(Other: UObject | any): PlayerStart;
}

declare class PlayerStartPIE extends PlayerStart { 
	static GetDefaultObject(): PlayerStartPIE;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayerStartPIE;
	static C(Other: UObject | any): PlayerStartPIE;
}

declare class PluginCommandlet extends Commandlet { 
	static Load(ResourceName: string): PluginCommandlet;
	static Find(Outer: UObject, ResourceName: string): PluginCommandlet;
	static GetDefaultObject(): PluginCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PluginCommandlet;
	static C(Other: UObject | any): PluginCommandlet;
}

declare class PointLight extends Light { 
	PointLightComponent: PointLightComponent;
	static GetDefaultObject(): PointLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PointLight;
	SetRadius(NewRadius: number): void;
	SetLightFalloffExponent(NewLightFalloffExponent: number): void;
	static C(Other: UObject | any): PointLight;
}

declare class Polys extends UObject { 
	static Load(ResourceName: string): Polys;
	static Find(Outer: UObject, ResourceName: string): Polys;
	static GetDefaultObject(): Polys;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Polys;
	static C(Other: UObject | any): Polys;
}

declare type EBoneSpaces = 'WorldSpace' | 'ComponentSpace' | 'EBoneSpaces_MAX';
declare var EBoneSpaces : { WorldSpace:'WorldSpace',ComponentSpace:'ComponentSpace',EBoneSpaces_MAX:'EBoneSpaces_MAX', };
declare class PoseableMeshComponent extends SkinnedMeshComponent { 
	static Load(ResourceName: string): PoseableMeshComponent;
	static Find(Outer: UObject, ResourceName: string): PoseableMeshComponent;
	static GetDefaultObject(): PoseableMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PoseableMeshComponent;
	SetBoneTransformByName(BoneName: string,InTransform: Transform,BoneSpace: EBoneSpaces): void;
	SetBoneScaleByName(BoneName: string,InScale3D: Vector,BoneSpace: EBoneSpaces): void;
	SetBoneRotationByName(BoneName: string,InRotation: Rotator,BoneSpace: EBoneSpaces): void;
	SetBoneLocationByName(BoneName: string,InLocation: Vector,BoneSpace: EBoneSpaces): void;
	ResetBoneTransformByName(BoneName: string): void;
	GetBoneTransformByName(BoneName: string,BoneSpace: EBoneSpaces): Transform;
	GetBoneScaleByName(BoneName: string,BoneSpace: EBoneSpaces): Vector;
	GetBoneRotationByName(BoneName: string,BoneSpace: EBoneSpaces): Rotator;
	GetBoneLocationByName(BoneName: string,BoneSpace: EBoneSpaces): Vector;
	CopyPoseFromSkeletalComponent(InComponentToCopy: SkeletalMeshComponent): void;
	static C(Other: UObject | any): PoseableMeshComponent;
}

declare class PostProcessVolume extends Volume { 
	Settings: PostProcessSettings;
	Priority: number;
	BlendRadius: number;
	BlendWeight: number;
	bEnabled: boolean;
	bUnbound: boolean;
	static GetDefaultObject(): PostProcessVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PostProcessVolume;
	static C(Other: UObject | any): PostProcessVolume;
}

declare class PrecomputedVisibilityOverrideVolume extends Volume { 
	OverrideVisibleActors: Actor[];
	OverrideInvisibleActors: Actor[];
	OverrideInvisibleLevels: string[];
	static GetDefaultObject(): PrecomputedVisibilityOverrideVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrecomputedVisibilityOverrideVolume;
	static C(Other: UObject | any): PrecomputedVisibilityOverrideVolume;
}

declare class PrecomputedVisibilityVolume extends Volume { 
	static GetDefaultObject(): PrecomputedVisibilityVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrecomputedVisibilityVolume;
	static C(Other: UObject | any): PrecomputedVisibilityVolume;
}

declare class PreviewCollectionInterface extends Interface { 
	static Load(ResourceName: string): PreviewCollectionInterface;
	static Find(Outer: UObject, ResourceName: string): PreviewCollectionInterface;
	static GetDefaultObject(): PreviewCollectionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewCollectionInterface;
	static C(Other: UObject | any): PreviewCollectionInterface;
}

declare class PreviewMeshCollectionEntry { 
	SkeletalMesh: SkeletalMesh;
	clone() : PreviewMeshCollectionEntry;
	static C(Other: UObject | any): PreviewMeshCollectionEntry;
}

declare class PreviewMeshCollection extends DataAsset { 
	Skeleton: Skeleton;
	SkeletalMeshes: PreviewMeshCollectionEntry[];
	static Load(ResourceName: string): PreviewMeshCollection;
	static Find(Outer: UObject, ResourceName: string): PreviewMeshCollection;
	static GetDefaultObject(): PreviewMeshCollection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PreviewMeshCollection;
	static C(Other: UObject | any): PreviewMeshCollection;
}

declare class CollectionReference { 
	CollectionName: string;
	clone() : CollectionReference;
	static C(Other: UObject | any): CollectionReference;
}

declare class PrimaryAssetLabel extends PrimaryDataAsset { 
	Rules: PrimaryAssetRules;
	bLabelAssetsInMyDirectory: boolean;
	bIsRuntimeLabel: boolean;
	ExplicitAssets: UObject[];
	ExplicitBlueprints: Class[];
	AssetCollection: CollectionReference;
	static Load(ResourceName: string): PrimaryAssetLabel;
	static Find(Outer: UObject, ResourceName: string): PrimaryAssetLabel;
	static GetDefaultObject(): PrimaryAssetLabel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PrimaryAssetLabel;
	static C(Other: UObject | any): PrimaryAssetLabel;
}

declare class ProjectileMovementComponent extends MovementComponent { 
	InitialSpeed: number;
	MaxSpeed: number;
	bRotationFollowsVelocity: boolean;
	bShouldBounce: boolean;
	bInitialVelocityInLocalSpace: boolean;
	bForceSubStepping: boolean;
	bSimulationEnabled: boolean;
	bSweepCollision: boolean;
	bIsHomingProjectile: boolean;
	bBounceAngleAffectsFriction: boolean;
	bIsSliding: boolean;
	bInterpMovement: boolean;
	bInterpRotation: boolean;
	PreviousHitTime: number;
	PreviousHitNormal: Vector;
	ProjectileGravityScale: number;
	Buoyancy: number;
	Bounciness: number;
	Friction: number;
	BounceVelocityStopSimulatingThreshold: number;
	MinFrictionFraction: number;
	OnProjectileBounce: UnrealEngineMulticastDelegate<(ImpactResult: HitResult, ImpactVelocity: Vector) => void>;
	OnProjectileStop: UnrealEngineMulticastDelegate<(ImpactResult: HitResult) => void>;
	HomingAccelerationMagnitude: number;
	HomingTargetComponent: any;
	MaxSimulationTimeStep: number;
	MaxSimulationIterations: number;
	BounceAdditionalIterations: number;
	InterpLocationTime: number;
	InterpRotationTime: number;
	InterpLocationMaxLagDistance: number;
	InterpLocationSnapToTargetDistance: number;
	static Load(ResourceName: string): ProjectileMovementComponent;
	static Find(Outer: UObject, ResourceName: string): ProjectileMovementComponent;
	static GetDefaultObject(): ProjectileMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProjectileMovementComponent;
	StopSimulating(HitResult: HitResult): void;
	SetVelocityInLocalSpace(NewVelocity: Vector): void;
	SetInterpolatedComponent(Component: SceneComponent): void;
	ResetInterpolation(): void;
	MoveInterpolationTarget(NewLocation: Vector,NewRotation: Rotator): void;
	LimitVelocity(NewVelocity: Vector): Vector;
	IsVelocityUnderSimulationThreshold(): boolean;
	IsInterpolationComplete(): boolean;
	static C(Other: UObject | any): ProjectileMovementComponent;
}

declare class ProxyLODMeshSimplificationSettings extends DeveloperSettings { 
	ProxyLODMeshReductionModuleName: string;
	static Load(ResourceName: string): ProxyLODMeshSimplificationSettings;
	static Find(Outer: UObject, ResourceName: string): ProxyLODMeshSimplificationSettings;
	static GetDefaultObject(): ProxyLODMeshSimplificationSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ProxyLODMeshSimplificationSettings;
	static C(Other: UObject | any): ProxyLODMeshSimplificationSettings;
}

declare class RadialForceComponent extends SceneComponent { 
	Radius: number;
	Falloff: ERadialImpulseFalloff;
	ImpulseStrength: number;
	bImpulseVelChange: boolean;
	bIgnoreOwningActor: boolean;
	ForceStrength: number;
	DestructibleDamage: number;
	ObjectTypesToAffect: EObjectTypeQuery[];
	static Load(ResourceName: string): RadialForceComponent;
	static Find(Outer: UObject, ResourceName: string): RadialForceComponent;
	static GetDefaultObject(): RadialForceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialForceComponent;
	RemoveObjectTypeToAffect(ObjectType: EObjectTypeQuery): void;
	FireImpulse(): void;
	AddObjectTypeToAffect(ObjectType: EObjectTypeQuery): void;
	static C(Other: UObject | any): RadialForceComponent;
}

declare class RadialForceActor extends RigidBodyBase { 
	ForceComponent: RadialForceComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): RadialForceActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RadialForceActor;
	ToggleForce(): void;
	FireImpulse(): void;
	EnableForce(): void;
	DisableForce(): void;
	static C(Other: UObject | any): RadialForceActor;
}

declare class RectLightComponent extends LocalLightComponent { 
	SourceWidth: number;
	SourceHeight: number;
	SourceTexture: Texture;
	static Load(ResourceName: string): RectLightComponent;
	static Find(Outer: UObject, ResourceName: string): RectLightComponent;
	static GetDefaultObject(): RectLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RectLightComponent;
	SetSourceWidth(bNewValue: number): void;
	SetSourceHeight(NewValue: number): void;
	static C(Other: UObject | any): RectLightComponent;
}

declare class RectLight extends Light { 
	RectLightComponent: RectLightComponent;
	static GetDefaultObject(): RectLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RectLight;
	static C(Other: UObject | any): RectLight;
}

declare type EMobileMSAASampleCount = 'One' | 'Two' | 'Four' | 'Eight' | 'EMobileMSAASampleCount_MAX';
declare var EMobileMSAASampleCount : { One:'One',Two:'Two',Four:'Four',Eight:'Eight',EMobileMSAASampleCount_MAX:'EMobileMSAASampleCount_MAX', };
declare type ETranslucentSortPolicy = 'SortByDistance' | 'SortByProjectedZ' | 'SortAlongAxis' | 'ETranslucentSortPolicy_MAX';
declare var ETranslucentSortPolicy : { SortByDistance:'SortByDistance',SortByProjectedZ:'SortByProjectedZ',SortAlongAxis:'SortAlongAxis',ETranslucentSortPolicy_MAX:'ETranslucentSortPolicy_MAX', };
declare type ECustomDepthStencil = 'Disabled' | 'Enabled' | 'EnabledOnDemand' | 'EnabledWithStencil' | 'ECustomDepthStencil_MAX';
declare var ECustomDepthStencil : { Disabled:'Disabled',Enabled:'Enabled',EnabledOnDemand:'EnabledOnDemand',EnabledWithStencil:'EnabledWithStencil',ECustomDepthStencil_MAX:'ECustomDepthStencil_MAX', };
declare type EAlphaChannelMode = 'Disabled' | 'LinearColorSpaceOnly' | 'AllowThroughTonemapper' | 'EAlphaChannelMode_MAX';
declare var EAlphaChannelMode : { Disabled:'Disabled',LinearColorSpaceOnly:'LinearColorSpaceOnly',AllowThroughTonemapper:'AllowThroughTonemapper',EAlphaChannelMode_MAX:'EAlphaChannelMode_MAX', };
declare type EAutoExposureMethodUI = 'AEM_Histogram' | 'AEM_Basic' | 'AEM_Manual' | 'AEM_MAX';
declare var EAutoExposureMethodUI : { AEM_Histogram:'AEM_Histogram',AEM_Basic:'AEM_Basic',AEM_Manual:'AEM_Manual',AEM_MAX:'AEM_MAX', };
declare type EAntiAliasingMethod = 'AAM_None' | 'AAM_FXAA' | 'AAM_TemporalAA' | 'AAM_MSAA' | 'AAM_MAX';
declare var EAntiAliasingMethod : { AAM_None:'AAM_None',AAM_FXAA:'AAM_FXAA',AAM_TemporalAA:'AAM_TemporalAA',AAM_MSAA:'AAM_MSAA',AAM_MAX:'AAM_MAX', };
declare type EDefaultBackBufferPixelFormat = 'DBBPF_B8G8R8A8' | 'DBBPF_A16B16G16R16_DEPRECATED' | 'DBBPF_FloatRGB_DEPRECATED' | 'DBBPF_FloatRGBA' | 'DBBPF_A2B10G10R10' | 'DBBPF_MAX';
declare var EDefaultBackBufferPixelFormat : { DBBPF_B8G8R8A8:'DBBPF_B8G8R8A8',DBBPF_A16B16G16R16_DEPRECATED:'DBBPF_A16B16G16R16_DEPRECATED',DBBPF_FloatRGB_DEPRECATED:'DBBPF_FloatRGB_DEPRECATED',DBBPF_FloatRGBA:'DBBPF_FloatRGBA',DBBPF_A2B10G10R10:'DBBPF_A2B10G10R10',DBBPF_MAX:'DBBPF_MAX', };
declare type EEarlyZPass = 'None' | 'OpaqueOnly' | 'OpaqueAndMasked' | 'Auto' | 'EEarlyZPass_MAX';
declare var EEarlyZPass : { None:'None',OpaqueOnly:'OpaqueOnly',OpaqueAndMasked:'OpaqueAndMasked',Auto:'Auto',EEarlyZPass_MAX:'EEarlyZPass_MAX', };
declare type EClearSceneOptions = 'NoClear' | 'HardwareClear' | 'QuadAtMaxZ' | 'EClearSceneOptions_MAX';
declare var EClearSceneOptions : { NoClear:'NoClear',HardwareClear:'HardwareClear',QuadAtMaxZ:'QuadAtMaxZ',EClearSceneOptions_MAX:'EClearSceneOptions_MAX', };
declare type EGBufferFormat = 'Force8BitsPerChannel' | 'Default' | 'HighPrecisionNormals' | 'Force16BitsPerChannel' | 'EGBufferFormat_MAX';
declare var EGBufferFormat : { Force8BitsPerChannel:'Force8BitsPerChannel',Default:'Default',HighPrecisionNormals:'HighPrecisionNormals',Force16BitsPerChannel:'Force16BitsPerChannel',EGBufferFormat_MAX:'EGBufferFormat_MAX', };
declare class RendererSettings extends DeveloperSettings { 
	bMobileHDR: boolean;
	bMobileDisableVertexFog: boolean;
	MaxMobileCascades: number;
	MobileMSAASampleCount: EMobileMSAASampleCount;
	bMobileUseLegacyShadingModel: boolean;
	bMobileAllowDitheredLODTransition: boolean;
	bMobileAllowSoftwareOcclusionCulling: boolean;
	bDiscardUnusedQualityLevels: boolean;
	bOcclusionCulling: boolean;
	MinScreenRadiusForLights: number;
	MinScreenRadiusForEarlyZPass: number;
	MinScreenRadiusForCSMdepth: number;
	bPrecomputedVisibilityWarning: boolean;
	bTextureStreaming: boolean;
	bUseDXT5NormalMaps: boolean;
	bClearCoatEnableSecondNormal: boolean;
	ReflectionCaptureResolution: number;
	ReflectionEnvironmentLightmapMixBasedOnRoughness: boolean;
	bForwardShading: boolean;
	bVertexFoggingForOpaque: boolean;
	bAllowStaticLighting: boolean;
	bUseNormalMapsForStaticLighting: boolean;
	bGenerateMeshDistanceFields: boolean;
	bEightBitMeshDistanceFields: boolean;
	bGenerateLandscapeGIData: boolean;
	bCompressMeshDistanceFields: boolean;
	TessellationAdaptivePixelsPerTriangle: number;
	bSeparateTranslucency: boolean;
	TranslucentSortPolicy: ETranslucentSortPolicy;
	TranslucentSortAxis: Vector;
	CustomDepthStencil: ECustomDepthStencil;
	bCustomDepthTaaJitter: boolean;
	bEnableAlphaChannelInPostProcessing: EAlphaChannelMode;
	bUseNewAlgorithm: boolean;
	bDefaultFeatureBloom: boolean;
	bDefaultFeatureAmbientOcclusion: boolean;
	bDefaultFeatureAmbientOcclusionStaticFraction: boolean;
	bDefaultFeatureAutoExposure: boolean;
	DefaultFeatureAutoExposure: EAutoExposureMethodUI;
	bExtendDefaultLuminanceRangeInAutoExposureSettings: boolean;
	bUsePreExposure: boolean;
	bDefaultFeatureMotionBlur: boolean;
	bDefaultFeatureLensFlare: boolean;
	bTemporalUpsampling: boolean;
	DefaultFeatureAntiAliasing: EAntiAliasingMethod;
	DefaultLightUnits: ELightUnits;
	DefaultBackBufferPixelFormat: EDefaultBackBufferPixelFormat;
	bRenderUnbuiltPreviewShadowsInGame: boolean;
	bStencilForLODDither: boolean;
	EarlyZPass: EEarlyZPass;
	bEarlyZPassMovable: boolean;
	bEarlyZPassOnlyMaterialMasking: boolean;
	bDBuffer: boolean;
	ClearSceneMethod: EClearSceneOptions;
	bBasePassOutputsVelocity: boolean;
	bSelectiveBasePassOutputs: boolean;
	bDefaultParticleCutouts: boolean;
	GPUSimulationTextureSizeX: number;
	GPUSimulationTextureSizeY: number;
	bGlobalClipPlane: boolean;
	GBufferFormat: EGBufferFormat;
	bUseGPUMorphTargets: boolean;
	bNvidiaAftermathEnabled: boolean;
	bInstancedStereo: boolean;
	bMultiView: boolean;
	bMobileMultiView: boolean;
	bMobileMultiViewDirect: boolean;
	bMonoscopicFarField: boolean;
	bRoundRobinOcclusion: boolean;
	bODSCapture: boolean;
	WireframeCullThreshold: number;
	bSupportStationarySkylight: boolean;
	bSupportLowQualityLightmaps: boolean;
	bSupportPointLightWholeSceneShadows: boolean;
	bSupportAtmosphericFog: boolean;
	bSupportSkinCacheShaders: boolean;
	bMobileEnableStaticAndCSMShadowReceivers: boolean;
	bMobileEnableMovableLightCSMShaderCulling: boolean;
	bMobileAllowDistanceFieldShadows: boolean;
	bMobileAllowMovableDirectionalLights: boolean;
	MobileNumDynamicPointLights: any;
	bMobileDynamicPointLightsUseStaticBranch: boolean;
	SkinCacheSceneMemoryLimitInMB: number;
	bGPUSkinLimit2BoneInfluences: boolean;
	bSupportDepthOnlyIndexBuffers: boolean;
	bSupportReversedIndexBuffers: boolean;
	bSupportMaterialLayers: boolean;
	static Load(ResourceName: string): RendererSettings;
	static Find(Outer: UObject, ResourceName: string): RendererSettings;
	static GetDefaultObject(): RendererSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RendererSettings;
	static C(Other: UObject | any): RendererSettings;
}

declare class RendererOverrideSettings extends DeveloperSettings { 
	bSupportAllShaderPermutations: boolean;
	bForceRecomputeTangents: boolean;
	static Load(ResourceName: string): RendererOverrideSettings;
	static Find(Outer: UObject, ResourceName: string): RendererOverrideSettings;
	static GetDefaultObject(): RendererOverrideSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RendererOverrideSettings;
	static C(Other: UObject | any): RendererOverrideSettings;
}

declare class ReplicationConnectionDriver extends UObject { 
	static Load(ResourceName: string): ReplicationConnectionDriver;
	static Find(Outer: UObject, ResourceName: string): ReplicationConnectionDriver;
	static GetDefaultObject(): ReplicationConnectionDriver;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReplicationConnectionDriver;
	static C(Other: UObject | any): ReplicationConnectionDriver;
}

declare class RotatingMovementComponent extends MovementComponent { 
	RotationRate: Rotator;
	PivotTranslation: Vector;
	bRotationInLocalSpace: boolean;
	static Load(ResourceName: string): RotatingMovementComponent;
	static Find(Outer: UObject, ResourceName: string): RotatingMovementComponent;
	static GetDefaultObject(): RotatingMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RotatingMovementComponent;
	static C(Other: UObject | any): RotatingMovementComponent;
}

declare class RVOAvoidanceInterface extends Interface { 
	static Load(ResourceName: string): RVOAvoidanceInterface;
	static Find(Outer: UObject, ResourceName: string): RVOAvoidanceInterface;
	static GetDefaultObject(): RVOAvoidanceInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RVOAvoidanceInterface;
	static C(Other: UObject | any): RVOAvoidanceInterface;
}

declare class Scene extends UObject { 
	static Load(ResourceName: string): Scene;
	static Find(Outer: UObject, ResourceName: string): Scene;
	static GetDefaultObject(): Scene;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Scene;
	static C(Other: UObject | any): Scene;
}

declare type ESceneCaptureSource = 'SCS_SceneColorHDR' | 'SCS_SceneColorHDRNoAlpha' | 'SCS_FinalColorLDR' | 'SCS_SceneColorSceneDepth' | 'SCS_SceneDepth' | 'SCS_DeviceDepth' | 'SCS_Normal' | 'SCS_BaseColor' | 'SCS_MAX';
declare var ESceneCaptureSource : { SCS_SceneColorHDR:'SCS_SceneColorHDR',SCS_SceneColorHDRNoAlpha:'SCS_SceneColorHDRNoAlpha',SCS_FinalColorLDR:'SCS_FinalColorLDR',SCS_SceneColorSceneDepth:'SCS_SceneColorSceneDepth',SCS_SceneDepth:'SCS_SceneDepth',SCS_DeviceDepth:'SCS_DeviceDepth',SCS_Normal:'SCS_Normal',SCS_BaseColor:'SCS_BaseColor',SCS_MAX:'SCS_MAX', };
declare type ESceneCaptureCompositeMode = 'SCCM_Overwrite' | 'SCCM_Additive' | 'SCCM_Composite' | 'SCCM_MAX';
declare var ESceneCaptureCompositeMode : { SCCM_Overwrite:'SCCM_Overwrite',SCCM_Additive:'SCCM_Additive',SCCM_Composite:'SCCM_Composite',SCCM_MAX:'SCCM_MAX', };
declare class SceneCaptureComponent2D extends SceneCaptureComponent { 
	ProjectionType: ECameraProjectionMode;
	FOVAngle: number;
	OrthoWidth: number;
	TextureTarget: TextureRenderTarget2D;
	CaptureSource: ESceneCaptureSource;
	CompositeMode: ESceneCaptureCompositeMode;
	PostProcessSettings: PostProcessSettings;
	PostProcessBlendWeight: number;
	bUseCustomProjectionMatrix: boolean;
	CustomProjectionMatrix: Matrix;
	bEnableClipPlane: boolean;
	ClipPlaneBase: Vector;
	ClipPlaneNormal: Vector;
	bCameraCutThisFrame: boolean;
	static Load(ResourceName: string): SceneCaptureComponent2D;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponent2D;
	static GetDefaultObject(): SceneCaptureComponent2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponent2D;
	CaptureScene(): void;
	static C(Other: UObject | any): SceneCaptureComponent2D;
	SceneCaptureComponent2D_GetFov(FOV?: number): {FOV: number};
	SceneCaptureComponent2D_SetFov(FOV: number): void;
	SceneCaptureComponent2DToBytes(ImageFormat: ELowEntryImageFormat,ByteArray?: number[],CompressionQuality?: number): {ByteArray: number[]};
	SceneCaptureComponent2DToPixels(Width?: number,Height?: number,Pixels?: Color[]): {Width: number, Height: number, Pixels: Color[]};
	static SceneCaptureComponent2D_GetFov(SceneCaptureComponent2D: SceneCaptureComponent2D,FOV?: number): {FOV: number};
	static SceneCaptureComponent2D_SetFov(SceneCaptureComponent2D: SceneCaptureComponent2D,FOV: number): void;
	static SceneCaptureComponent2DToBytes(SceneCaptureComponent2D: SceneCaptureComponent2D,ImageFormat: ELowEntryImageFormat,ByteArray?: number[],CompressionQuality?: number): {ByteArray: number[]};
	static SceneCaptureComponent2DToPixels(SceneCaptureComponent2D: SceneCaptureComponent2D,Width?: number,Height?: number,Pixels?: Color[]): {Width: number, Height: number, Pixels: Color[]};
}

declare class SceneCapture2D extends SceneCapture { 
	CaptureComponent2D: SceneCaptureComponent2D;
	DrawFrustum: DrawFrustumComponent;
	static GetDefaultObject(): SceneCapture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCapture2D;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject | any): SceneCapture2D;
	SceneCapture2D_GetFov(FOV?: number): {FOV: number};
	SceneCapture2D_SetFov(FOV: number): void;
	SceneCapture2DToBytes(ImageFormat: ELowEntryImageFormat,ByteArray?: number[],CompressionQuality?: number): {ByteArray: number[]};
	SceneCapture2DToPixels(Width?: number,Height?: number,Pixels?: Color[]): {Width: number, Height: number, Pixels: Color[]};
	static SceneCapture2D_GetFov(SceneCapture2D: SceneCapture2D,FOV?: number): {FOV: number};
	static SceneCapture2D_SetFov(SceneCapture2D: SceneCapture2D,FOV: number): void;
	static SceneCapture2DToBytes(SceneCapture2D: SceneCapture2D,ImageFormat: ELowEntryImageFormat,ByteArray?: number[],CompressionQuality?: number): {ByteArray: number[]};
	static SceneCapture2DToPixels(SceneCapture2D: SceneCapture2D,Width?: number,Height?: number,Pixels?: Color[]): {Width: number, Height: number, Pixels: Color[]};
}

declare class TextureRenderTargetCube extends TextureRenderTarget { 
	SizeX: number;
	ClearColor: LinearColor;
	OverrideFormat: EPixelFormat;
	bHDR: boolean;
	bForceLinearGamma: boolean;
	static Load(ResourceName: string): TextureRenderTargetCube;
	static Find(Outer: UObject, ResourceName: string): TextureRenderTargetCube;
	static GetDefaultObject(): TextureRenderTargetCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextureRenderTargetCube;
	static C(Other: UObject | any): TextureRenderTargetCube;
}

declare class SceneCaptureComponentCube extends SceneCaptureComponent { 
	TextureTarget: TextureRenderTargetCube;
	TextureTargetLeft: TextureRenderTargetCube;
	TextureTargetRight: TextureRenderTargetCube;
	TextureTargetODS: TextureRenderTarget2D;
	IPD: number;
	static Load(ResourceName: string): SceneCaptureComponentCube;
	static Find(Outer: UObject, ResourceName: string): SceneCaptureComponentCube;
	static GetDefaultObject(): SceneCaptureComponentCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureComponentCube;
	CaptureScene(): void;
	static C(Other: UObject | any): SceneCaptureComponentCube;
}

declare class SceneCaptureCube extends SceneCapture { 
	CaptureComponentCube: SceneCaptureComponentCube;
	DrawFrustum: DrawFrustumComponent;
	static GetDefaultObject(): SceneCaptureCube;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SceneCaptureCube;
	OnInterpToggle(bEnable: boolean): void;
	static C(Other: UObject | any): SceneCaptureCube;
}

declare type EShadowMapFlags = 'SMF_None' | 'SMF_Streamed' | 'SMF_MAX';
declare var EShadowMapFlags : { SMF_None:'SMF_None',SMF_Streamed:'SMF_Streamed',SMF_MAX:'SMF_MAX', };
declare class ShadowMapTexture2D extends Texture2D { 
	ShadowmapFlags: EShadowMapFlags;
	static Load(ResourceName: string): ShadowMapTexture2D;
	static Find(Outer: UObject, ResourceName: string): ShadowMapTexture2D;
	static GetDefaultObject(): ShadowMapTexture2D;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShadowMapTexture2D;
	static C(Other: UObject | any): ShadowMapTexture2D;
}

declare type ESkyLightSourceType = 'SLS_CapturedScene' | 'SLS_SpecifiedCubemap' | 'SLS_MAX';
declare var ESkyLightSourceType : { SLS_CapturedScene:'SLS_CapturedScene',SLS_SpecifiedCubemap:'SLS_SpecifiedCubemap',SLS_MAX:'SLS_MAX', };
declare type EOcclusionCombineMode = 'OCM_Minimum' | 'OCM_Multiply' | 'OCM_MAX';
declare var EOcclusionCombineMode : { OCM_Minimum:'OCM_Minimum',OCM_Multiply:'OCM_Multiply',OCM_MAX:'OCM_MAX', };
declare class SkyLightComponent extends LightComponentBase { 
	SourceType: ESkyLightSourceType;
	Cubemap: TextureCube;
	SourceCubemapAngle: number;
	CubemapResolution: number;
	SkyDistanceThreshold: number;
	bCaptureEmissiveOnly: boolean;
	bLowerHemisphereIsBlack: boolean;
	LowerHemisphereColor: LinearColor;
	OcclusionMaxDistance: number;
	Contrast: number;
	OcclusionExponent: number;
	MinOcclusion: number;
	OcclusionTint: Color;
	OcclusionCombineMode: EOcclusionCombineMode;
	BlendDestinationCubemap: TextureCube;
	static Load(ResourceName: string): SkyLightComponent;
	static Find(Outer: UObject, ResourceName: string): SkyLightComponent;
	static GetDefaultObject(): SkyLightComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLightComponent;
	SetVolumetricScatteringIntensity(NewIntensity: number): void;
	SetOcclusionTint(InTint: Color): void;
	SetOcclusionExponent(InOcclusionExponent: number): void;
	SetOcclusionContrast(InOcclusionContrast: number): void;
	SetMinOcclusion(InMinOcclusion: number): void;
	SetLowerHemisphereColor(InLowerHemisphereColor: LinearColor): void;
	SetLightColor(NewLightColor: LinearColor): void;
	SetIntensity(NewIntensity: number): void;
	SetIndirectLightingIntensity(NewIntensity: number): void;
	SetCubemapBlend(SourceCubemap: TextureCube,DestinationCubemap: TextureCube,InBlendFraction: number): void;
	SetCubemap(NewCubemap: TextureCube): void;
	RecaptureSky(): void;
	static C(Other: UObject | any): SkyLightComponent;
}

declare class SkyLight extends Info { 
	LightComponent: SkyLightComponent;
	bEnabled: boolean;
	static GetDefaultObject(): SkyLight;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SkyLight;
	OnRep_bEnabled(): void;
	static C(Other: UObject | any): SkyLight;
}

declare class SlateTextureAtlasInterface extends Interface { 
	static Load(ResourceName: string): SlateTextureAtlasInterface;
	static Find(Outer: UObject, ResourceName: string): SlateTextureAtlasInterface;
	static GetDefaultObject(): SlateTextureAtlasInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlateTextureAtlasInterface;
	static C(Other: UObject | any): SlateTextureAtlasInterface;
}

declare class SmokeTestCommandlet extends Commandlet { 
	static Load(ResourceName: string): SmokeTestCommandlet;
	static Find(Outer: UObject, ResourceName: string): SmokeTestCommandlet;
	static GetDefaultObject(): SmokeTestCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SmokeTestCommandlet;
	static C(Other: UObject | any): SmokeTestCommandlet;
}

declare class SoundGroup { 
	SoundGroup: ESoundGroup;
	DisplayName: string;
	bAlwaysDecompressOnLoad: boolean;
	DecompressedDuration: number;
	clone() : SoundGroup;
	static C(Other: UObject | any): SoundGroup;
}

declare class SoundGroups extends UObject { 
	SoundGroupProfiles: SoundGroup[];
	static Load(ResourceName: string): SoundGroups;
	static Find(Outer: UObject, ResourceName: string): SoundGroups;
	static GetDefaultObject(): SoundGroups;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundGroups;
	static C(Other: UObject | any): SoundGroups;
}

declare class SoundNodeAssetReferencer extends SoundNode { 
	static Load(ResourceName: string): SoundNodeAssetReferencer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeAssetReferencer;
	static GetDefaultObject(): SoundNodeAssetReferencer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeAssetReferencer;
	static C(Other: UObject | any): SoundNodeAssetReferencer;
}

declare class SoundNodeAttenuation extends SoundNode { 
	AttenuationSettings: SoundAttenuation;
	AttenuationOverrides: SoundAttenuationSettings;
	bOverrideAttenuation: boolean;
	static Load(ResourceName: string): SoundNodeAttenuation;
	static Find(Outer: UObject, ResourceName: string): SoundNodeAttenuation;
	static GetDefaultObject(): SoundNodeAttenuation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeAttenuation;
	static C(Other: UObject | any): SoundNodeAttenuation;
}

declare class SoundNodeBranch extends SoundNode { 
	BoolParameterName: string;
	static Load(ResourceName: string): SoundNodeBranch;
	static Find(Outer: UObject, ResourceName: string): SoundNodeBranch;
	static GetDefaultObject(): SoundNodeBranch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeBranch;
	static C(Other: UObject | any): SoundNodeBranch;
}

declare class SoundNodeConcatenator extends SoundNode { 
	InputVolume: number[];
	static Load(ResourceName: string): SoundNodeConcatenator;
	static Find(Outer: UObject, ResourceName: string): SoundNodeConcatenator;
	static GetDefaultObject(): SoundNodeConcatenator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeConcatenator;
	static C(Other: UObject | any): SoundNodeConcatenator;
}

declare class SoundNodeDelay extends SoundNode { 
	DelayMin: number;
	DelayMax: number;
	static Load(ResourceName: string): SoundNodeDelay;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDelay;
	static GetDefaultObject(): SoundNodeDelay;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDelay;
	static C(Other: UObject | any): SoundNodeDelay;
}

declare class DialogueWaveParameter { 
	DialogueWave: DialogueWave;
	Context: DialogueContext;
	clone() : DialogueWaveParameter;
	static C(Other: UObject | any): DialogueWaveParameter;
}

declare class SoundNodeDialoguePlayer extends SoundNode { 
	DialogueWaveParameter: DialogueWaveParameter;
	bLooping: boolean;
	static Load(ResourceName: string): SoundNodeDialoguePlayer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDialoguePlayer;
	static GetDefaultObject(): SoundNodeDialoguePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDialoguePlayer;
	static C(Other: UObject | any): SoundNodeDialoguePlayer;
}

declare class DistanceDatum { 
	FadeInDistanceStart: number;
	FadeInDistanceEnd: number;
	FadeOutDistanceStart: number;
	FadeOutDistanceEnd: number;
	Volume: number;
	clone() : DistanceDatum;
	static C(Other: UObject | any): DistanceDatum;
}

declare class SoundNodeDistanceCrossFade extends SoundNode { 
	CrossFadeInput: DistanceDatum[];
	static Load(ResourceName: string): SoundNodeDistanceCrossFade;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDistanceCrossFade;
	static GetDefaultObject(): SoundNodeDistanceCrossFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDistanceCrossFade;
	static C(Other: UObject | any): SoundNodeDistanceCrossFade;
}

declare class SoundNodeDoppler extends SoundNode { 
	DopplerIntensity: number;
	static Load(ResourceName: string): SoundNodeDoppler;
	static Find(Outer: UObject, ResourceName: string): SoundNodeDoppler;
	static GetDefaultObject(): SoundNodeDoppler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeDoppler;
	static C(Other: UObject | any): SoundNodeDoppler;
}

declare class SoundNodeEnveloper extends SoundNode { 
	LoopStart: number;
	LoopEnd: number;
	DurationAfterLoop: number;
	LoopCount: number;
	bLoopIndefinitely: boolean;
	bLoop: boolean;
	VolumeInterpCurve: DistributionFloatConstantCurve;
	PitchInterpCurve: DistributionFloatConstantCurve;
	VolumeCurve: RuntimeFloatCurve;
	PitchCurve: RuntimeFloatCurve;
	PitchMin: number;
	PitchMax: number;
	VolumeMin: number;
	VolumeMax: number;
	static Load(ResourceName: string): SoundNodeEnveloper;
	static Find(Outer: UObject, ResourceName: string): SoundNodeEnveloper;
	static GetDefaultObject(): SoundNodeEnveloper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeEnveloper;
	static C(Other: UObject | any): SoundNodeEnveloper;
}

declare class SoundNodeGroupControl extends SoundNode { 
	GroupSizes: number[];
	static Load(ResourceName: string): SoundNodeGroupControl;
	static Find(Outer: UObject, ResourceName: string): SoundNodeGroupControl;
	static GetDefaultObject(): SoundNodeGroupControl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeGroupControl;
	static C(Other: UObject | any): SoundNodeGroupControl;
}

declare class SoundNodeLooping extends SoundNode { 
	LoopCount: number;
	bLoopIndefinitely: boolean;
	static Load(ResourceName: string): SoundNodeLooping;
	static Find(Outer: UObject, ResourceName: string): SoundNodeLooping;
	static GetDefaultObject(): SoundNodeLooping;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeLooping;
	static C(Other: UObject | any): SoundNodeLooping;
}

declare class SoundNodeMature extends SoundNode { 
	static Load(ResourceName: string): SoundNodeMature;
	static Find(Outer: UObject, ResourceName: string): SoundNodeMature;
	static GetDefaultObject(): SoundNodeMature;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeMature;
	static C(Other: UObject | any): SoundNodeMature;
}

declare class SoundNodeMixer extends SoundNode { 
	InputVolume: number[];
	static Load(ResourceName: string): SoundNodeMixer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeMixer;
	static GetDefaultObject(): SoundNodeMixer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeMixer;
	static C(Other: UObject | any): SoundNodeMixer;
}

declare class SoundNodeModulator extends SoundNode { 
	PitchMin: number;
	PitchMax: number;
	VolumeMin: number;
	VolumeMax: number;
	static Load(ResourceName: string): SoundNodeModulator;
	static Find(Outer: UObject, ResourceName: string): SoundNodeModulator;
	static GetDefaultObject(): SoundNodeModulator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeModulator;
	static C(Other: UObject | any): SoundNodeModulator;
}

declare type ModulationParamMode = 'MPM_Normal' | 'MPM_Abs' | 'MPM_Direct' | 'MPM_MAX';
declare var ModulationParamMode : { MPM_Normal:'MPM_Normal',MPM_Abs:'MPM_Abs',MPM_Direct:'MPM_Direct',MPM_MAX:'MPM_MAX', };
declare class ModulatorContinuousParams { 
	ParameterName: string;
	Default: number;
	MinInput: number;
	MaxInput: number;
	MinOutput: number;
	MaxOutput: number;
	ParamMode: ModulationParamMode;
	clone() : ModulatorContinuousParams;
	static C(Other: UObject | any): ModulatorContinuousParams;
}

declare class SoundNodeModulatorContinuous extends SoundNode { 
	PitchModulationParams: ModulatorContinuousParams;
	VolumeModulationParams: ModulatorContinuousParams;
	static Load(ResourceName: string): SoundNodeModulatorContinuous;
	static Find(Outer: UObject, ResourceName: string): SoundNodeModulatorContinuous;
	static GetDefaultObject(): SoundNodeModulatorContinuous;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeModulatorContinuous;
	static C(Other: UObject | any): SoundNodeModulatorContinuous;
}

declare class SoundNodeOscillator extends SoundNode { 
	bModulateVolume: boolean;
	bModulatePitch: boolean;
	AmplitudeMin: number;
	AmplitudeMax: number;
	FrequencyMin: number;
	FrequencyMax: number;
	OffsetMin: number;
	OffsetMax: number;
	CenterMin: number;
	CenterMax: number;
	static Load(ResourceName: string): SoundNodeOscillator;
	static Find(Outer: UObject, ResourceName: string): SoundNodeOscillator;
	static GetDefaultObject(): SoundNodeOscillator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeOscillator;
	static C(Other: UObject | any): SoundNodeOscillator;
}

declare class SoundNodeParamCrossFade extends SoundNodeDistanceCrossFade { 
	ParamName: string;
	static Load(ResourceName: string): SoundNodeParamCrossFade;
	static Find(Outer: UObject, ResourceName: string): SoundNodeParamCrossFade;
	static GetDefaultObject(): SoundNodeParamCrossFade;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeParamCrossFade;
	static C(Other: UObject | any): SoundNodeParamCrossFade;
}

declare class SoundNodeQualityLevel extends SoundNode { 
	static Load(ResourceName: string): SoundNodeQualityLevel;
	static Find(Outer: UObject, ResourceName: string): SoundNodeQualityLevel;
	static GetDefaultObject(): SoundNodeQualityLevel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeQualityLevel;
	static C(Other: UObject | any): SoundNodeQualityLevel;
}

declare class SoundNodeRandom extends SoundNode { 
	Weights: number[];
	PreselectAtLevelLoad: number;
	bShouldExcludeFromBranchCulling: boolean;
	bSoundCueExcludedFromBranchCulling: boolean;
	bRandomizeWithoutReplacement: boolean;
	HasBeenUsed: boolean[];
	NumRandomUsed: number;
	PIEHiddenNodes: number[];
	static Load(ResourceName: string): SoundNodeRandom;
	static Find(Outer: UObject, ResourceName: string): SoundNodeRandom;
	static GetDefaultObject(): SoundNodeRandom;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeRandom;
	static C(Other: UObject | any): SoundNodeRandom;
}

declare class SoundNodeSoundClass extends SoundNode { 
	SoundClassOverride: SoundClass;
	static Load(ResourceName: string): SoundNodeSoundClass;
	static Find(Outer: UObject, ResourceName: string): SoundNodeSoundClass;
	static GetDefaultObject(): SoundNodeSoundClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeSoundClass;
	static C(Other: UObject | any): SoundNodeSoundClass;
}

declare class SoundNodeSwitch extends SoundNode { 
	IntParameterName: string;
	static Load(ResourceName: string): SoundNodeSwitch;
	static Find(Outer: UObject, ResourceName: string): SoundNodeSwitch;
	static GetDefaultObject(): SoundNodeSwitch;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeSwitch;
	static C(Other: UObject | any): SoundNodeSwitch;
}

declare class SoundNodeWaveParam extends SoundNode { 
	WaveParameterName: string;
	static Load(ResourceName: string): SoundNodeWaveParam;
	static Find(Outer: UObject, ResourceName: string): SoundNodeWaveParam;
	static GetDefaultObject(): SoundNodeWaveParam;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeWaveParam;
	static C(Other: UObject | any): SoundNodeWaveParam;
}

declare class SoundNodeWavePlayer extends SoundNodeAssetReferencer { 
	SoundWaveAssetPtr: SoundWave;
	SoundWave: SoundWave;
	bLooping: boolean;
	static Load(ResourceName: string): SoundNodeWavePlayer;
	static Find(Outer: UObject, ResourceName: string): SoundNodeWavePlayer;
	static GetDefaultObject(): SoundNodeWavePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundNodeWavePlayer;
	static C(Other: UObject | any): SoundNodeWavePlayer;
}

declare class SpectatorPawnMovement extends FloatingPawnMovement { 
	bIgnoreTimeDilation: boolean;
	static Load(ResourceName: string): SpectatorPawnMovement;
	static Find(Outer: UObject, ResourceName: string): SpectatorPawnMovement;
	static GetDefaultObject(): SpectatorPawnMovement;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpectatorPawnMovement;
	static C(Other: UObject | any): SpectatorPawnMovement;
}

declare class SphereReflectionCapture extends ReflectionCapture { 
	DrawCaptureRadius: DrawSphereComponent;
	static GetDefaultObject(): SphereReflectionCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereReflectionCapture;
	static C(Other: UObject | any): SphereReflectionCapture;
}

declare class SphereReflectionCaptureComponent extends ReflectionCaptureComponent { 
	InfluenceRadius: number;
	CaptureDistanceScale: number;
	PreviewInfluenceRadius: DrawSphereComponent;
	static Load(ResourceName: string): SphereReflectionCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): SphereReflectionCaptureComponent;
	static GetDefaultObject(): SphereReflectionCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SphereReflectionCaptureComponent;
	static C(Other: UObject | any): SphereReflectionCaptureComponent;
}

declare class SplineMeshActor extends Actor { 
	SplineMeshComponent: SplineMeshComponent;
	static GetDefaultObject(): SplineMeshActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SplineMeshActor;
	static C(Other: UObject | any): SplineMeshActor;
}

declare class SpringArmComponent extends SceneComponent { 
	TargetArmLength: number;
	SocketOffset: Vector;
	TargetOffset: Vector;
	ProbeSize: number;
	ProbeChannel: ECollisionChannel;
	bDoCollisionTest: boolean;
	bUsePawnControlRotation: boolean;
	bInheritPitch: boolean;
	bInheritYaw: boolean;
	bInheritRoll: boolean;
	bEnableCameraLag: boolean;
	bEnableCameraRotationLag: boolean;
	bUseCameraLagSubstepping: boolean;
	bDrawDebugLagMarkers: boolean;
	CameraLagSpeed: number;
	CameraRotationLagSpeed: number;
	CameraLagMaxTimeStep: number;
	CameraLagMaxDistance: number;
	static Load(ResourceName: string): SpringArmComponent;
	static Find(Outer: UObject, ResourceName: string): SpringArmComponent;
	static GetDefaultObject(): SpringArmComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpringArmComponent;
	IsCollisionFixApplied(): boolean;
	GetUnfixedCameraPosition(): Vector;
	GetTargetRotation(): Rotator;
	static C(Other: UObject | any): SpringArmComponent;
}

declare type EStereoLayerType = 'SLT_WorldLocked' | 'SLT_TrackerLocked' | 'SLT_FaceLocked' | 'SLT_MAX';
declare var EStereoLayerType : { SLT_WorldLocked:'SLT_WorldLocked',SLT_TrackerLocked:'SLT_TrackerLocked',SLT_FaceLocked:'SLT_FaceLocked',SLT_MAX:'SLT_MAX', };
declare type EStereoLayerShape = 'SLSH_QuadLayer' | 'SLSH_CylinderLayer' | 'SLSH_CubemapLayer' | 'SLSH_MAX';
declare var EStereoLayerShape : { SLSH_QuadLayer:'SLSH_QuadLayer',SLSH_CylinderLayer:'SLSH_CylinderLayer',SLSH_CubemapLayer:'SLSH_CubemapLayer',SLSH_MAX:'SLSH_MAX', };
declare class StereoLayerComponent extends SceneComponent { 
	bLiveTexture: boolean;
	bSupportsDepth: boolean;
	bNoAlphaChannel: boolean;
	Texture: Texture;
	LeftTexture: Texture;
	bQuadPreserveTextureRatio: boolean;
	QuadSize: Vector2D;
	UVRect: Box2D;
	CylinderRadius: number;
	CylinderOverlayArc: number;
	CylinderHeight: number;
	StereoLayerType: EStereoLayerType;
	StereoLayerShape: EStereoLayerShape;
	Priority: number;
	static Load(ResourceName: string): StereoLayerComponent;
	static Find(Outer: UObject, ResourceName: string): StereoLayerComponent;
	static GetDefaultObject(): StereoLayerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerComponent;
	SetUVRect(InUVRect: Box2D): void;
	SetTexture(InTexture: Texture): void;
	SetQuadSize(InQuadSize: Vector2D): void;
	SetPriority(InPriority: number): void;
	MarkTextureForUpdate(): void;
	GetUVRect(): Box2D;
	GetTexture(): Texture;
	GetQuadSize(): Vector2D;
	GetPriority(): number;
	static C(Other: UObject | any): StereoLayerComponent;
}

declare class StereoLayerFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): StereoLayerFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): StereoLayerFunctionLibrary;
	static GetDefaultObject(): StereoLayerFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StereoLayerFunctionLibrary;
	static ShowSplashScreen(): void;
	static SetSplashScreen(Texture: Texture,Scale: Vector2D,Offset: Vector2D,bShowLoadingMovie: boolean,bShowOnSet: boolean): void;
	static HideSplashScreen(): void;
	static EnableAutoLoadingSplashScreen(InAutoShowEnabled: boolean): void;
	static C(Other: UObject | any): StereoLayerFunctionLibrary;
}

declare class StringTable extends UObject { 
	static Load(ResourceName: string): StringTable;
	static Find(Outer: UObject, ResourceName: string): StringTable;
	static GetDefaultObject(): StringTable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StringTable;
	static C(Other: UObject | any): StringTable;
}

declare class SystemTimeTimecodeProvider extends TimecodeProvider { 
	FrameRate: FrameRate;
	static Load(ResourceName: string): SystemTimeTimecodeProvider;
	static Find(Outer: UObject, ResourceName: string): SystemTimeTimecodeProvider;
	static GetDefaultObject(): SystemTimeTimecodeProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SystemTimeTimecodeProvider;
	SetFrameRate(InFrameRate: FrameRate): void;
	static C(Other: UObject | any): SystemTimeTimecodeProvider;
}

declare class TargetPoint extends Actor { 
	SpriteComponent: BillboardComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): TargetPoint;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TargetPoint;
	static C(Other: UObject | any): TargetPoint;
}

declare class TextPropertyTestObject extends UObject { 
	DefaultedText: string;
	UndefaultedText: string;
	TransientText: string;
	static Load(ResourceName: string): TextPropertyTestObject;
	static Find(Outer: UObject, ResourceName: string): TextPropertyTestObject;
	static GetDefaultObject(): TextPropertyTestObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextPropertyTestObject;
	static C(Other: UObject | any): TextPropertyTestObject;
}

declare class TextRenderActor extends Actor { 
	TextRender: TextRenderComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): TextRenderActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TextRenderActor;
	static C(Other: UObject | any): TextRenderActor;
}

declare class TimelineEventEntry { 
	Time: number;
	EventFunc: UnrealEngineDelegate<() => void>;
	clone() : TimelineEventEntry;
	static C(Other: UObject | any): TimelineEventEntry;
}

declare class TimelineVectorTrack { 
	VectorCurve: CurveVector;
	InterpFunc: UnrealEngineDelegate<(Output: Vector) => void>;
	TrackName: string;
	VectorPropertyName: string;
	VectorProperty: StructProperty;
	clone() : TimelineVectorTrack;
	static C(Other: UObject | any): TimelineVectorTrack;
}

declare class TimelineFloatTrack { 
	FloatCurve: CurveFloat;
	InterpFunc: UnrealEngineDelegate<(Output: number) => void>;
	TrackName: string;
	FloatPropertyName: string;
	FloatProperty: FloatProperty;
	clone() : TimelineFloatTrack;
	static C(Other: UObject | any): TimelineFloatTrack;
}

declare class TimelineLinearColorTrack { 
	LinearColorCurve: CurveLinearColor;
	InterpFunc: UnrealEngineDelegate<(Output: LinearColor) => void>;
	TrackName: string;
	LinearColorPropertyName: string;
	LinearColorProperty: StructProperty;
	clone() : TimelineLinearColorTrack;
	static C(Other: UObject | any): TimelineLinearColorTrack;
}

declare class Timeline { 
	LengthMode: ETimelineLengthMode;
	bLooping: boolean;
	bReversePlayback: boolean;
	bPlaying: boolean;
	Length: number;
	PlayRate: number;
	Position: number;
	Events: TimelineEventEntry[];
	InterpVectors: TimelineVectorTrack[];
	InterpFloats: TimelineFloatTrack[];
	InterpLinearColors: TimelineLinearColorTrack[];
	TimelinePostUpdateFunc: UnrealEngineDelegate<() => void>;
	TimelineFinishedFunc: UnrealEngineDelegate<() => void>;
	PropertySetObject: any;
	DirectionPropertyName: string;
	DirectionProperty: Property;
	clone() : Timeline;
	static C(Other: UObject | any): Timeline;
}

declare class TimelineComponent extends ActorComponent { 
	TheTimeline: Timeline;
	bIgnoreTimeDilation: boolean;
	static Load(ResourceName: string): TimelineComponent;
	static Find(Outer: UObject, ResourceName: string): TimelineComponent;
	static GetDefaultObject(): TimelineComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimelineComponent;
	Stop(): void;
	SetVectorCurve(NewVectorCurve: CurveVector,VectorTrackName: string): void;
	SetTimelineLengthMode(NewLengthMode: ETimelineLengthMode): void;
	SetTimelineLength(NewLength: number): void;
	SetPlayRate(NewRate: number): void;
	SetPlaybackPosition(NewPosition: number,bFireEvents: boolean,bFireUpdate: boolean): void;
	SetNewTime(NewTime: number): void;
	SetLooping(bNewLooping: boolean): void;
	SetLinearColorCurve(NewLinearColorCurve: CurveLinearColor,LinearColorTrackName: string): void;
	SetIgnoreTimeDilation(bNewIgnoreTimeDilation: boolean): void;
	SetFloatCurve(NewFloatCurve: CurveFloat,FloatTrackName: string): void;
	ReverseFromEnd(): void;
	Reverse(): void;
	PlayFromStart(): void;
	Play(): void;
	OnRep_Timeline(): void;
	IsReversing(): boolean;
	IsPlaying(): boolean;
	IsLooping(): boolean;
	GetTimelineLength(): number;
	GetPlayRate(): number;
	GetPlaybackPosition(): number;
	GetIgnoreTimeDilation(): boolean;
	static C(Other: UObject | any): TimelineComponent;
}

declare class TriggerBase extends Actor { 
	CollisionComponent: ShapeComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): TriggerBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerBase;
	static C(Other: UObject | any): TriggerBase;
}

declare class TriggerBox extends TriggerBase { 
	static GetDefaultObject(): TriggerBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerBox;
	static C(Other: UObject | any): TriggerBox;
}

declare class TriggerCapsule extends TriggerBase { 
	static GetDefaultObject(): TriggerCapsule;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerCapsule;
	static C(Other: UObject | any): TriggerCapsule;
}

declare class TriggerSphere extends TriggerBase { 
	static GetDefaultObject(): TriggerSphere;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerSphere;
	static C(Other: UObject | any): TriggerSphere;
}

declare class TriggerVolume extends Volume { 
	static GetDefaultObject(): TriggerVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TriggerVolume;
	static C(Other: UObject | any): TriggerVolume;
}

declare type ETwitterRequestMethod = 'TRM_Get' | 'TRM_Post' | 'TRM_Delete' | 'TRM_MAX';
declare var ETwitterRequestMethod : { TRM_Get:'TRM_Get',TRM_Post:'TRM_Post',TRM_Delete:'TRM_Delete',TRM_MAX:'TRM_MAX', };
declare class TwitterIntegrationBase extends PlatformInterfaceBase { 
	static Load(ResourceName: string): TwitterIntegrationBase;
	static Find(Outer: UObject, ResourceName: string): TwitterIntegrationBase;
	static GetDefaultObject(): TwitterIntegrationBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TwitterIntegrationBase;
	TwitterRequest(URL: string,ParamKeysAndValues: string[],RequestMethod: ETwitterRequestMethod,AccountIndex: number): boolean;
	ShowTweetUI(InitialMessage: string,URL: string,Picture: string): boolean;
	Init(): void;
	GetNumAccounts(): number;
	GetAccountName(AccountIndex: number): string;
	CanShowTweetUI(): boolean;
	AuthorizeAccounts(): boolean;
	static C(Other: UObject | any): TwitterIntegrationBase;
}

declare class UserDefinedEnum extends Enum { 
	UniqueNameIndex: any;
	EnumDescription: string;
	DisplayNameMap: any;
	static Load(ResourceName: string): UserDefinedEnum;
	static Find(Outer: UObject, ResourceName: string): UserDefinedEnum;
	static GetDefaultObject(): UserDefinedEnum;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserDefinedEnum;
	static C(Other: UObject | any): UserDefinedEnum;
}

declare type ERenderFocusRule = 'Always' | 'NonPointer' | 'NavigationOnly' | 'Never' | 'ERenderFocusRule_MAX';
declare var ERenderFocusRule : { Always:'Always',NonPointer:'NonPointer',NavigationOnly:'NavigationOnly',Never:'Never',ERenderFocusRule_MAX:'ERenderFocusRule_MAX', };
declare type EUIScalingRule = 'ShortestSide' | 'LongestSide' | 'Horizontal' | 'Vertical' | 'Custom' | 'EUIScalingRule_MAX';
declare var EUIScalingRule : { ShortestSide:'ShortestSide',LongestSide:'LongestSide',Horizontal:'Horizontal',Vertical:'Vertical',Custom:'Custom',EUIScalingRule_MAX:'EUIScalingRule_MAX', };
declare class UserInterfaceSettings extends DeveloperSettings { 
	RenderFocusRule: ERenderFocusRule;
	HardwareCursors: any;
	SoftwareCursors: any;
	DefaultCursor: SoftClassPath;
	TextEditBeamCursor: SoftClassPath;
	CrosshairsCursor: SoftClassPath;
	HandCursor: SoftClassPath;
	GrabHandCursor: SoftClassPath;
	GrabHandClosedCursor: SoftClassPath;
	SlashedCircleCursor: SoftClassPath;
	ApplicationScale: number;
	UIScaleRule: EUIScalingRule;
	CustomScalingRuleClass: SoftClassPath;
	UIScaleCurve: RuntimeFloatCurve;
	bAllowHighDPIInGameMode: boolean;
	bLoadWidgetsOnDedicatedServer: boolean;
	CursorClasses: UObject[];
	CustomScalingRuleClassInstance: UnrealEngineClass;
	CustomScalingRule: DPICustomScalingRule;
	static Load(ResourceName: string): UserInterfaceSettings;
	static Find(Outer: UObject, ResourceName: string): UserInterfaceSettings;
	static GetDefaultObject(): UserInterfaceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UserInterfaceSettings;
	static C(Other: UObject | any): UserInterfaceSettings;
}

declare type EVectorFieldConstructionOp = 'VFCO_Extrude' | 'VFCO_Revolve' | 'VFCO_MAX';
declare var EVectorFieldConstructionOp : { VFCO_Extrude:'VFCO_Extrude',VFCO_Revolve:'VFCO_Revolve',VFCO_MAX:'VFCO_MAX', };
declare class VectorFieldStatic extends VectorField { 
	SizeX: number;
	SizeY: number;
	SizeZ: number;
	SourceFilePath: string;
	AssetImportData: AssetImportData;
	static Load(ResourceName: string): VectorFieldStatic;
	static Find(Outer: UObject, ResourceName: string): VectorFieldStatic;
	static GetDefaultObject(): VectorFieldStatic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldStatic;
	static C(Other: UObject | any): VectorFieldStatic;
}

declare class VectorFieldAnimated extends VectorField { 
	Texture: Texture2D;
	ConstructionOp: EVectorFieldConstructionOp;
	VolumeSizeX: number;
	VolumeSizeY: number;
	VolumeSizeZ: number;
	SubImagesX: number;
	SubImagesY: number;
	FrameCount: number;
	FramesPerSecond: number;
	bLoop: boolean;
	NoiseField: VectorFieldStatic;
	NoiseScale: number;
	NoiseMax: number;
	static Load(ResourceName: string): VectorFieldAnimated;
	static Find(Outer: UObject, ResourceName: string): VectorFieldAnimated;
	static GetDefaultObject(): VectorFieldAnimated;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldAnimated;
	static C(Other: UObject | any): VectorFieldAnimated;
}

declare class VectorFieldComponent extends PrimitiveComponent { 
	VectorField: VectorField;
	Intensity: number;
	Tightness: number;
	bPreviewVectorField: boolean;
	static Load(ResourceName: string): VectorFieldComponent;
	static Find(Outer: UObject, ResourceName: string): VectorFieldComponent;
	static GetDefaultObject(): VectorFieldComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldComponent;
	SetIntensity(NewIntensity: number): void;
	static C(Other: UObject | any): VectorFieldComponent;
}

declare class VectorFieldVolume extends Actor { 
	VectorFieldComponent: VectorFieldComponent;
	SpriteComponent: BillboardComponent;
	static GetDefaultObject(): VectorFieldVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VectorFieldVolume;
	static C(Other: UObject | any): VectorFieldVolume;
}

declare class VirtualTextureLayer { 
	Format: ETextureSourceFormat;
	bCompressed: boolean;
	bHasAlpha: boolean;
	CompressionSettings: TextureCompressionSettings;
	clone() : VirtualTextureLayer;
	static C(Other: UObject | any): VirtualTextureLayer;
}

declare type PageTableFormat = 'PTF_16' | 'PTF_32' | 'PTF_MAX';
declare var PageTableFormat : { PTF_16:'PTF_16',PTF_32:'PTF_32',PTF_MAX:'PTF_MAX', };
declare class VirtualTextureSpace extends UObject { 
	Layers: VirtualTextureLayer[];
	TileSize: number;
	BorderWidth: number;
	Size: number;
	Dimensions: number;
	Format: PageTableFormat;
	PoolSize: number;
	static Load(ResourceName: string): VirtualTextureSpace;
	static Find(Outer: UObject, ResourceName: string): VirtualTextureSpace;
	static GetDefaultObject(): VirtualTextureSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTextureSpace;
	static C(Other: UObject | any): VirtualTextureSpace;
}

declare class VirtualTexture extends UObject { 
	Layers: Texture[];
	Space: VirtualTextureSpace;
	Rebuild: boolean;
	static Load(ResourceName: string): VirtualTexture;
	static Find(Outer: UObject, ResourceName: string): VirtualTexture;
	static GetDefaultObject(): VirtualTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VirtualTexture;
	static C(Other: UObject | any): VirtualTexture;
}

declare class LightMapVirtualTexture extends VirtualTexture { 
	LayerFlags: number;
	static Load(ResourceName: string): LightMapVirtualTexture;
	static Find(Outer: UObject, ResourceName: string): LightMapVirtualTexture;
	static GetDefaultObject(): LightMapVirtualTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightMapVirtualTexture;
	static C(Other: UObject | any): LightMapVirtualTexture;
}

declare class LightMapVirtualTextureSpace extends VirtualTextureSpace { 
	static Load(ResourceName: string): LightMapVirtualTextureSpace;
	static Find(Outer: UObject, ResourceName: string): LightMapVirtualTextureSpace;
	static GetDefaultObject(): LightMapVirtualTextureSpace;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightMapVirtualTextureSpace;
	static C(Other: UObject | any): LightMapVirtualTextureSpace;
}

declare class VisualLoggerAutomationTests extends UObject { 
	static Load(ResourceName: string): VisualLoggerAutomationTests;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerAutomationTests;
	static GetDefaultObject(): VisualLoggerAutomationTests;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerAutomationTests;
	static C(Other: UObject | any): VisualLoggerAutomationTests;
}

declare class VisualLoggerDebugSnapshotInterface extends Interface { 
	static Load(ResourceName: string): VisualLoggerDebugSnapshotInterface;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerDebugSnapshotInterface;
	static GetDefaultObject(): VisualLoggerDebugSnapshotInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerDebugSnapshotInterface;
	static C(Other: UObject | any): VisualLoggerDebugSnapshotInterface;
}

declare class VisualLoggerKismetLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): VisualLoggerKismetLibrary;
	static Find(Outer: UObject, ResourceName: string): VisualLoggerKismetLibrary;
	static GetDefaultObject(): VisualLoggerKismetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VisualLoggerKismetLibrary;
	static RedirectVislog(SourceOwner: UObject,DestinationOwner: UObject): void;
	static LogText(WorldContextObject: UObject,text: string,LogCategory: string,bAddToMessageLog: boolean): void;
	static LogSegment(WorldContextObject: UObject,SegmentStart: Vector,SegmentEnd: Vector,text: string,ObjectColor: LinearColor,Thickness: number,CategoryName: string,bAddToMessageLog: boolean): void;
	static LogLocation(WorldContextObject: UObject,Location: Vector,text: string,ObjectColor: LinearColor,Radius: number,LogCategory: string,bAddToMessageLog: boolean): void;
	static LogBox(WorldContextObject: UObject,BoxShape: Box,text: string,ObjectColor: LinearColor,LogCategory: string,bAddToMessageLog: boolean): void;
	static EnableRecording(bEnabled: boolean): void;
	static C(Other: UObject | any): VisualLoggerKismetLibrary;
}

declare class VoiceChannel extends Channel { 
	static Load(ResourceName: string): VoiceChannel;
	static Find(Outer: UObject, ResourceName: string): VoiceChannel;
	static GetDefaultObject(): VoiceChannel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VoiceChannel;
	static C(Other: UObject | any): VoiceChannel;
}

declare class VoiceSettings { 
	ComponentToAttachTo: SceneComponent;
	AttenuationSettings: SoundAttenuation;
	SourceEffectChain: SoundEffectSourcePresetChain;
	clone() : VoiceSettings;
	static C(Other: UObject | any): VoiceSettings;
}

declare class VOIPTalker extends ActorComponent { 
	Settings: VoiceSettings;
	static Load(ResourceName: string): VOIPTalker;
	static Find(Outer: UObject, ResourceName: string): VOIPTalker;
	static GetDefaultObject(): VOIPTalker;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VOIPTalker;
	RegisterWithPlayerState(OwningState: PlayerState): void;
	GetVoiceLevel(): number;
	static CreateTalkerForPlayer(OwningState: PlayerState): VOIPTalker;
	BPOnTalkingEnd(): void;
	BPOnTalkingBegin(AudioComponent: AudioComponent): void;
	static C(Other: UObject | any): VOIPTalker;
}

declare class VOIPStatics extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): VOIPStatics;
	static Find(Outer: UObject, ResourceName: string): VOIPStatics;
	static GetDefaultObject(): VOIPStatics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VOIPStatics;
	static SetMicThreshold(InThreshold: number): void;
	static C(Other: UObject | any): VOIPStatics;
}

declare class VolumeTexture extends Texture { 
	Source2DTexture: Texture2D;
	SourceLightingGuid: Guid;
	Source2DTileSizeX: number;
	Source2DTileSizeY: number;
	static Load(ResourceName: string): VolumeTexture;
	static Find(Outer: UObject, ResourceName: string): VolumeTexture;
	static GetDefaultObject(): VolumeTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumeTexture;
	static C(Other: UObject | any): VolumeTexture;
}

declare class VolumetricLightmapDensityVolume extends Volume { 
	AllowedMipLevelRange: Int32Interval;
	static GetDefaultObject(): VolumetricLightmapDensityVolume;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VolumetricLightmapDensityVolume;
	static C(Other: UObject | any): VolumetricLightmapDensityVolume;
}

declare type EWindSourceType = 'Directional' | 'Point' | 'EWindSourceType_MAX';
declare var EWindSourceType : { Directional:'Directional',Point:'Point',EWindSourceType_MAX:'EWindSourceType_MAX', };
declare class WindDirectionalSourceComponent extends SceneComponent { 
	Strength: number;
	Speed: number;
	MinGustAmount: number;
	MaxGustAmount: number;
	Radius: number;
	bPointWind: boolean;
	static Load(ResourceName: string): WindDirectionalSourceComponent;
	static Find(Outer: UObject, ResourceName: string): WindDirectionalSourceComponent;
	static GetDefaultObject(): WindDirectionalSourceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindDirectionalSourceComponent;
	SetWindType(InNewType: EWindSourceType): void;
	SetStrength(InNewStrength: number): void;
	SetSpeed(InNewSpeed: number): void;
	SetRadius(InNewRadius: number): void;
	SetMinimumGustAmount(InNewMinGust: number): void;
	SetMaximumGustAmount(InNewMaxGust: number): void;
	static C(Other: UObject | any): WindDirectionalSourceComponent;
}

declare class WindDirectionalSource extends Info { 
	Component: WindDirectionalSourceComponent;
	ArrowComponent: ArrowComponent;
	static GetDefaultObject(): WindDirectionalSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindDirectionalSource;
	static C(Other: UObject | any): WindDirectionalSource;
}

declare class HierarchicalLODSetup extends UObject { 
	HierarchicalLODSetup: HierarchicalSimplification[];
	OverrideBaseMaterial: MaterialInterface;
	static Load(ResourceName: string): HierarchicalLODSetup;
	static Find(Outer: UObject, ResourceName: string): HierarchicalLODSetup;
	static GetDefaultObject(): HierarchicalLODSetup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): HierarchicalLODSetup;
	static C(Other: UObject | any): HierarchicalLODSetup;
}

declare class MoviePlayerSettings extends UObject { 
	bWaitForMoviesToComplete: boolean;
	bMoviesAreSkippable: boolean;
	StartupMovies: string[];
	static Load(ResourceName: string): MoviePlayerSettings;
	static Find(Outer: UObject, ResourceName: string): MoviePlayerSettings;
	static GetDefaultObject(): MoviePlayerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MoviePlayerSettings;
	static C(Other: UObject | any): MoviePlayerSettings;
}

declare class SoundFactory extends Factory { 
	bAutoCreateCue: boolean;
	bIncludeAttenuationNode: boolean;
	bIncludeLoopingNode: boolean;
	bIncludeModulatorNode: boolean;
	CueVolume: number;
	CuePackageSuffix: string;
	static Load(ResourceName: string): SoundFactory;
	static Find(Outer: UObject, ResourceName: string): SoundFactory;
	static GetDefaultObject(): SoundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundFactory;
	static C(Other: UObject | any): SoundFactory;
}

declare class ReimportSoundFactory extends SoundFactory { 
	static Load(ResourceName: string): ReimportSoundFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportSoundFactory;
	static GetDefaultObject(): ReimportSoundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSoundFactory;
	static C(Other: UObject | any): ReimportSoundFactory;
}

declare class SoundSurroundFactory extends Factory { 
	CueVolume: number;
	static Load(ResourceName: string): SoundSurroundFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSurroundFactory;
	static GetDefaultObject(): SoundSurroundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSurroundFactory;
	static C(Other: UObject | any): SoundSurroundFactory;
}

declare class ReimportSoundSurroundFactory extends SoundSurroundFactory { 
	ReimportPaths: string[];
	static Load(ResourceName: string): ReimportSoundSurroundFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportSoundSurroundFactory;
	static GetDefaultObject(): ReimportSoundSurroundFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportSoundSurroundFactory;
	static C(Other: UObject | any): ReimportSoundSurroundFactory;
}

declare class MacTargetSettings extends UObject { 
	TargetedRHIs: string[];
	MaxShaderLanguageVersion: number;
	UseFastIntrinsics: boolean;
	EnableMathOptimisations: boolean;
	AudioSampleRate: number;
	AudioCallbackBufferFrameSize: number;
	AudioNumBuffersToEnqueue: number;
	AudioMaxChannels: number;
	AudioNumSourceWorkers: number;
	SpatializationPlugin: string;
	ReverbPlugin: string;
	OcclusionPlugin: string;
	static Load(ResourceName: string): MacTargetSettings;
	static Find(Outer: UObject, ResourceName: string): MacTargetSettings;
	static GetDefaultObject(): MacTargetSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MacTargetSettings;
	static C(Other: UObject | any): MacTargetSettings;
}

declare class LinuxTargetSettings extends UObject { 
	SpatializationPlugin: string;
	ReverbPlugin: string;
	OcclusionPlugin: string;
	TargetedRHIs: string[];
	static Load(ResourceName: string): LinuxTargetSettings;
	static Find(Outer: UObject, ResourceName: string): LinuxTargetSettings;
	static GetDefaultObject(): LinuxTargetSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LinuxTargetSettings;
	static C(Other: UObject | any): LinuxTargetSettings;
}

declare class DialogueVoiceFactory extends Factory { 
	static Load(ResourceName: string): DialogueVoiceFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueVoiceFactory;
	static GetDefaultObject(): DialogueVoiceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueVoiceFactory;
	static C(Other: UObject | any): DialogueVoiceFactory;
}

declare class DialogueWaveFactory extends Factory { 
	InitialSoundWave: SoundWave;
	InitialSpeakerVoice: DialogueVoice;
	HasSetInitialTargetVoice: boolean;
	InitialTargetVoices: DialogueVoice[];
	static Load(ResourceName: string): DialogueWaveFactory;
	static Find(Outer: UObject, ResourceName: string): DialogueWaveFactory;
	static GetDefaultObject(): DialogueWaveFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DialogueWaveFactory;
	static C(Other: UObject | any): DialogueWaveFactory;
}

declare class ReverbEffectFactory extends Factory { 
	static Load(ResourceName: string): ReverbEffectFactory;
	static Find(Outer: UObject, ResourceName: string): ReverbEffectFactory;
	static GetDefaultObject(): ReverbEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReverbEffectFactory;
	static C(Other: UObject | any): ReverbEffectFactory;
}

declare class SoundAttenuationFactory extends Factory { 
	static Load(ResourceName: string): SoundAttenuationFactory;
	static Find(Outer: UObject, ResourceName: string): SoundAttenuationFactory;
	static GetDefaultObject(): SoundAttenuationFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundAttenuationFactory;
	static C(Other: UObject | any): SoundAttenuationFactory;
}

declare class SoundClassFactory extends Factory { 
	static Load(ResourceName: string): SoundClassFactory;
	static Find(Outer: UObject, ResourceName: string): SoundClassFactory;
	static GetDefaultObject(): SoundClassFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassFactory;
	static C(Other: UObject | any): SoundClassFactory;
}

declare class SoundClassGraph extends EdGraph { 
	static Load(ResourceName: string): SoundClassGraph;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraph;
	static GetDefaultObject(): SoundClassGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraph;
	static C(Other: UObject | any): SoundClassGraph;
}

declare class SoundClassGraphNode extends EdGraphNode { 
	SoundClass: SoundClass;
	static Load(ResourceName: string): SoundClassGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphNode;
	static GetDefaultObject(): SoundClassGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphNode;
	static C(Other: UObject | any): SoundClassGraphNode;
}

declare class SoundClassGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundClassGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundClassGraphSchema;
	static GetDefaultObject(): SoundClassGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundClassGraphSchema;
	static C(Other: UObject | any): SoundClassGraphSchema;
}

declare class SoundConcurrencyFactory extends Factory { 
	static Load(ResourceName: string): SoundConcurrencyFactory;
	static Find(Outer: UObject, ResourceName: string): SoundConcurrencyFactory;
	static GetDefaultObject(): SoundConcurrencyFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundConcurrencyFactory;
	static C(Other: UObject | any): SoundConcurrencyFactory;
}

declare class SoundCueFactoryNew extends Factory { 
	InitialSoundWave: SoundWave;
	InitialDialogueWave: DialogueWave;
	static Load(ResourceName: string): SoundCueFactoryNew;
	static Find(Outer: UObject, ResourceName: string): SoundCueFactoryNew;
	static GetDefaultObject(): SoundCueFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueFactoryNew;
	static C(Other: UObject | any): SoundCueFactoryNew;
}

declare class SoundCueGraph extends EdGraph { 
	static Load(ResourceName: string): SoundCueGraph;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraph;
	static GetDefaultObject(): SoundCueGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraph;
	static C(Other: UObject | any): SoundCueGraph;
}

declare class SoundCueGraphNode_Base extends EdGraphNode { 
	static Load(ResourceName: string): SoundCueGraphNode_Base;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Base;
	static GetDefaultObject(): SoundCueGraphNode_Base;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Base;
	static C(Other: UObject | any): SoundCueGraphNode_Base;
}

declare class SoundCueGraphNode extends SoundCueGraphNode_Base { 
	SoundNode: SoundNode;
	static Load(ResourceName: string): SoundCueGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode;
	static GetDefaultObject(): SoundCueGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode;
	static C(Other: UObject | any): SoundCueGraphNode;
}

declare class SoundCueGraphNode_Root extends SoundCueGraphNode_Base { 
	static Load(ResourceName: string): SoundCueGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphNode_Root;
	static GetDefaultObject(): SoundCueGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphNode_Root;
	static C(Other: UObject | any): SoundCueGraphNode_Root;
}

declare class SoundCueGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundCueGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundCueGraphSchema;
	static GetDefaultObject(): SoundCueGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundCueGraphSchema;
	static C(Other: UObject | any): SoundCueGraphSchema;
}

declare class SoundMixFactory extends Factory { 
	static Load(ResourceName: string): SoundMixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundMixFactory;
	static GetDefaultObject(): SoundMixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundMixFactory;
	static C(Other: UObject | any): SoundMixFactory;
}

declare class SoundSourceBusFactory extends Factory { 
	static Load(ResourceName: string): SoundSourceBusFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSourceBusFactory;
	static GetDefaultObject(): SoundSourceBusFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceBusFactory;
	static C(Other: UObject | any): SoundSourceBusFactory;
}

declare class SoundSourceEffectFactory extends Factory { 
	SoundEffectSourcepresetClass: UnrealEngineClass;
	static Load(ResourceName: string): SoundSourceEffectFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSourceEffectFactory;
	static GetDefaultObject(): SoundSourceEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceEffectFactory;
	static C(Other: UObject | any): SoundSourceEffectFactory;
}

declare class SoundSourceEffectChainFactory extends Factory { 
	static Load(ResourceName: string): SoundSourceEffectChainFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSourceEffectChainFactory;
	static GetDefaultObject(): SoundSourceEffectChainFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSourceEffectChainFactory;
	static C(Other: UObject | any): SoundSourceEffectChainFactory;
}

declare class SoundSubmixEffectFactory extends Factory { 
	SoundEffectSubmixPresetClass: UnrealEngineClass;
	static Load(ResourceName: string): SoundSubmixEffectFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixEffectFactory;
	static GetDefaultObject(): SoundSubmixEffectFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixEffectFactory;
	static C(Other: UObject | any): SoundSubmixEffectFactory;
}

declare class SoundSubmixFactory extends Factory { 
	static Load(ResourceName: string): SoundSubmixFactory;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixFactory;
	static GetDefaultObject(): SoundSubmixFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixFactory;
	static C(Other: UObject | any): SoundSubmixFactory;
}

declare class SoundSubmixGraph extends EdGraph { 
	static Load(ResourceName: string): SoundSubmixGraph;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraph;
	static GetDefaultObject(): SoundSubmixGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraph;
	static C(Other: UObject | any): SoundSubmixGraph;
}

declare class SoundSubmixGraphNode extends EdGraphNode { 
	SoundSubmix: SoundSubmix;
	static Load(ResourceName: string): SoundSubmixGraphNode;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraphNode;
	static GetDefaultObject(): SoundSubmixGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraphNode;
	static C(Other: UObject | any): SoundSubmixGraphNode;
}

declare class SoundSubmixGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): SoundSubmixGraphSchema;
	static Find(Outer: UObject, ResourceName: string): SoundSubmixGraphSchema;
	static GetDefaultObject(): SoundSubmixGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SoundSubmixGraphSchema;
	static C(Other: UObject | any): SoundSubmixGraphSchema;
}

declare class AnimationBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AnimationBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): AnimationBlueprintLibrary;
	static GetDefaultObject(): AnimationBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationBlueprintLibrary;
	static SetRootMotionLockType(AnimationSequence: AnimSequence,RootMotionLockType: ERootMotionRootLock): void;
	static SetRootMotionEnabled(AnimationSequence: AnimSequence,bEnabled: boolean): void;
	static SetRateScale(AnimationSequence: AnimSequence,RateScale: number): void;
	static SetIsRootMotionLockForced(AnimationSequence: AnimSequence,bForced: boolean): void;
	static SetCompressionScheme(AnimationSequence: AnimSequence,CompressionScheme: AnimCompress): void;
	static SetAnimationInterpolationType(AnimationSequence: AnimSequence,InterpolationType: EAnimInterpolationType): void;
	static SetAdditiveBasePoseType(AnimationSequence: AnimSequence,AdditiveBasePoseType: EAdditiveBasePoseType): void;
	static SetAdditiveAnimationType(AnimationSequence: AnimSequence,AdditiveAnimationType: EAdditiveAnimationType): void;
	static RemoveVirtualBones(AnimationSequence: AnimSequence,VirtualBoneNames: string[]): void;
	static RemoveVirtualBone(AnimationSequence: AnimSequence,VirtualBoneName: string): void;
	static RemoveMetaDataOfClass(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass): void;
	static RemoveMetaData(AnimationSequence: AnimSequence,MetaDataObject: AnimMetaData): void;
	static RemoveCurve(AnimationSequence: AnimSequence,CurveName: string,bRemoveNameFromSkeleton: boolean): void;
	static RemoveBoneAnimation(AnimationSequence: AnimSequence,BoneName: string,bIncludeChildren: boolean,bFinalize: boolean): void;
	static RemoveAnimationSyncMarkersByTrack(AnimationSequence: AnimSequence,NotifyTrackName: string): number;
	static RemoveAnimationSyncMarkersByName(AnimationSequence: AnimSequence,MarkerName: string): number;
	static RemoveAnimationNotifyTrack(AnimationSequence: AnimSequence,NotifyTrackName: string): void;
	static RemoveAnimationNotifyEventsByTrack(AnimationSequence: AnimSequence,NotifyTrackName: string): number;
	static RemoveAnimationNotifyEventsByName(AnimationSequence: AnimSequence,NotifyName: string): number;
	static RemoveAllVirtualBones(AnimationSequence: AnimSequence): void;
	static RemoveAllMetaData(AnimationSequence: AnimSequence): void;
	static RemoveAllCurveData(AnimationSequence: AnimSequence): void;
	static RemoveAllBoneAnimation(AnimationSequence: AnimSequence): void;
	static RemoveAllAnimationSyncMarkers(AnimationSequence: AnimSequence): void;
	static RemoveAllAnimationNotifyTracks(AnimationSequence: AnimSequence): void;
	static IsValidTime(AnimationSequence: AnimSequence,Time: number,IsValid?: boolean): {IsValid: boolean};
	static IsValidRawAnimationTrackName(AnimationSequence: AnimSequence,TrackName: string): boolean;
	static IsValidAnimNotifyTrackName(AnimationSequence: AnimSequence,NotifyTrackName: string): boolean;
	static IsValidAnimationSyncMarkerName(AnimationSequence: AnimSequence,MarkerName: string): boolean;
	static IsRootMotionLockForced(AnimationSequence: AnimSequence): boolean;
	static IsRootMotionEnabled(AnimationSequence: AnimSequence): boolean;
	static GetVectorKeys(AnimationSequence: AnimSequence,CurveName: string,Times?: number[],Values?: Vector[]): {Times: number[], Values: Vector[]};
	static GetUniqueMarkerNames(AnimationSequence: AnimSequence,MarkerNames?: string[]): {MarkerNames: string[]};
	static GetTransformationKeys(AnimationSequence: AnimSequence,CurveName: string,Times?: number[],Values?: Transform[]): {Times: number[], Values: Transform[]};
	static GetTimeAtFrame(AnimationSequence: AnimSequence,Frame: number,Time?: number): {Time: number};
	static GetSequenceLength(AnimationSequence: AnimSequence,Length?: number): {Length: number};
	static GetRootMotionLockType(AnimationSequence: AnimSequence,LockType?: ERootMotionRootLock): {LockType: ERootMotionRootLock};
	static GetRawTrackScaleData(AnimationSequence: AnimSequence,TrackName: string,ScaleData?: Vector[]): {ScaleData: Vector[]};
	static GetRawTrackRotationData(AnimationSequence: AnimSequence,TrackName: string,RotationData?: Quat[]): {RotationData: Quat[]};
	static GetRawTrackPositionData(AnimationSequence: AnimSequence,TrackName: string,PositionData?: Vector[]): {PositionData: Vector[]};
	static GetRawTrackData(AnimationSequence: AnimSequence,TrackName: string,PositionKeys?: Vector[],RotationKeys?: Quat[],ScalingKeys?: Vector[]): {PositionKeys: Vector[], RotationKeys: Quat[], ScalingKeys: Vector[]};
	static GetRateScale(AnimationSequence: AnimSequence,RateScale?: number): {RateScale: number};
	static GetNumFrames(AnimationSequence: AnimSequence,NumFrames?: number): {NumFrames: number};
	static GetMetaDataOfClass(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass,MetaDataOfClass: AnimMetaData[]): void;
	static GetMetaData(AnimationSequence: AnimSequence,MetaData: AnimMetaData[]): void;
	static GetFrameAtTime(AnimationSequence: AnimSequence,Time: number,Frame?: number): {Frame: number};
	static GetFloatKeys(AnimationSequence: AnimSequence,CurveName: string,Times?: number[],Values?: number[]): {Times: number[], Values: number[]};
	static GetCompressionScheme(AnimationSequence: AnimSequence,CompressionScheme?: AnimCompress): {CompressionScheme: AnimCompress};
	static GetBonePosesForTime(AnimationSequence: AnimSequence,BoneNames: string[],Time: number,bExtractRootMotion: boolean,Poses?: Transform[],PreviewMesh?: SkeletalMesh): {Poses: Transform[]};
	static GetBonePosesForFrame(AnimationSequence: AnimSequence,BoneNames: string[],Frame: number,bExtractRootMotion: boolean,Poses?: Transform[],PreviewMesh?: SkeletalMesh): {Poses: Transform[]};
	static GetBonePoseForTime(AnimationSequence: AnimSequence,BoneName: string,Time: number,bExtractRootMotion: boolean,Pose?: Transform): {Pose: Transform};
	static GetBonePoseForFrame(AnimationSequence: AnimSequence,BoneName: string,Frame: number,bExtractRootMotion: boolean,Pose?: Transform): {Pose: Transform};
	static GetAnimNotifyEventTriggerTime(NotifyEvent: AnimNotifyEvent): number;
	static GetAnimationTrackNames(AnimationSequence: AnimSequence,TrackNames?: string[]): {TrackNames: string[]};
	static GetAnimationSyncMarkersForTrack(AnimationSequence: AnimSequence,NotifyTrackName: string,Markers?: AnimSyncMarker[]): {Markers: AnimSyncMarker[]};
	static GetAnimationSyncMarkers(AnimationSequence: AnimSequence,Markers?: AnimSyncMarker[]): {Markers: AnimSyncMarker[]};
	static GetAnimationNotifyTrackNames(AnimationSequence: AnimSequence,TrackNames?: string[]): {TrackNames: string[]};
	static GetAnimationNotifyEventsForTrack(AnimationSequence: AnimSequence,NotifyTrackName: string,Events?: AnimNotifyEvent[]): {Events: AnimNotifyEvent[]};
	static GetAnimationNotifyEvents(AnimationSequence: AnimSequence,NotifyEvents?: AnimNotifyEvent[]): {NotifyEvents: AnimNotifyEvent[]};
	static GetAnimationNotifyEventNames(AnimationSequence: AnimSequence,EventNames?: string[]): {EventNames: string[]};
	static GetAnimationInterpolationType(AnimationSequence: AnimSequence,InterpolationType?: EAnimInterpolationType): {InterpolationType: EAnimInterpolationType};
	static GetAdditiveBasePoseType(AnimationSequence: AnimSequence,AdditiveBasePoseType?: EAdditiveBasePoseType): {AdditiveBasePoseType: EAdditiveBasePoseType};
	static GetAdditiveAnimationType(AnimationSequence: AnimSequence,AdditiveAnimationType?: EAdditiveAnimationType): {AdditiveAnimationType: EAdditiveAnimationType};
	static FindBonePathToRoot(AnimationSequence: AnimSequence,BoneName: string,BonePath?: string[]): {BonePath: string[]};
	static FinalizeBoneAnimation(AnimationSequence: AnimSequence): void;
	static DoesCurveExist(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes): boolean;
	static DoesBoneNameExist(AnimationSequence: AnimSequence,BoneName: string,bExists?: boolean): {bExists: boolean};
	static ContainsMetaDataOfClass(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass): boolean;
	static AddVirtualBone(AnimationSequence: AnimSequence,SourceBoneName: string,TargetBoneName: string,VirtualBoneName?: string): {VirtualBoneName: string};
	static AddVectorCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Vectors: Vector[]): void;
	static AddVectorCurveKey(AnimationSequence: AnimSequence,CurveName: string,Time: number,Vector: Vector): void;
	static AddTransformationCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Transforms: Transform[]): void;
	static AddTransformationCurveKey(AnimationSequence: AnimSequence,CurveName: string,Time: number,Transform: Transform): void;
	static AddMetaDataObject(AnimationSequence: AnimSequence,MetaDataObject: AnimMetaData): void;
	static AddMetaData(AnimationSequence: AnimSequence,MetaDataClass: UnrealEngineClass,MetaDataInstance: AnimMetaData): void;
	static AddFloatCurveKeys(AnimationSequence: AnimSequence,CurveName: string,Times: number[],Values: number[]): void;
	static AddFloatCurveKey(AnimationSequence: AnimSequence,CurveName: string,Time: number,Value: number): void;
	static AddCurve(AnimationSequence: AnimSequence,CurveName: string,CurveType: ERawCurveTrackTypes,bMetaDataCurve: boolean): void;
	static AddAnimationSyncMarker(AnimationSequence: AnimSequence,MarkerName: string,Time: number,NotifyTrackName: string): void;
	static AddAnimationNotifyTrack(AnimationSequence: AnimSequence,NotifyTrackName: string,TrackColor: LinearColor): void;
	static AddAnimationNotifyEventObject(AnimationSequence: AnimSequence,StartTime: number,Notify: AnimNotify,NotifyTrackName: string): void;
	static AddAnimationNotifyEvent(AnimationSequence: AnimSequence,NotifyTrackName: string,StartTime: number,Duration: number,NotifyClass: UnrealEngineClass): AnimNotify;
	static C(Other: UObject | any): AnimationBlueprintLibrary;
}

declare class AnimationModifier extends UObject { 
	RevisionGuid: Guid;
	AppliedGuid: Guid;
	StoredNativeRevision: number;
	static Load(ResourceName: string): AnimationModifier;
	static Find(Outer: UObject, ResourceName: string): AnimationModifier;
	static GetDefaultObject(): AnimationModifier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationModifier;
	OnRevert(AnimationSequence: AnimSequence): void;
	OnApply(AnimationSequence: AnimSequence): void;
	static C(Other: UObject | any): AnimationModifier;
}

declare class AnimationModifiersAssetUserData extends AssetUserData { 
	AnimationModifierInstances: AnimationModifier[];
	static Load(ResourceName: string): AnimationModifiersAssetUserData;
	static Find(Outer: UObject, ResourceName: string): AnimationModifiersAssetUserData;
	static GetDefaultObject(): AnimationModifiersAssetUserData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationModifiersAssetUserData;
	static C(Other: UObject | any): AnimationModifiersAssetUserData;
}

declare class DatasmithObjectTemplate extends UObject { 
	static Load(ResourceName: string): DatasmithObjectTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithObjectTemplate;
	static GetDefaultObject(): DatasmithObjectTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithObjectTemplate;
	static C(Other: UObject | any): DatasmithObjectTemplate;
}

declare class DatasmithActorTemplate extends DatasmithObjectTemplate { 
	Layers: any;
	Tags: any;
	static Load(ResourceName: string): DatasmithActorTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithActorTemplate;
	static GetDefaultObject(): DatasmithActorTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithActorTemplate;
	static C(Other: UObject | any): DatasmithActorTemplate;
}

declare type EDatasmithAreaLightActorShape = 'Rectangle' | 'Disc' | 'Sphere' | 'Cylinder' | 'EDatasmithAreaLightActorShape_MAX';
declare var EDatasmithAreaLightActorShape : { Rectangle:'Rectangle',Disc:'Disc',Sphere:'Sphere',Cylinder:'Cylinder',EDatasmithAreaLightActorShape_MAX:'EDatasmithAreaLightActorShape_MAX', };
declare class DatasmithAreaLightActor extends Actor { 
	LightShape: EDatasmithAreaLightActorShape;
	Dimensions: Vector2D;
	Color: LinearColor;
	Intensity: number;
	static GetDefaultObject(): DatasmithAreaLightActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAreaLightActor;
	static C(Other: UObject | any): DatasmithAreaLightActor;
}

declare class DatasmithAreaLightActorTemplate extends DatasmithObjectTemplate { 
	LightShape: EDatasmithAreaLightActorShape;
	Dimensions: Vector2D;
	Color: LinearColor;
	Intensity: number;
	bHidden: boolean;
	static Load(ResourceName: string): DatasmithAreaLightActorTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithAreaLightActorTemplate;
	static GetDefaultObject(): DatasmithAreaLightActorTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAreaLightActorTemplate;
	static C(Other: UObject | any): DatasmithAreaLightActorTemplate;
}

declare class DatasmithAssetImportOptions { 
	PackagePath: string;
	clone() : DatasmithAssetImportOptions;
	static C(Other: UObject | any): DatasmithAssetImportOptions;
}

declare class DatasmithAssetImportData extends AssetImportData { 
	AssetImportOptions: DatasmithAssetImportOptions;
	static Load(ResourceName: string): DatasmithAssetImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithAssetImportData;
	static GetDefaultObject(): DatasmithAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithAssetImportData;
	static C(Other: UObject | any): DatasmithAssetImportData;
}

declare type EDatasmithImportLightmapMin = 'LIGHTMAP_16' | 'LIGHTMAP_32' | 'LIGHTMAP_64' | 'LIGHTMAP_128' | 'LIGHTMAP_256' | 'LIGHTMAP_512' | 'LIGHTMAP_MAX';
declare var EDatasmithImportLightmapMin : { LIGHTMAP_16:'LIGHTMAP_16',LIGHTMAP_32:'LIGHTMAP_32',LIGHTMAP_64:'LIGHTMAP_64',LIGHTMAP_128:'LIGHTMAP_128',LIGHTMAP_256:'LIGHTMAP_256',LIGHTMAP_512:'LIGHTMAP_512',LIGHTMAP_MAX:'LIGHTMAP_MAX', };
declare type EDatasmithImportLightmapMax = 'LIGHTMAP_64' | 'LIGHTMAP_128' | 'LIGHTMAP_256' | 'LIGHTMAP_512' | 'LIGHTMAP_1024' | 'LIGHTMAP_2048' | 'LIGHTMAP_4096' | 'LIGHTMAP_MAX';
declare var EDatasmithImportLightmapMax : { LIGHTMAP_64:'LIGHTMAP_64',LIGHTMAP_128:'LIGHTMAP_128',LIGHTMAP_256:'LIGHTMAP_256',LIGHTMAP_512:'LIGHTMAP_512',LIGHTMAP_1024:'LIGHTMAP_1024',LIGHTMAP_2048:'LIGHTMAP_2048',LIGHTMAP_4096:'LIGHTMAP_4096',LIGHTMAP_MAX:'LIGHTMAP_MAX', };
declare class DatasmithStaticMeshImportOptions { 
	MinLightmapResolution: EDatasmithImportLightmapMin;
	MaxLightmapResolution: EDatasmithImportLightmapMax;
	bGenerateLightmapUVs: boolean;
	bRemoveDegenerates: boolean;
	clone() : DatasmithStaticMeshImportOptions;
	static C(Other: UObject | any): DatasmithStaticMeshImportOptions;
}

declare class DatasmithStaticMeshImportData extends DatasmithAssetImportData { 
	ImportOptions: DatasmithStaticMeshImportOptions;
	static Load(ResourceName: string): DatasmithStaticMeshImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshImportData;
	static GetDefaultObject(): DatasmithStaticMeshImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshImportData;
	static C(Other: UObject | any): DatasmithStaticMeshImportData;
}

declare class DatasmithTessellationOptions { 
	ChordTolerance: number;
	MaxEdgeLength: number;
	NormalTolerance: number;
	clone() : DatasmithTessellationOptions;
	static C(Other: UObject | any): DatasmithTessellationOptions;
}

declare class DatasmithStaticMeshCADImportData extends DatasmithStaticMeshImportData { 
	TessellationOptions: DatasmithTessellationOptions;
	ModelUnit: any;
	ModelTolerance: any;
	ResourcePath: string;
	ResourceFilename: string;
	AuxiliaryFilenames: string[];
	static Load(ResourceName: string): DatasmithStaticMeshCADImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshCADImportData;
	static GetDefaultObject(): DatasmithStaticMeshCADImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshCADImportData;
	static C(Other: UObject | any): DatasmithStaticMeshCADImportData;
}

declare type EDatasmithImportScene = 'NewLevel' | 'CurrentLevel' | 'AssetsOnly' | 'EDatasmithImportScene_MAX';
declare var EDatasmithImportScene : { NewLevel:'NewLevel',CurrentLevel:'CurrentLevel',AssetsOnly:'AssetsOnly',EDatasmithImportScene_MAX:'EDatasmithImportScene_MAX', };
declare class DatasmithImportBaseOptions { 
	SceneHandling: EDatasmithImportScene;
	bIncludeGeometry: boolean;
	bIncludeMaterial: boolean;
	bIncludeLight: boolean;
	bIncludeCamera: boolean;
	AssetOptions: DatasmithAssetImportOptions;
	StaticMeshOptions: DatasmithStaticMeshImportOptions;
	clone() : DatasmithImportBaseOptions;
	static C(Other: UObject | any): DatasmithImportBaseOptions;
}

declare class DatasmithSceneImportData extends AssetImportData { 
	BaseOptions: DatasmithImportBaseOptions;
	static Load(ResourceName: string): DatasmithSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithSceneImportData;
	static GetDefaultObject(): DatasmithSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSceneImportData;
	static C(Other: UObject | any): DatasmithSceneImportData;
}

declare class DatasmithCADImportSceneData extends DatasmithSceneImportData { 
	TessellationOptions: DatasmithTessellationOptions;
	static Load(ResourceName: string): DatasmithCADImportSceneData;
	static Find(Outer: UObject, ResourceName: string): DatasmithCADImportSceneData;
	static GetDefaultObject(): DatasmithCADImportSceneData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCADImportSceneData;
	static C(Other: UObject | any): DatasmithCADImportSceneData;
}

declare class DatasmithMDLSceneImportData extends DatasmithSceneImportData { 
	static Load(ResourceName: string): DatasmithMDLSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithMDLSceneImportData;
	static GetDefaultObject(): DatasmithMDLSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithMDLSceneImportData;
	static C(Other: UObject | any): DatasmithMDLSceneImportData;
}

declare class DatasmithDeltaGenAssetImportData extends DatasmithAssetImportData { 
	static Load(ResourceName: string): DatasmithDeltaGenAssetImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithDeltaGenAssetImportData;
	static GetDefaultObject(): DatasmithDeltaGenAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithDeltaGenAssetImportData;
	static C(Other: UObject | any): DatasmithDeltaGenAssetImportData;
}

declare class DatasmithDeltaGenSceneImportData extends DatasmithSceneImportData { 
	static Load(ResourceName: string): DatasmithDeltaGenSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithDeltaGenSceneImportData;
	static GetDefaultObject(): DatasmithDeltaGenSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithDeltaGenSceneImportData;
	static C(Other: UObject | any): DatasmithDeltaGenSceneImportData;
}

declare class DatasmithVREDAssetImportData extends DatasmithAssetImportData { 
	static Load(ResourceName: string): DatasmithVREDAssetImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithVREDAssetImportData;
	static GetDefaultObject(): DatasmithVREDAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithVREDAssetImportData;
	static C(Other: UObject | any): DatasmithVREDAssetImportData;
}

declare class DatasmithVREDSceneImportData extends DatasmithSceneImportData { 
	static Load(ResourceName: string): DatasmithVREDSceneImportData;
	static Find(Outer: UObject, ResourceName: string): DatasmithVREDSceneImportData;
	static GetDefaultObject(): DatasmithVREDSceneImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithVREDSceneImportData;
	static C(Other: UObject | any): DatasmithVREDSceneImportData;
}

declare class DatasmithCameraFilmbackSettingsTemplate { 
	SensorWidth: number;
	SensorHeight: number;
	clone() : DatasmithCameraFilmbackSettingsTemplate;
	static C(Other: UObject | any): DatasmithCameraFilmbackSettingsTemplate;
}

declare class DatasmithCameraLensSettingsTemplate { 
	MaxFStop: number;
	clone() : DatasmithCameraLensSettingsTemplate;
	static C(Other: UObject | any): DatasmithCameraLensSettingsTemplate;
}

declare class DatasmithCameraFocusSettingsTemplate { 
	FocusMethod: ECameraFocusMethod;
	ManualFocusDistance: number;
	clone() : DatasmithCameraFocusSettingsTemplate;
	static C(Other: UObject | any): DatasmithCameraFocusSettingsTemplate;
}

declare class DatasmithPostProcessSettingsTemplate { 
	bOverride_WhiteTemp: boolean;
	bOverride_ColorSaturation: boolean;
	bOverride_VignetteIntensity: boolean;
	bOverride_FilmWhitePoint: boolean;
	bOverride_AutoExposureMethod: boolean;
	bOverride_CameraISO: boolean;
	WhiteTemp: number;
	VignetteIntensity: number;
	FilmWhitePoint: LinearColor;
	ColorSaturation: Vector4;
	AutoExposureMethod: EAutoExposureMethod;
	CameraISO: number;
	clone() : DatasmithPostProcessSettingsTemplate;
	static C(Other: UObject | any): DatasmithPostProcessSettingsTemplate;
}

declare class DatasmithCineCameraComponentTemplate extends DatasmithObjectTemplate { 
	FilmbackSettings: DatasmithCameraFilmbackSettingsTemplate;
	LensSettings: DatasmithCameraLensSettingsTemplate;
	FocusSettings: DatasmithCameraFocusSettingsTemplate;
	CurrentFocalLength: number;
	CurrentAperture: number;
	PostProcessSettings: DatasmithPostProcessSettingsTemplate;
	static Load(ResourceName: string): DatasmithCineCameraComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithCineCameraComponentTemplate;
	static GetDefaultObject(): DatasmithCineCameraComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithCineCameraComponentTemplate;
	static C(Other: UObject | any): DatasmithCineCameraComponentTemplate;
}

declare class DatasmithContentBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): DatasmithContentBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): DatasmithContentBlueprintLibrary;
	static GetDefaultObject(): DatasmithContentBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithContentBlueprintLibrary;
	static GetDatasmithUserDataValueForKey(UObject: UObject,Key: string): string;
	static GetDatasmithUserDataKeysAndValuesForValue(UObject: UObject,StringToMatch: string,OutKeys?: string[],OutValues?: string[]): {OutKeys: string[], OutValues: string[]};
	static GetDatasmithUserData(UObject: UObject): DatasmithAssetUserData;
	static GetAllObjectsAndValuesForKey(Key: string,ObjectClass: UnrealEngineClass,OutObjects?: UObject[],OutValues?: string[]): {OutObjects: UObject[], OutValues: string[]};
	static GetAllDatasmithUserData(ObjectClass: UnrealEngineClass,OutUserData?: DatasmithAssetUserData[]): {OutUserData: DatasmithAssetUserData[]};
	static C(Other: UObject | any): DatasmithContentBlueprintLibrary;
}

declare type EDatasmithImportSearchPackagePolicy = 'Current' | 'All' | 'EDatasmithImportSearchPackagePolicy_MAX';
declare var EDatasmithImportSearchPackagePolicy : { Current:'Current',All:'All',EDatasmithImportSearchPackagePolicy_MAX:'EDatasmithImportSearchPackagePolicy_MAX', };
declare type EDatasmithImportAssetConflictPolicy = 'Replace' | 'Update' | 'Use' | 'Ignore' | 'EDatasmithImportAssetConflictPolicy_MAX';
declare var EDatasmithImportAssetConflictPolicy : { Replace:'Replace',Update:'Update',Use:'Use',Ignore:'Ignore',EDatasmithImportAssetConflictPolicy_MAX:'EDatasmithImportAssetConflictPolicy_MAX', };
declare type EDatasmithImportActorPolicy = 'Update' | 'Full' | 'Ignore' | 'EDatasmithImportActorPolicy_MAX';
declare var EDatasmithImportActorPolicy : { Update:'Update',Full:'Full',Ignore:'Ignore',EDatasmithImportActorPolicy_MAX:'EDatasmithImportActorPolicy_MAX', };
declare type EDatasmithImportMaterialQuality = 'UseNoFresnelCurves' | 'UseSimplifierFresnelCurves' | 'UseRealFresnelCurves' | 'EDatasmithImportMaterialQuality_MAX';
declare var EDatasmithImportMaterialQuality : { UseNoFresnelCurves:'UseNoFresnelCurves',UseSimplifierFresnelCurves:'UseSimplifierFresnelCurves',UseRealFresnelCurves:'UseRealFresnelCurves',EDatasmithImportMaterialQuality_MAX:'EDatasmithImportMaterialQuality_MAX', };
declare class DatasmithReimportOptions { 
	bUpdateActors: boolean;
	bRespawnDeletedActors: boolean;
	clone() : DatasmithReimportOptions;
	static C(Other: UObject | any): DatasmithReimportOptions;
}

declare class DatasmithImportOptions extends UObject { 
	SearchPackagePolicy: EDatasmithImportSearchPackagePolicy;
	MaterialConflictPolicy: EDatasmithImportAssetConflictPolicy;
	TextureConflictPolicy: EDatasmithImportAssetConflictPolicy;
	StaticMeshActorImportPolicy: EDatasmithImportActorPolicy;
	LightImportPolicy: EDatasmithImportActorPolicy;
	CameraImportPolicy: EDatasmithImportActorPolicy;
	OtherActorImportPolicy: EDatasmithImportActorPolicy;
	MaterialQuality: EDatasmithImportMaterialQuality;
	BaseOptions: DatasmithImportBaseOptions;
	TessellationOptions: DatasmithTessellationOptions;
	ReimportOptions: DatasmithReimportOptions;
	static Load(ResourceName: string): DatasmithImportOptions;
	static Find(Outer: UObject, ResourceName: string): DatasmithImportOptions;
	static GetDefaultObject(): DatasmithImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithImportOptions;
	static C(Other: UObject | any): DatasmithImportOptions;
}

declare class DatasmithLandscapeTemplate extends DatasmithObjectTemplate { 
	LandscapeMaterial: MaterialInterface;
	StaticLightingLOD: number;
	static Load(ResourceName: string): DatasmithLandscapeTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithLandscapeTemplate;
	static GetDefaultObject(): DatasmithLandscapeTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithLandscapeTemplate;
	static C(Other: UObject | any): DatasmithLandscapeTemplate;
}

declare class DatasmithLightComponentTemplate extends DatasmithObjectTemplate { 
	bVisible: boolean;
	CastShadows: boolean;
	bUseTemperature: boolean;
	bUseIESBrightness: boolean;
	Intensity: number;
	Temperature: number;
	IESBrightnessScale: number;
	LightColor: LinearColor;
	LightFunctionMaterial: MaterialInterface;
	IESTexture: TextureLightProfile;
	static Load(ResourceName: string): DatasmithLightComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithLightComponentTemplate;
	static GetDefaultObject(): DatasmithLightComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithLightComponentTemplate;
	static C(Other: UObject | any): DatasmithLightComponentTemplate;
}

declare class DatasmithPointLightComponentTemplate extends DatasmithObjectTemplate { 
	IntensityUnits: ELightUnits;
	SourceRadius: number;
	SourceLength: number;
	AttenuationRadius: number;
	static Load(ResourceName: string): DatasmithPointLightComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithPointLightComponentTemplate;
	static GetDefaultObject(): DatasmithPointLightComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithPointLightComponentTemplate;
	static C(Other: UObject | any): DatasmithPointLightComponentTemplate;
}

declare class DatasmithScene extends UObject { 
	AssetImportData: DatasmithSceneImportData;
	BulkDataVersion: number;
	static Load(ResourceName: string): DatasmithScene;
	static Find(Outer: UObject, ResourceName: string): DatasmithScene;
	static GetDefaultObject(): DatasmithScene;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithScene;
	static C(Other: UObject | any): DatasmithScene;
}

declare class DatasmithSceneActor extends Actor { 
	Scene: DatasmithScene;
	RelatedActors: any;
	static GetDefaultObject(): DatasmithSceneActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSceneActor;
	static C(Other: UObject | any): DatasmithSceneActor;
}

declare class DatasmithSceneComponentTemplate extends DatasmithObjectTemplate { 
	RelativeTransform: Transform;
	Mobility: EComponentMobility;
	AttachParent: SceneComponent;
	Tags: any;
	static Load(ResourceName: string): DatasmithSceneComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithSceneComponentTemplate;
	static GetDefaultObject(): DatasmithSceneComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSceneComponentTemplate;
	static C(Other: UObject | any): DatasmithSceneComponentTemplate;
}

declare class DatasmithSkyLightComponentTemplate extends DatasmithObjectTemplate { 
	SourceType: ESkyLightSourceType;
	CubemapResolution: number;
	Cubemap: TextureCube;
	static Load(ResourceName: string): DatasmithSkyLightComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithSkyLightComponentTemplate;
	static GetDefaultObject(): DatasmithSkyLightComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSkyLightComponentTemplate;
	static C(Other: UObject | any): DatasmithSkyLightComponentTemplate;
}

declare class DatasmithSpotLightComponentTemplate extends DatasmithObjectTemplate { 
	InnerConeAngle: number;
	OuterConeAngle: number;
	static Load(ResourceName: string): DatasmithSpotLightComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithSpotLightComponentTemplate;
	static GetDefaultObject(): DatasmithSpotLightComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithSpotLightComponentTemplate;
	static C(Other: UObject | any): DatasmithSpotLightComponentTemplate;
}

declare class DatasmithStaticMeshComponentTemplate extends DatasmithSceneComponentTemplate { 
	StaticMesh: StaticMesh;
	OverrideMaterials: MaterialInterface[];
	static Load(ResourceName: string): DatasmithStaticMeshComponentTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshComponentTemplate;
	static GetDefaultObject(): DatasmithStaticMeshComponentTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshComponentTemplate;
	static C(Other: UObject | any): DatasmithStaticMeshComponentTemplate;
}

declare class DatasmithMeshSectionInfoMapTemplate { 
	Map: any;
	clone() : DatasmithMeshSectionInfoMapTemplate;
	static C(Other: UObject | any): DatasmithMeshSectionInfoMapTemplate;
}

declare class DatasmithMeshBuildSettingsTemplate { 
	bUseMikkTSpace: boolean;
	bRecomputeNormals: boolean;
	bRecomputeTangents: boolean;
	bRemoveDegenerates: boolean;
	bBuildAdjacencyBuffer: boolean;
	bUseHighPrecisionTangentBasis: boolean;
	bUseFullPrecisionUVs: boolean;
	bGenerateLightmapUVs: boolean;
	MinLightmapResolution: number;
	SrcLightmapIndex: number;
	DstLightmapIndex: number;
	clone() : DatasmithMeshBuildSettingsTemplate;
	static C(Other: UObject | any): DatasmithMeshBuildSettingsTemplate;
}

declare class DatasmithStaticMaterialTemplate { 
	MaterialSlotName: string;
	MaterialInterface: MaterialInterface;
	clone() : DatasmithStaticMaterialTemplate;
	static C(Other: UObject | any): DatasmithStaticMaterialTemplate;
}

declare class DatasmithStaticMeshTemplate extends DatasmithObjectTemplate { 
	SectionInfoMap: DatasmithMeshSectionInfoMapTemplate;
	LightMapCoordinateIndex: number;
	LightMapResolution: number;
	BuildSettings: DatasmithMeshBuildSettingsTemplate[];
	StaticMaterials: DatasmithStaticMaterialTemplate[];
	static Load(ResourceName: string): DatasmithStaticMeshTemplate;
	static Find(Outer: UObject, ResourceName: string): DatasmithStaticMeshTemplate;
	static GetDefaultObject(): DatasmithStaticMeshTemplate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DatasmithStaticMeshTemplate;
	static C(Other: UObject | any): DatasmithStaticMeshTemplate;
}

declare class MRMeshComponent extends PrimitiveComponent { 
	Material: MaterialInterface;
	bCreateMeshProxySections: boolean;
	bUpdateNavMeshOnMeshUpdate: boolean;
	BodySetups: BodySetup[];
	static Load(ResourceName: string): MRMeshComponent;
	static Find(Outer: UObject, ResourceName: string): MRMeshComponent;
	static GetDefaultObject(): MRMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MRMeshComponent;
	IsConnected(): boolean;
	ForceNavMeshUpdate(): void;
	Clear(): void;
	static C(Other: UObject | any): MRMeshComponent;
}

declare class MeshReconstructorBase extends UObject { 
	static Load(ResourceName: string): MeshReconstructorBase;
	static Find(Outer: UObject, ResourceName: string): MeshReconstructorBase;
	static GetDefaultObject(): MeshReconstructorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshReconstructorBase;
	StopReconstruction(): void;
	StartReconstruction(): void;
	PauseReconstruction(): void;
	IsReconstructionStarted(): boolean;
	IsReconstructionPaused(): boolean;
	DisconnectMRMesh(): void;
	ConnectMRMesh(Mesh: MRMeshComponent): void;
	static C(Other: UObject | any): MeshReconstructorBase;
}

declare class MagicLeapSecureStorage extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MagicLeapSecureStorage;
	static Find(Outer: UObject, ResourceName: string): MagicLeapSecureStorage;
	static GetDefaultObject(): MagicLeapSecureStorage;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapSecureStorage;
	static PutSecureVector(Key: string,DataToStore: Vector): boolean;
	static PutSecureTransform(Key: string,DataToStore: Transform): boolean;
	static PutSecureString(Key: string,DataToStore: string): boolean;
	static PutSecureRotator(Key: string,DataToStore: Rotator): boolean;
	static PutSecureInt(Key: string,DataToStore: number): boolean;
	static PutSecureFloat(Key: string,DataToStore: number): boolean;
	static PutSecureByte(Key: string,DataToStore: number): boolean;
	static PutSecureBool(Key: string,DataToStore: boolean): boolean;
	static GetSecureVector(Key: string,DataToRetrieve?: Vector): {DataToRetrieve: Vector, $: boolean};
	static GetSecureTransform(Key: string,DataToRetrieve?: Transform): {DataToRetrieve: Transform, $: boolean};
	static GetSecureString(Key: string,DataToRetrieve?: string): {DataToRetrieve: string, $: boolean};
	static GetSecureRotator(Key: string,DataToRetrieve?: Rotator): {DataToRetrieve: Rotator, $: boolean};
	static GetSecureInt(Key: string,DataToRetrieve?: number): {DataToRetrieve: number, $: boolean};
	static GetSecureFloat(Key: string,DataToRetrieve?: number): {DataToRetrieve: number, $: boolean};
	static GetSecureByte(Key: string,DataToRetrieve?: number): {DataToRetrieve: number, $: boolean};
	static GetSecureBool(Key: string,DataToRetrieve?: boolean): {DataToRetrieve: boolean, $: boolean};
	static DeleteSecureData(Key: string): boolean;
	static C(Other: UObject | any): MagicLeapSecureStorage;
}

declare class CameraCaptureComponent extends ActorComponent { 
	CaptureLogMessage: UnrealEngineMulticastDelegate<(LogMessage: string) => void>;
	CaptureImgToFileSuccess: UnrealEngineMulticastDelegate<(FilePath: string) => void>;
	CaptureImgToFileFailure: UnrealEngineMulticastDelegate<() => void>;
	CaptureImgToTextureSuccess: UnrealEngineMulticastDelegate<(CaptureTexture: Texture2D) => void>;
	CaptureImgToTextureFailure: UnrealEngineMulticastDelegate<() => void>;
	CaptureVidToFileSuccess: UnrealEngineMulticastDelegate<(FilePath: string) => void>;
	CaptureVidToFileFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): CameraCaptureComponent;
	static Find(Outer: UObject, ResourceName: string): CameraCaptureComponent;
	static GetDefaultObject(): CameraCaptureComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CameraCaptureComponent;
	CaptureVideoToFileAsync(VideoLength: number): boolean;
	CaptureImageToTextureAsync(): boolean;
	CaptureImageToFileAsync(): boolean;
	static C(Other: UObject | any): CameraCaptureComponent;
}

declare class ImageTrackerComponent extends SceneComponent { 
	OnSetImageTargetSucceeded: UnrealEngineMulticastDelegate<() => void>;
	OnSetImageTargetFailed: UnrealEngineMulticastDelegate<() => void>;
	OnImageTargetFound: UnrealEngineMulticastDelegate<() => void>;
	OnImageTargetLost: UnrealEngineMulticastDelegate<() => void>;
	OnImageTargetUnreliableTracking: UnrealEngineMulticastDelegate<(LastTrackedLocation: Vector, LastTrackedRotation: Rotator, NewUnreliableLocation: Vector, NewUnreliableRotation: Rotator) => void>;
	TargetImageTexture: Texture2D;
	Name: string;
	LongerDimension: number;
	bIsStationary: boolean;
	bUseUnreliablePose: boolean;
	static Load(ResourceName: string): ImageTrackerComponent;
	static Find(Outer: UObject, ResourceName: string): ImageTrackerComponent;
	static GetDefaultObject(): ImageTrackerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageTrackerComponent;
	SetTargetAsync(ImageTarget: Texture2D): void;
	static C(Other: UObject | any): ImageTrackerComponent;
}

declare class ImageTrackerFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): ImageTrackerFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): ImageTrackerFunctionLibrary;
	static GetDefaultObject(): ImageTrackerFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ImageTrackerFunctionLibrary;
	static SetMaxSimultaneousTargets(MaxSimultaneousTargets: number): void;
	static IsImageTrackingEnabled(): boolean;
	static GetMaxSimultaneousTargets(): number;
	static EnableImageTracking(bEnable: boolean): void;
	static C(Other: UObject | any): ImageTrackerFunctionLibrary;
}

declare type PurchaseType = 'Consumable' | 'Nonconsumable' | 'Undefined' | 'PurchaseType_MAX';
declare var PurchaseType : { Consumable:'Consumable',Nonconsumable:'Nonconsumable',Undefined:'Undefined',PurchaseType_MAX:'PurchaseType_MAX', };
declare class PurchaseItemDetails { 
	Price: string;
	Name: string;
	Type: PurchaseType;
	clone() : PurchaseItemDetails;
	static C(Other: UObject | any): PurchaseItemDetails;
}

declare class PurchaseConfirmation { 
	PackageName: string;
	Type: PurchaseType;
	clone() : PurchaseConfirmation;
	static C(Other: UObject | any): PurchaseConfirmation;
}

declare class InAppPurchaseComponent extends ActorComponent { 
	InAppPurchaseLogMessage: UnrealEngineMulticastDelegate<(LogMessage: string) => void>;
	GetItemsDetailsSuccess: UnrealEngineMulticastDelegate<(ItemsDetails: PurchaseItemDetails[]) => void>;
	GetItemsDetailsFailure: UnrealEngineMulticastDelegate<() => void>;
	PurchaseConfirmationSuccess: UnrealEngineMulticastDelegate<(PurchaseConfirmations: PurchaseConfirmation) => void>;
	PurchaseConfirmationFailure: UnrealEngineMulticastDelegate<() => void>;
	GetPurchaseHistorySuccess: UnrealEngineMulticastDelegate<(PurchaseHistory: PurchaseConfirmation[]) => void>;
	GetPurchaseHistoryFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): InAppPurchaseComponent;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseComponent;
	static GetDefaultObject(): InAppPurchaseComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseComponent;
	TryPurchaseItemAsync(ItemDetails: PurchaseItemDetails): boolean;
	TryGetPurchaseHistoryAsync(InNumPages: number): boolean;
	TryGetItemsDetailsAsync(ItemIDs: string[]): boolean;
	static C(Other: UObject | any): InAppPurchaseComponent;
}

declare class LightingTrackingComponent extends ActorComponent { 
	UseGlobalAmbience: boolean;
	UseColorTemp: boolean;
	static Load(ResourceName: string): LightingTrackingComponent;
	static Find(Outer: UObject, ResourceName: string): LightingTrackingComponent;
	static GetDefaultObject(): LightingTrackingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightingTrackingComponent;
	static C(Other: UObject | any): LightingTrackingComponent;
}

declare class MagicLeapARPinFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MagicLeapARPinFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MagicLeapARPinFunctionLibrary;
	static GetDefaultObject(): MagicLeapARPinFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapARPinFunctionLibrary;
	static GetNumAvailableARPins(Count?: number): {Count: number, $: EPassableWorldError};
	static GetClosestARPin(SearchPoint: Vector,PinID?: Guid): {PinID: Guid, $: EPassableWorldError};
	static GetAvailableARPins(NumRequested: number,Pins?: Guid[]): {Pins: Guid[], $: EPassableWorldError};
	static GetARPinPositionAndOrientation(PinID: Guid,Position?: Vector,Orientation?: Rotator,PinFoundInEnvironment?: boolean): {Position: Vector, Orientation: Rotator, PinFoundInEnvironment: boolean, $: boolean};
	static C(Other: UObject | any): MagicLeapARPinFunctionLibrary;
}

declare type EAutoPinType = 'OnlyOnDataRestoration' | 'Always' | 'Never' | 'EAutoPinType_MAX';
declare var EAutoPinType : { OnlyOnDataRestoration:'OnlyOnDataRestoration',Always:'Always',Never:'Never',EAutoPinType_MAX:'EAutoPinType_MAX', };
declare class MagicLeapARPinComponent extends SceneComponent { 
	ObjectUID: string;
	AutoPinType: EAutoPinType;
	bShouldPinActor: boolean;
	OnPersistentEntityPinned: UnrealEngineMulticastDelegate<(bRestoredOrSynced: boolean) => void>;
	PinnedCFUID: Guid;
	PinnedSceneComponent: SceneComponent;
	static Load(ResourceName: string): MagicLeapARPinComponent;
	static Find(Outer: UObject, ResourceName: string): MagicLeapARPinComponent;
	static GetDefaultObject(): MagicLeapARPinComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapARPinComponent;
	UnPin(): void;
	PinSceneComponent(ComponentToPin: SceneComponent): boolean;
	PinRestoredOrSynced(): boolean;
	PinActor(ActorToPin: Actor): boolean;
	IsPinned(): boolean;
	GetPinnedPinID(PinID?: Guid): {PinID: Guid, $: boolean};
	static C(Other: UObject | any): MagicLeapARPinComponent;
}

declare type EHeadTrackingMode = 'PositionAndOrientation' | 'OrientationOnly' | 'Unknown' | 'EHeadTrackingMode_MAX';
declare var EHeadTrackingMode : { PositionAndOrientation:'PositionAndOrientation',OrientationOnly:'OrientationOnly',Unknown:'Unknown',EHeadTrackingMode_MAX:'EHeadTrackingMode_MAX', };
declare type EHeadTrackingError = 'None' | 'NotEnoughFeatures' | 'LowLight' | 'Unknown' | 'EHeadTrackingError_MAX';
declare var EHeadTrackingError : { None:'None',NotEnoughFeatures:'NotEnoughFeatures',LowLight:'LowLight',Unknown:'Unknown',EHeadTrackingError_MAX:'EHeadTrackingError_MAX', };
declare class HeadTrackingState { 
	Mode: EHeadTrackingMode;
	Error: EHeadTrackingError;
	Confidence: number;
	clone() : HeadTrackingState;
	static C(Other: UObject | any): HeadTrackingState;
	GetHeadTrackingState(): {State: HeadTrackingState, $: boolean};
	static GetHeadTrackingState(State?: HeadTrackingState): {State: HeadTrackingState, $: boolean};
}

declare class MagicLeapHMDFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MagicLeapHMDFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MagicLeapHMDFunctionLibrary;
	static GetDefaultObject(): MagicLeapHMDFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapHMDFunctionLibrary;
	static SetFocusActor(InFocusActor: Actor): void;
	static SetBaseRotation(InBaseRotation: Rotator): void;
	static SetBasePosition(InBasePosition: Vector): void;
	static SetBaseOrientation(InBaseOrientation: Quat): void;
	static IsRunningOnMagicLeapHMD(): boolean;
	static GetMLSDKVersionRevision(): number;
	static GetMLSDKVersionMinor(): number;
	static GetMLSDKVersionMajor(): number;
	static GetMLSDKVersion(): string;
	static GetHeadTrackingState(State?: HeadTrackingState): {State: HeadTrackingState, $: boolean};
	static C(Other: UObject | any): MagicLeapHMDFunctionLibrary;
}

declare type EMagicLeapPrivilege = 'Invalid' | 'AudioRecognizer' | 'BatteryInfo' | 'CameraCapture' | 'WorldReconstruction' | 'InAppPurchase' | 'AudioCaptureMic' | 'DrmCertificates' | 'Occlusion' | 'LowLatencyLightwear' | 'Internet' | 'IdentityRead' | 'BackgroundDownload' | 'BackgroundUpload' | 'MediaDrm' | 'Media' | 'MediaMetadata' | 'PowerInfo' | 'LocalAreaNetwork' | 'VoiceInput' | 'Documents' | 'ConnectBackgroundMusicService' | 'RegisterBackgroundMusicService' | 'PwFoundObjRead' | 'NormalNotificationsUsage' | 'MusicService' | 'ControllerPose' | 'ScreensProvider' | 'GesturesSubscribe' | 'GesturesConfig' | 'EMagicLeapPrivilege_MAX';
declare var EMagicLeapPrivilege : { Invalid:'Invalid',AudioRecognizer:'AudioRecognizer',BatteryInfo:'BatteryInfo',CameraCapture:'CameraCapture',WorldReconstruction:'WorldReconstruction',InAppPurchase:'InAppPurchase',AudioCaptureMic:'AudioCaptureMic',DrmCertificates:'DrmCertificates',Occlusion:'Occlusion',LowLatencyLightwear:'LowLatencyLightwear',Internet:'Internet',IdentityRead:'IdentityRead',BackgroundDownload:'BackgroundDownload',BackgroundUpload:'BackgroundUpload',MediaDrm:'MediaDrm',Media:'Media',MediaMetadata:'MediaMetadata',PowerInfo:'PowerInfo',LocalAreaNetwork:'LocalAreaNetwork',VoiceInput:'VoiceInput',Documents:'Documents',ConnectBackgroundMusicService:'ConnectBackgroundMusicService',RegisterBackgroundMusicService:'RegisterBackgroundMusicService',PwFoundObjRead:'PwFoundObjRead',NormalNotificationsUsage:'NormalNotificationsUsage',MusicService:'MusicService',ControllerPose:'ControllerPose',ScreensProvider:'ScreensProvider',GesturesSubscribe:'GesturesSubscribe',GesturesConfig:'GesturesConfig',EMagicLeapPrivilege_MAX:'EMagicLeapPrivilege_MAX', };
declare class MagicLeapPrivileges extends ActorComponent { 
	static Load(ResourceName: string): MagicLeapPrivileges;
	static Find(Outer: UObject, ResourceName: string): MagicLeapPrivileges;
	static GetDefaultObject(): MagicLeapPrivileges;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapPrivileges;
	RequestPrivilege(Privilege: EMagicLeapPrivilege): boolean;
	CheckPrivilege(Privilege: EMagicLeapPrivilege): boolean;
	static C(Other: UObject | any): MagicLeapPrivileges;
}

declare class MagicLeapSettings extends UObject { 
	bEnableZI: boolean;
	static Load(ResourceName: string): MagicLeapSettings;
	static Find(Outer: UObject, ResourceName: string): MagicLeapSettings;
	static GetDefaultObject(): MagicLeapSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapSettings;
	static C(Other: UObject | any): MagicLeapSettings;
}

declare type EMeshType = 'Triangles' | 'PointCloud' | 'EMeshType_MAX';
declare var EMeshType : { Triangles:'Triangles',PointCloud:'PointCloud',EMeshType_MAX:'EMeshType_MAX', };
declare type EMeshLOD = 'Minimum' | 'Medium' | 'Maximum' | 'EMeshLOD_MAX';
declare var EMeshLOD : { Minimum:'Minimum',Medium:'Medium',Maximum:'Maximum',EMeshLOD_MAX:'EMeshLOD_MAX', };
declare type EMLMeshVertexColorMode = 'None' | 'Confidence' | 'Block' | 'EMLMeshVertexColorMode_MAX';
declare var EMLMeshVertexColorMode : { None:'None',Confidence:'Confidence',Block:'Block',EMLMeshVertexColorMode_MAX:'EMLMeshVertexColorMode_MAX', };
declare class MeshTrackerComponent extends SceneComponent { 
	OnMeshTrackerUpdated: UnrealEngineMulticastDelegate<(index: number, Vertices: Vector[], Triangles: number[], Normals: Vector[], Confidence: number[]) => void>;
	ScanWorld: boolean;
	MeshType: EMeshType;
	BoundingVolume: BoxComponent;
	LevelOfDetail: EMeshLOD;
	PerimeterOfGapsToFill: number;
	Planarize: boolean;
	DisconnectedSectionArea: number;
	RequestNormals: boolean;
	RequestVertexConfidence: boolean;
	VertexColorMode: EMLMeshVertexColorMode;
	BlockVertexColors: Color[];
	VertexColorFromConfidenceZero: LinearColor;
	VertexColorFromConfidenceOne: LinearColor;
	RemoveOverlappingTriangles: boolean;
	MRMesh: MRMeshComponent;
	static Load(ResourceName: string): MeshTrackerComponent;
	static Find(Outer: UObject, ResourceName: string): MeshTrackerComponent;
	static GetDefaultObject(): MeshTrackerComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshTrackerComponent;
	DisconnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
	ConnectMRMesh(InMRMeshPtr: MRMeshComponent): void;
	static C(Other: UObject | any): MeshTrackerComponent;
}

declare type EPlaneQueryFlags = 'Vertical' | 'Horizontal' | 'Arbitrary' | 'OrientToGravity' | 'PreferInner' | 'IgnoreHoles' | 'Ceiling' | 'Floor' | 'Wall' | 'EPlaneQueryFlags_MAX';
declare var EPlaneQueryFlags : { Vertical:'Vertical',Horizontal:'Horizontal',Arbitrary:'Arbitrary',OrientToGravity:'OrientToGravity',PreferInner:'PreferInner',IgnoreHoles:'IgnoreHoles',Ceiling:'Ceiling',Floor:'Floor',Wall:'Wall',EPlaneQueryFlags_MAX:'EPlaneQueryFlags_MAX', };
declare class PlanesComponent extends SceneComponent { 
	QueryFlags: EPlaneQueryFlags[];
	SearchVolume: BoxComponent;
	MaxResults: number;
	MinHolePerimeter: number;
	MinPlaneArea: number;
	IgnoreBoundingVolume: boolean;
	static Load(ResourceName: string): PlanesComponent;
	static Find(Outer: UObject, ResourceName: string): PlanesComponent;
	static GetDefaultObject(): PlanesComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlanesComponent;
	static C(Other: UObject | any): PlanesComponent;
}

declare class RaycastComponent extends ActorComponent { 
	static Load(ResourceName: string): RaycastComponent;
	static Find(Outer: UObject, ResourceName: string): RaycastComponent;
	static GetDefaultObject(): RaycastComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): RaycastComponent;
	static C(Other: UObject | any): RaycastComponent;
}

declare type EMLControllerTrackingMode = 'InputService' | 'CoordinateFrameUID' | 'EMLControllerTrackingMode_MAX';
declare var EMLControllerTrackingMode : { InputService:'InputService',CoordinateFrameUID:'CoordinateFrameUID',EMLControllerTrackingMode_MAX:'EMLControllerTrackingMode_MAX', };
declare type EMLControllerLEDEffect = 'RotateCW' | 'RotateCCW' | 'Pulse' | 'PaintCW' | 'PaintCCW' | 'Blink' | 'EMLControllerLEDEffect_MAX';
declare var EMLControllerLEDEffect : { RotateCW:'RotateCW',RotateCCW:'RotateCCW',Pulse:'Pulse',PaintCW:'PaintCW',PaintCCW:'PaintCCW',Blink:'Blink',EMLControllerLEDEffect_MAX:'EMLControllerLEDEffect_MAX', };
declare type EMLControllerLEDSpeed = 'Slow' | 'Medium' | 'Fast' | 'EMLControllerLEDSpeed_MAX';
declare var EMLControllerLEDSpeed : { Slow:'Slow',Medium:'Medium',Fast:'Fast',EMLControllerLEDSpeed_MAX:'EMLControllerLEDSpeed_MAX', };
declare type EMLControllerLEDPattern = 'None' | 'Clock01' | 'Clock02' | 'Clock03' | 'Clock04' | 'Clock05' | 'Clock06' | 'Clock07' | 'Clock08' | 'Clock09' | 'Clock10' | 'Clock11' | 'Clock12' | 'Clock01_07' | 'Clock02_08' | 'Clock03_09' | 'Clock04_10' | 'Clock05_11' | 'Clock06_12' | 'EMLControllerLEDPattern_MAX';
declare var EMLControllerLEDPattern : { None:'None',Clock01:'Clock01',Clock02:'Clock02',Clock03:'Clock03',Clock04:'Clock04',Clock05:'Clock05',Clock06:'Clock06',Clock07:'Clock07',Clock08:'Clock08',Clock09:'Clock09',Clock10:'Clock10',Clock11:'Clock11',Clock12:'Clock12',Clock01_07:'Clock01_07',Clock02_08:'Clock02_08',Clock03_09:'Clock03_09',Clock04_10:'Clock04_10',Clock05_11:'Clock05_11',Clock06_12:'Clock06_12',EMLControllerLEDPattern_MAX:'EMLControllerLEDPattern_MAX', };
declare type EMLControllerLEDColor = 'BrightMissionRed' | 'PastelMissionRed' | 'BrightFloridaOrange' | 'PastelFloridaOrange' | 'BrightLunaYellow' | 'PastelLunaYellow' | 'BrightNebulaPink' | 'PastelNebulaPink' | 'BrightCosmicPurple' | 'PastelCosmicPurple' | 'BrightMysticBlue' | 'PastelMysticBlue' | 'BrightCelestialBlue' | 'PastelCelestialBlue' | 'BrightShaggleGreen' | 'PastelShaggleGreen' | 'EMLControllerLEDColor_MAX';
declare var EMLControllerLEDColor : { BrightMissionRed:'BrightMissionRed',PastelMissionRed:'PastelMissionRed',BrightFloridaOrange:'BrightFloridaOrange',PastelFloridaOrange:'PastelFloridaOrange',BrightLunaYellow:'BrightLunaYellow',PastelLunaYellow:'PastelLunaYellow',BrightNebulaPink:'BrightNebulaPink',PastelNebulaPink:'PastelNebulaPink',BrightCosmicPurple:'BrightCosmicPurple',PastelCosmicPurple:'PastelCosmicPurple',BrightMysticBlue:'BrightMysticBlue',PastelMysticBlue:'PastelMysticBlue',BrightCelestialBlue:'BrightCelestialBlue',PastelCelestialBlue:'PastelCelestialBlue',BrightShaggleGreen:'BrightShaggleGreen',PastelShaggleGreen:'PastelShaggleGreen',EMLControllerLEDColor_MAX:'EMLControllerLEDColor_MAX', };
declare type EMLControllerHapticPattern = 'None' | 'Click' | 'Bump' | 'DoubleClick' | 'Buzz' | 'Tick' | 'ForceDown' | 'ForceUp' | 'ForceDwell' | 'SecondForceDown' | 'EMLControllerHapticPattern_MAX';
declare var EMLControllerHapticPattern : { None:'None',Click:'Click',Bump:'Bump',DoubleClick:'DoubleClick',Buzz:'Buzz',Tick:'Tick',ForceDown:'ForceDown',ForceUp:'ForceUp',ForceDwell:'ForceDwell',SecondForceDown:'SecondForceDown',EMLControllerHapticPattern_MAX:'EMLControllerHapticPattern_MAX', };
declare type EMLControllerHapticIntensity = 'Low' | 'Medium' | 'High' | 'EMLControllerHapticIntensity_MAX';
declare var EMLControllerHapticIntensity : { Low:'Low',Medium:'Medium',High:'High',EMLControllerHapticIntensity_MAX:'EMLControllerHapticIntensity_MAX', };
declare type EMLControllerType = 'None' | 'Device' | 'MobileApp' | 'EMLControllerType_MAX';
declare var EMLControllerType : { None:'None',Device:'Device',MobileApp:'MobileApp',EMLControllerType_MAX:'EMLControllerType_MAX', };
declare class MagicLeapControllerFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MagicLeapControllerFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MagicLeapControllerFunctionLibrary;
	static GetDefaultObject(): MagicLeapControllerFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapControllerFunctionLibrary;
	static SetControllerTrackingMode(TrackingMode: EMLControllerTrackingMode): boolean;
	static PlayControllerLEDEffect(Hand: EControllerHand,LEDEffect: EMLControllerLEDEffect,LEDSpeed: EMLControllerLEDSpeed,LEDPattern: EMLControllerLEDPattern,LEDColor: EMLControllerLEDColor,DurationInSec: number): boolean;
	static PlayControllerLED(Hand: EControllerHand,LEDPattern: EMLControllerLEDPattern,LEDColor: EMLControllerLEDColor,DurationInSec: number): boolean;
	static PlayControllerHapticFeedback(Hand: EControllerHand,HapticPattern: EMLControllerHapticPattern,Intensity: EMLControllerHapticIntensity): boolean;
	static MaxSupportedMagicLeapControllers(): number;
	static InvertControllerMapping(): void;
	static GetMLControllerType(Hand: EControllerHand): EMLControllerType;
	static GetControllerTrackingMode(): EMLControllerTrackingMode;
	static GetControllerMapping(ControllerIndex: number,Hand?: EControllerHand): {Hand: EControllerHand, $: boolean};
	static C(Other: UObject | any): MagicLeapControllerFunctionLibrary;
}

declare type EMagicLeapTouchpadGestureType = 'None' | 'Tap' | 'ForceTapDown' | 'ForceTapUp' | 'ForceDwell' | 'SecondForceDown' | 'LongHold' | 'RadialScroll' | 'Swipe' | 'Scroll' | 'Pinch' | 'EMagicLeapTouchpadGestureType_MAX';
declare var EMagicLeapTouchpadGestureType : { None:'None',Tap:'Tap',ForceTapDown:'ForceTapDown',ForceTapUp:'ForceTapUp',ForceDwell:'ForceDwell',SecondForceDown:'SecondForceDown',LongHold:'LongHold',RadialScroll:'RadialScroll',Swipe:'Swipe',Scroll:'Scroll',Pinch:'Pinch',EMagicLeapTouchpadGestureType_MAX:'EMagicLeapTouchpadGestureType_MAX', };
declare type EMagicLeapTouchpadGestureDirection = 'None' | 'Up' | 'Down' | 'Left' | 'Right' | 'In' | 'Out' | 'Clockwise' | 'CounterClockwise' | 'EMagicLeapTouchpadGestureDirection_MAX';
declare var EMagicLeapTouchpadGestureDirection : { None:'None',Up:'Up',Down:'Down',Left:'Left',Right:'Right',In:'In',Out:'Out',Clockwise:'Clockwise',CounterClockwise:'CounterClockwise',EMagicLeapTouchpadGestureDirection_MAX:'EMagicLeapTouchpadGestureDirection_MAX', };
declare class MagicLeapTouchpadGesture { 
	Hand: EControllerHand;
	Type: EMagicLeapTouchpadGestureType;
	Direction: EMagicLeapTouchpadGestureDirection;
	PositionAndForce: Vector;
	Speed: number;
	Distance: number;
	FingerGap: number;
	Radius: number;
	Angle: number;
	clone() : MagicLeapTouchpadGesture;
	static C(Other: UObject | any): MagicLeapTouchpadGesture;
}

declare class TouchpadGesturesComponent extends ActorComponent { 
	OnTouchpadGestureStart: UnrealEngineMulticastDelegate<(GestureData: MagicLeapTouchpadGesture) => void>;
	OnTouchpadGestureContinue: UnrealEngineMulticastDelegate<(GestureData: MagicLeapTouchpadGesture) => void>;
	OnTouchpadGestureEnd: UnrealEngineMulticastDelegate<(GestureData: MagicLeapTouchpadGesture) => void>;
	static Load(ResourceName: string): TouchpadGesturesComponent;
	static Find(Outer: UObject, ResourceName: string): TouchpadGesturesComponent;
	static GetDefaultObject(): TouchpadGesturesComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TouchpadGesturesComponent;
	static C(Other: UObject | any): TouchpadGesturesComponent;
}

declare class EyeTrackerStereoGazeData { 
	LeftEyeOrigin: Vector;
	LeftEyeDirection: Vector;
	RightEyeOrigin: Vector;
	RightEyeDirection: Vector;
	FixationPoint: Vector;
	ConfidenceValue: number;
	clone() : EyeTrackerStereoGazeData;
	static C(Other: UObject | any): EyeTrackerStereoGazeData;
	GetStereoGazeData(): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
	static GetStereoGazeData(OutGazeData?: EyeTrackerStereoGazeData): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
}

declare class EyeTrackerGazeData { 
	GazeOrigin: Vector;
	GazeDirection: Vector;
	FixationPoint: Vector;
	ConfidenceValue: number;
	clone() : EyeTrackerGazeData;
	static C(Other: UObject | any): EyeTrackerGazeData;
	GetGazeData(): {OutGazeData: EyeTrackerGazeData, $: boolean};
	static GetGazeData(OutGazeData?: EyeTrackerGazeData): {OutGazeData: EyeTrackerGazeData, $: boolean};
}

declare class EyeTrackerFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): EyeTrackerFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): EyeTrackerFunctionLibrary;
	static GetDefaultObject(): EyeTrackerFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EyeTrackerFunctionLibrary;
	static SetEyeTrackedPlayer(PlayerController: PlayerController): void;
	static IsStereoGazeDataAvailable(): boolean;
	static IsEyeTrackerConnected(): boolean;
	static GetStereoGazeData(OutGazeData?: EyeTrackerStereoGazeData): {OutGazeData: EyeTrackerStereoGazeData, $: boolean};
	static GetGazeData(OutGazeData?: EyeTrackerGazeData): {OutGazeData: EyeTrackerGazeData, $: boolean};
	static C(Other: UObject | any): EyeTrackerFunctionLibrary;
}

declare class MagicLeapFixationComfort { 
	FixationDepthIsUncomfortable: boolean;
	FixationDepthViolationHasOccurred: boolean;
	RemainingTimeAtUncomfortableDepth: number;
	clone() : MagicLeapFixationComfort;
	static C(Other: UObject | any): MagicLeapFixationComfort;
	GetFixationComfort(): {FixationComfort: MagicLeapFixationComfort, $: boolean};
	static GetFixationComfort(FixationComfort?: MagicLeapFixationComfort): {FixationComfort: MagicLeapFixationComfort, $: boolean};
}

declare class MagicLeapEyeBlinkState { 
	LeftEyeBlinked: boolean;
	RightEyeBlinked: boolean;
	clone() : MagicLeapEyeBlinkState;
	static C(Other: UObject | any): MagicLeapEyeBlinkState;
	GetEyeBlinkState(): {BlinkState: MagicLeapEyeBlinkState, $: boolean};
	static GetEyeBlinkState(BlinkState?: MagicLeapEyeBlinkState): {BlinkState: MagicLeapEyeBlinkState, $: boolean};
}

declare type EMagicLeapEyeTrackingCalibrationStatus = 'None' | 'Bad' | 'Good' | 'EMagicLeapEyeTrackingCalibrationStatus_MAX';
declare var EMagicLeapEyeTrackingCalibrationStatus : { None:'None',Bad:'Bad',Good:'Good',EMagicLeapEyeTrackingCalibrationStatus_MAX:'EMagicLeapEyeTrackingCalibrationStatus_MAX', };
declare class MagicLeapEyeTrackerFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MagicLeapEyeTrackerFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MagicLeapEyeTrackerFunctionLibrary;
	static GetDefaultObject(): MagicLeapEyeTrackerFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapEyeTrackerFunctionLibrary;
	static IsEyeTrackerCalibrated(): boolean;
	static GetFixationComfort(FixationComfort?: MagicLeapFixationComfort): {FixationComfort: MagicLeapFixationComfort, $: boolean};
	static GetEyeBlinkState(BlinkState?: MagicLeapEyeBlinkState): {BlinkState: MagicLeapEyeBlinkState, $: boolean};
	static GetCalibrationStatus(): EMagicLeapEyeTrackingCalibrationStatus;
	static C(Other: UObject | any): MagicLeapEyeTrackerFunctionLibrary;
}

declare class LiveLinkSourceFactory extends UObject { 
	static Load(ResourceName: string): LiveLinkSourceFactory;
	static Find(Outer: UObject, ResourceName: string): LiveLinkSourceFactory;
	static GetDefaultObject(): LiveLinkSourceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSourceFactory;
	static C(Other: UObject | any): LiveLinkSourceFactory;
}

declare type ELiveLinkSourceMode = 'Default' | 'Interpolated' | 'TimeSynchronized' | 'ELiveLinkSourceMode_MAX';
declare var ELiveLinkSourceMode : { Default:'Default',Interpolated:'Interpolated',TimeSynchronized:'TimeSynchronized',ELiveLinkSourceMode_MAX:'ELiveLinkSourceMode_MAX', };
declare class LiveLinkInterpolationSettings { 
	bUseInterpolation: boolean;
	InterpolationOffset: number;
	clone() : LiveLinkInterpolationSettings;
	static C(Other: UObject | any): LiveLinkInterpolationSettings;
}

declare class LiveLinkTimeSynchronizationSettings { 
	FrameRate: FrameRate;
	clone() : LiveLinkTimeSynchronizationSettings;
	static C(Other: UObject | any): LiveLinkTimeSynchronizationSettings;
}

declare class LiveLinkSourceSettings extends UObject { 
	Mode: ELiveLinkSourceMode;
	InterpolationSettings: LiveLinkInterpolationSettings;
	TimeSynchronizationSettings: LiveLinkTimeSynchronizationSettings;
	static Load(ResourceName: string): LiveLinkSourceSettings;
	static Find(Outer: UObject, ResourceName: string): LiveLinkSourceSettings;
	static GetDefaultObject(): LiveLinkSourceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkSourceSettings;
	static C(Other: UObject | any): LiveLinkSourceSettings;
}

declare class LiveLinkMagicLeapHandTrackingSourceFactory extends LiveLinkSourceFactory { 
	static Load(ResourceName: string): LiveLinkMagicLeapHandTrackingSourceFactory;
	static Find(Outer: UObject, ResourceName: string): LiveLinkMagicLeapHandTrackingSourceFactory;
	static GetDefaultObject(): LiveLinkMagicLeapHandTrackingSourceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMagicLeapHandTrackingSourceFactory;
	static C(Other: UObject | any): LiveLinkMagicLeapHandTrackingSourceFactory;
}

declare type EHandTrackingGesture = 'Finger' | 'Fist' | 'Pinch' | 'Thumb' | 'L' | 'OpenHandBack' | 'Ok' | 'C' | 'NoPose' | 'NoHand' | 'EHandTrackingGesture_MAX';
declare var EHandTrackingGesture : { Finger:'Finger',Fist:'Fist',Pinch:'Pinch',Thumb:'Thumb',L:'L',OpenHandBack:'OpenHandBack',Ok:'Ok',C:'C',NoPose:'NoPose',NoHand:'NoHand',EHandTrackingGesture_MAX:'EHandTrackingGesture_MAX', };
declare type EHandTrackingKeypointFilterLevel = 'NoFilter' | 'SimpleSmoothing' | 'PredictiveSmoothing' | 'EHandTrackingKeypointFilterLevel_MAX';
declare var EHandTrackingKeypointFilterLevel : { NoFilter:'NoFilter',SimpleSmoothing:'SimpleSmoothing',PredictiveSmoothing:'PredictiveSmoothing',EHandTrackingKeypointFilterLevel_MAX:'EHandTrackingKeypointFilterLevel_MAX', };
declare type EHandTrackingGestureFilterLevel = 'NoFilter' | 'SlightRobustnessToFlicker' | 'MoreRobustnessToFlicker' | 'EHandTrackingGestureFilterLevel_MAX';
declare var EHandTrackingGestureFilterLevel : { NoFilter:'NoFilter',SlightRobustnessToFlicker:'SlightRobustnessToFlicker',MoreRobustnessToFlicker:'MoreRobustnessToFlicker',EHandTrackingGestureFilterLevel_MAX:'EHandTrackingGestureFilterLevel_MAX', };
declare class LiveLinkSourceHandle { 
	clone() : LiveLinkSourceHandle;
	static C(Other: UObject | any): LiveLinkSourceHandle;
	GetSourceMachineName(): {SourceHandle: LiveLinkSourceHandle, $: string};
	GetSourceStatus(): {SourceHandle: LiveLinkSourceHandle, $: string};
	GetSourceType(): {SourceHandle: LiveLinkSourceHandle, $: string};
	IsSourceStillValid(): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	RequestShutdown(): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	GetMagicLeapHandTrackingLiveLinkSource(): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static GetSourceMachineName(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetSourceStatus(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetSourceType(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static IsSourceStillValid(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static RequestShutdown(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static GetMagicLeapHandTrackingLiveLinkSource(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
}

declare type EGestureTransformSpace = 'World' | 'Hand' | 'Tracking' | 'EGestureTransformSpace_MAX';
declare var EGestureTransformSpace : { World:'World',Hand:'Hand',Tracking:'Tracking',EGestureTransformSpace_MAX:'EGestureTransformSpace_MAX', };
declare type EHandTrackingKeypoint = 'Thumb_Tip' | 'Thumb_IP' | 'Thumb_MCP' | 'Thumb_CMC' | 'Index_Tip' | 'Index_DIP' | 'Index_PIP' | 'Index_MCP' | 'Middle_Tip' | 'Middle_DIP' | 'Middle_PIP' | 'Middle_MCP' | 'Ring_Tip' | 'Ring_DIP' | 'Ring_PIP' | 'Ring_MCP' | 'Pinky_Tip' | 'Pinky_DIP' | 'Pinky_PIP' | 'Pinky_MCP' | 'Wrist_Center' | 'Wrist_Ulnar' | 'Wrist_Radial' | 'Hand_Center' | 'EHandTrackingKeypoint_MAX';
declare var EHandTrackingKeypoint : { Thumb_Tip:'Thumb_Tip',Thumb_IP:'Thumb_IP',Thumb_MCP:'Thumb_MCP',Thumb_CMC:'Thumb_CMC',Index_Tip:'Index_Tip',Index_DIP:'Index_DIP',Index_PIP:'Index_PIP',Index_MCP:'Index_MCP',Middle_Tip:'Middle_Tip',Middle_DIP:'Middle_DIP',Middle_PIP:'Middle_PIP',Middle_MCP:'Middle_MCP',Ring_Tip:'Ring_Tip',Ring_DIP:'Ring_DIP',Ring_PIP:'Ring_PIP',Ring_MCP:'Ring_MCP',Pinky_Tip:'Pinky_Tip',Pinky_DIP:'Pinky_DIP',Pinky_PIP:'Pinky_PIP',Pinky_MCP:'Pinky_MCP',Wrist_Center:'Wrist_Center',Wrist_Ulnar:'Wrist_Ulnar',Wrist_Radial:'Wrist_Radial',Hand_Center:'Hand_Center',EHandTrackingKeypoint_MAX:'EHandTrackingKeypoint_MAX', };
declare class MagicLeapHandTrackingFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MagicLeapHandTrackingFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MagicLeapHandTrackingFunctionLibrary;
	static GetDefaultObject(): MagicLeapHandTrackingFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapHandTrackingFunctionLibrary;
	static SetStaticGestureConfidenceThreshold(Gesture: EHandTrackingGesture,Confidence: number): void;
	static SetConfiguration(StaticGesturesToActivate: EHandTrackingGesture[],KeypointsFilterLevel: EHandTrackingKeypointFilterLevel,GestureFilterLevel: EHandTrackingGestureFilterLevel,HandSwitchingFilterLevel: EHandTrackingGestureFilterLevel,bTrackingEnabled: boolean): boolean;
	static GetStaticGestureConfidenceThreshold(Gesture: EHandTrackingGesture): number;
	static GetMagicLeapHandTrackingLiveLinkSource(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static GetHandThumbTip(Hand: EControllerHand,TransformSpace: EGestureTransformSpace,Secondary?: Transform): {Secondary: Transform, $: boolean};
	static GetHandIndexFingerTip(Hand: EControllerHand,TransformSpace: EGestureTransformSpace,Pointer?: Transform): {Pointer: Transform, $: boolean};
	static GetHandCenterNormalized(Hand: EControllerHand,HandCenterNormalized?: Vector): {HandCenterNormalized: Vector, $: boolean};
	static GetHandCenter(Hand: EControllerHand,HandCenter?: Transform): {HandCenter: Transform, $: boolean};
	static GetGestureKeypointTransform(Hand: EControllerHand,Keypoint: EHandTrackingKeypoint,TransformSpace: EGestureTransformSpace,Transform?: Transform): {Transform: Transform, $: boolean};
	static GetGestureKeypoints(Hand: EControllerHand,Keypoints?: Transform[]): {Keypoints: Transform[], $: boolean};
	static GetCurrentGestureConfidence(Hand: EControllerHand,Confidence?: number): {Confidence: number, $: boolean};
	static GetCurrentGesture(Hand: EControllerHand,Gesture?: EHandTrackingGesture): {Gesture: EHandTrackingGesture, $: boolean};
	static GetConfiguration(ActiveStaticGestures?: EHandTrackingGesture[],KeypointsFilterLevel?: EHandTrackingKeypointFilterLevel,GestureFilterLevel?: EHandTrackingGestureFilterLevel,HandSwitchingFilterLevel?: EHandTrackingGestureFilterLevel,bTrackingEnabled?: boolean): {ActiveStaticGestures: EHandTrackingGesture[], KeypointsFilterLevel: EHandTrackingKeypointFilterLevel, GestureFilterLevel: EHandTrackingGestureFilterLevel, HandSwitchingFilterLevel: EHandTrackingGestureFilterLevel, bTrackingEnabled: boolean, $: boolean};
	static C(Other: UObject | any): MagicLeapHandTrackingFunctionLibrary;
}

declare type EMagicLeapIdentityKey = 'GivenName' | 'FamilyName' | 'Email' | 'Bio' | 'PhoneNumber' | 'Avatar2D' | 'Avatar3D' | 'Unknown' | 'EMagicLeapIdentityKey_MAX';
declare var EMagicLeapIdentityKey : { GivenName:'GivenName',FamilyName:'FamilyName',Email:'Email',Bio:'Bio',PhoneNumber:'PhoneNumber',Avatar2D:'Avatar2D',Avatar3D:'Avatar3D',Unknown:'Unknown',EMagicLeapIdentityKey_MAX:'EMagicLeapIdentityKey_MAX', };
declare class MagicLeapIdentityAttribute { 
	Attribute: EMagicLeapIdentityKey;
	Value: string;
	clone() : MagicLeapIdentityAttribute;
	static C(Other: UObject | any): MagicLeapIdentityAttribute;
}

declare type EMagicLeapIdentityError = 'Ok' | 'InvalidParam' | 'AllocFailed' | 'PrivilegeDenied' | 'FailedToConnectToLocalService' | 'FailedToConnectToCloudService' | 'CloudAuthentication' | 'InvalidInformationFromCloud' | 'NotLoggedIn' | 'ExpiredCredentials' | 'FailedToGetUserProfile' | 'Unauthorized' | 'CertificateError' | 'RejectedByCloud' | 'AlreadyLoggedIn' | 'ModifyIsNotSupported' | 'NetworkError' | 'UnspecifiedFailure' | 'EMagicLeapIdentityError_MAX';
declare var EMagicLeapIdentityError : { Ok:'Ok',InvalidParam:'InvalidParam',AllocFailed:'AllocFailed',PrivilegeDenied:'PrivilegeDenied',FailedToConnectToLocalService:'FailedToConnectToLocalService',FailedToConnectToCloudService:'FailedToConnectToCloudService',CloudAuthentication:'CloudAuthentication',InvalidInformationFromCloud:'InvalidInformationFromCloud',NotLoggedIn:'NotLoggedIn',ExpiredCredentials:'ExpiredCredentials',FailedToGetUserProfile:'FailedToGetUserProfile',Unauthorized:'Unauthorized',CertificateError:'CertificateError',RejectedByCloud:'RejectedByCloud',AlreadyLoggedIn:'AlreadyLoggedIn',ModifyIsNotSupported:'ModifyIsNotSupported',NetworkError:'NetworkError',UnspecifiedFailure:'UnspecifiedFailure',EMagicLeapIdentityError_MAX:'EMagicLeapIdentityError_MAX', };
declare class MagicLeapIdentity extends UObject { 
	static Load(ResourceName: string): MagicLeapIdentity;
	static Find(Outer: UObject, ResourceName: string): MagicLeapIdentity;
	static GetDefaultObject(): MagicLeapIdentity;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MagicLeapIdentity;
	RequestAttributeValue(RequestedAttributeList: EMagicLeapIdentityKey[],RequestedAttributeValues?: MagicLeapIdentityAttribute[]): {RequestedAttributeValues: MagicLeapIdentityAttribute[], $: EMagicLeapIdentityError};
	GetAllAvailableAttributes(AvailableAttributes?: EMagicLeapIdentityKey[]): {AvailableAttributes: EMagicLeapIdentityKey[], $: EMagicLeapIdentityError};
	static C(Other: UObject | any): MagicLeapIdentity;
}

declare class FurSplines extends UObject { 
	Vertices: Vector[];
	index: number[];
	Count: number[];
	ImportFilename: string;
	static Load(ResourceName: string): FurSplines;
	static Find(Outer: UObject, ResourceName: string): FurSplines;
	static GetDefaultObject(): FurSplines;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FurSplines;
	static C(Other: UObject | any): FurSplines;
}

declare class FurLod { 
	ScreenSize: number;
	LayerCount: number;
	Lod: number;
	clone() : FurLod;
	static C(Other: UObject | any): FurLod;
}

declare class GFurComponent extends MeshComponent { 
	GrowMesh: SkeletalMesh;
	FurSplines: FurSplines;
	GuideMeshes: SkeletalMesh[];
	LayerCount: number;
	MinScreenSize: number;
	LODs: FurLod[];
	ShellBias: number;
	FurLength: number;
	MinFurLength: number;
	RemoveFacesWithoutSplines: boolean;
	ForceDistribution: number;
	Stiffness: number;
	Damping: number;
	ConstantForce: Vector;
	MaxForce: number;
	MaxForceTorqueFactor: number;
	ReferenceHairBias: number;
	HairLengthForceUniformity: number;
	NoiseStrength: number;
	static Load(ResourceName: string): GFurComponent;
	static Find(Outer: UObject, ResourceName: string): GFurComponent;
	static GetDefaultObject(): GFurComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GFurComponent;
	static C(Other: UObject | any): GFurComponent;
}

declare class NamedInterface { 
	InterfaceName: string;
	InterfaceObject: UObject;
	clone() : NamedInterface;
	static C(Other: UObject | any): NamedInterface;
}

declare class NamedInterfaceDef { 
	InterfaceName: string;
	InterfaceClassName: string;
	clone() : NamedInterfaceDef;
	static C(Other: UObject | any): NamedInterfaceDef;
}

declare class NamedInterfaces extends UObject { 
	NamedInterfaces: NamedInterface[];
	NamedInterfaceDefs: NamedInterfaceDef[];
	static Load(ResourceName: string): NamedInterfaces;
	static Find(Outer: UObject, ResourceName: string): NamedInterfaces;
	static GetDefaultObject(): NamedInterfaces;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): NamedInterfaces;
	static C(Other: UObject | any): NamedInterfaces;
}

declare class TurnBasedMatchInterface extends Interface { 
	static Load(ResourceName: string): TurnBasedMatchInterface;
	static Find(Outer: UObject, ResourceName: string): TurnBasedMatchInterface;
	static GetDefaultObject(): TurnBasedMatchInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TurnBasedMatchInterface;
	OnMatchReceivedTurn(Match: string,bDidBecomeActive: boolean): void;
	OnMatchEnded(Match: string): void;
	static C(Other: UObject | any): TurnBasedMatchInterface;
}

declare class MobileUtilsBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MobileUtilsBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): MobileUtilsBlueprintLibrary;
	static GetDefaultObject(): MobileUtilsBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MobileUtilsBlueprintLibrary;
	static GetPersistentUniqueDeviceId(): string;
	static GetDeviceId(): string;
	static GetAuthToken(): string;
	static CheckInternetConnection(): boolean;
	static CheckGooglePlayServices(): boolean;
	static C(Other: UObject | any): MobileUtilsBlueprintLibrary;
}

declare class AchievementBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AchievementBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): AchievementBlueprintLibrary;
	static GetDefaultObject(): AchievementBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AchievementBlueprintLibrary;
	static GetCachedAchievementProgress(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Progress?: number): {bFoundID: boolean, Progress: number};
	static GetCachedAchievementDescription(WorldContextObject: UObject,PlayerController: PlayerController,AchievementID: string,bFoundID?: boolean,Title?: string,LockedDescription?: string,UnlockedDescription?: string,bHidden?: boolean): {bFoundID: boolean, Title: string, LockedDescription: string, UnlockedDescription: string, bHidden: boolean};
	static C(Other: UObject | any): AchievementBlueprintLibrary;
}

declare class AchievementQueryCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): AchievementQueryCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): AchievementQueryCallbackProxy;
	static GetDefaultObject(): AchievementQueryCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AchievementQueryCallbackProxy;
	static CacheAchievements(WorldContextObject: UObject,PlayerController: PlayerController): AchievementQueryCallbackProxy;
	static CacheAchievementDescriptions(WorldContextObject: UObject,PlayerController: PlayerController): AchievementQueryCallbackProxy;
	static C(Other: UObject | any): AchievementQueryCallbackProxy;
}

declare class AchievementWriteCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(WrittenAchievementName: string, WrittenProgress: number, WrittenUserTag: number) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(WrittenAchievementName: string, WrittenProgress: number, WrittenUserTag: number) => void>;
	static Load(ResourceName: string): AchievementWriteCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): AchievementWriteCallbackProxy;
	static GetDefaultObject(): AchievementWriteCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AchievementWriteCallbackProxy;
	static WriteAchievementProgress(WorldContextObject: UObject,PlayerController: PlayerController,AchievementName: string,Progress: number,UserTag: number): AchievementWriteCallbackProxy;
	static C(Other: UObject | any): AchievementWriteCallbackProxy;
}

declare class ConnectionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(ErrorCode: number) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(ErrorCode: number) => void>;
	static Load(ResourceName: string): ConnectionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): ConnectionCallbackProxy;
	static GetDefaultObject(): ConnectionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ConnectionCallbackProxy;
	static ConnectToService(WorldContextObject: UObject,PlayerController: PlayerController): ConnectionCallbackProxy;
	static C(Other: UObject | any): ConnectionCallbackProxy;
}

declare class CreateSessionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): CreateSessionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): CreateSessionCallbackProxy;
	static GetDefaultObject(): CreateSessionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CreateSessionCallbackProxy;
	static CreateSession(WorldContextObject: UObject,PlayerController: PlayerController,PublicConnections: number,bUseLAN: boolean): CreateSessionCallbackProxy;
	static C(Other: UObject | any): CreateSessionCallbackProxy;
}

declare class DestroySessionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): DestroySessionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): DestroySessionCallbackProxy;
	static GetDefaultObject(): DestroySessionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DestroySessionCallbackProxy;
	static DestroySession(WorldContextObject: UObject,PlayerController: PlayerController): DestroySessionCallbackProxy;
	static C(Other: UObject | any): DestroySessionCallbackProxy;
}

declare class EndMatchCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): EndMatchCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): EndMatchCallbackProxy;
	static GetDefaultObject(): EndMatchCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndMatchCallbackProxy;
	static C(Other: UObject | any): EndMatchCallbackProxy;
}

declare class EndTurnCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): EndTurnCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): EndTurnCallbackProxy;
	static GetDefaultObject(): EndTurnCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EndTurnCallbackProxy;
	static C(Other: UObject | any): EndTurnCallbackProxy;
}

declare class BlueprintSessionResult { 
	clone() : BlueprintSessionResult;
	static C(Other: UObject | any): BlueprintSessionResult;
}

declare class FindSessionsCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(Results: BlueprintSessionResult[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(Results: BlueprintSessionResult[]) => void>;
	static Load(ResourceName: string): FindSessionsCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): FindSessionsCallbackProxy;
	static GetDefaultObject(): FindSessionsCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FindSessionsCallbackProxy;
	static GetServerName(Result: BlueprintSessionResult): string;
	static GetPingInMs(Result: BlueprintSessionResult): number;
	static GetMaxPlayers(Result: BlueprintSessionResult): number;
	static GetCurrentPlayers(Result: BlueprintSessionResult): number;
	static FindSessions(WorldContextObject: UObject,PlayerController: PlayerController,MaxResults: number,bUseLAN: boolean): FindSessionsCallbackProxy;
	static C(Other: UObject | any): FindSessionsCallbackProxy;
}

declare class FindTurnBasedMatchCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(MatchID: string) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(MatchID: string) => void>;
	static Load(ResourceName: string): FindTurnBasedMatchCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): FindTurnBasedMatchCallbackProxy;
	static GetDefaultObject(): FindTurnBasedMatchCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FindTurnBasedMatchCallbackProxy;
	static C(Other: UObject | any): FindTurnBasedMatchCallbackProxy;
}

declare type EInAppPurchaseState = 'Unknown' | 'Success' | 'Failed' | 'Cancelled' | 'Invalid' | 'NotAllowed' | 'Restored' | 'AlreadyOwned' | 'EInAppPurchaseState_MAX';
declare var EInAppPurchaseState : { Unknown:'Unknown',Success:'Success',Failed:'Failed',Cancelled:'Cancelled',Invalid:'Invalid',NotAllowed:'NotAllowed',Restored:'Restored',AlreadyOwned:'AlreadyOwned',EInAppPurchaseState_MAX:'EInAppPurchaseState_MAX', };
declare class InAppPurchaseProductInfo { 
	Identifier: string;
	TransactionIdentifier: string;
	DisplayName: string;
	DisplayDescription: string;
	DisplayPrice: string;
	RawPrice: number;
	CurrencyCode: string;
	CurrencySymbol: string;
	DecimalSeparator: string;
	GroupingSeparator: string;
	ReceiptData: string;
	clone() : InAppPurchaseProductInfo;
	static C(Other: UObject | any): InAppPurchaseProductInfo;
}

declare class InAppPurchaseProductRequest { 
	ProductIdentifier: string;
	bIsConsumable: boolean;
	clone() : InAppPurchaseProductRequest;
	static C(Other: UObject | any): InAppPurchaseProductRequest;
}

declare class InAppPurchaseCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppPurchaseInformation: InAppPurchaseProductInfo) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppPurchaseInformation: InAppPurchaseProductInfo) => void>;
	static Load(ResourceName: string): InAppPurchaseCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseCallbackProxy;
	static GetDefaultObject(): InAppPurchaseCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseCallbackProxy;
	static CreateProxyObjectForInAppPurchase(PlayerController: PlayerController,ProductRequest: InAppPurchaseProductRequest): InAppPurchaseCallbackProxy;
	static C(Other: UObject | any): InAppPurchaseCallbackProxy;
}

declare class InAppPurchaseQueryCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(InAppPurchaseInformation: InAppPurchaseProductInfo[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(InAppPurchaseInformation: InAppPurchaseProductInfo[]) => void>;
	static Load(ResourceName: string): InAppPurchaseQueryCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseQueryCallbackProxy;
	static GetDefaultObject(): InAppPurchaseQueryCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseQueryCallbackProxy;
	static CreateProxyObjectForInAppPurchaseQuery(PlayerController: PlayerController,ProductIdentifiers: string[]): InAppPurchaseQueryCallbackProxy;
	static C(Other: UObject | any): InAppPurchaseQueryCallbackProxy;
}

declare class InAppPurchaseRestoreInfo { 
	Identifier: string;
	ReceiptData: string;
	TransactionIdentifier: string;
	clone() : InAppPurchaseRestoreInfo;
	static C(Other: UObject | any): InAppPurchaseRestoreInfo;
}

declare class InAppPurchaseRestoreCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppRestorePurchaseInformation: InAppPurchaseRestoreInfo[]) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(CompletionStatus: EInAppPurchaseState, InAppRestorePurchaseInformation: InAppPurchaseRestoreInfo[]) => void>;
	static Load(ResourceName: string): InAppPurchaseRestoreCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): InAppPurchaseRestoreCallbackProxy;
	static GetDefaultObject(): InAppPurchaseRestoreCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InAppPurchaseRestoreCallbackProxy;
	static CreateProxyObjectForInAppPurchaseRestore(ConsumableProductFlags: InAppPurchaseProductRequest[],PlayerController: PlayerController): InAppPurchaseRestoreCallbackProxy;
	static C(Other: UObject | any): InAppPurchaseRestoreCallbackProxy;
}

declare class IpConnection extends NetConnection { 
	static Load(ResourceName: string): IpConnection;
	static Find(Outer: UObject, ResourceName: string): IpConnection;
	static GetDefaultObject(): IpConnection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IpConnection;
	static C(Other: UObject | any): IpConnection;
}

declare class IpNetDriver extends NetDriver { 
	LogPortUnreach: boolean;
	AllowPlayerPortUnreach: boolean;
	MaxPortCountToTry: any;
	ServerDesiredSocketReceiveBufferBytes: any;
	ServerDesiredSocketSendBufferBytes: any;
	ClientDesiredSocketReceiveBufferBytes: any;
	ClientDesiredSocketSendBufferBytes: any;
	static Load(ResourceName: string): IpNetDriver;
	static Find(Outer: UObject, ResourceName: string): IpNetDriver;
	static GetDefaultObject(): IpNetDriver;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): IpNetDriver;
	static C(Other: UObject | any): IpNetDriver;
}

declare class JoinSessionCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): JoinSessionCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): JoinSessionCallbackProxy;
	static GetDefaultObject(): JoinSessionCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JoinSessionCallbackProxy;
	static JoinSession(WorldContextObject: UObject,PlayerController: PlayerController,SearchResult: BlueprintSessionResult): JoinSessionCallbackProxy;
	static C(Other: UObject | any): JoinSessionCallbackProxy;
}

declare class LeaderboardBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): LeaderboardBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): LeaderboardBlueprintLibrary;
	static GetDefaultObject(): LeaderboardBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LeaderboardBlueprintLibrary;
	static WriteLeaderboardInteger(PlayerController: PlayerController,StatName: string,StatValue: number): boolean;
	static C(Other: UObject | any): LeaderboardBlueprintLibrary;
}

declare class LeaderboardFlushCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(SessionName: string) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(SessionName: string) => void>;
	static Load(ResourceName: string): LeaderboardFlushCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): LeaderboardFlushCallbackProxy;
	static GetDefaultObject(): LeaderboardFlushCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LeaderboardFlushCallbackProxy;
	static CreateProxyObjectForFlush(PlayerController: PlayerController,SessionName: string): LeaderboardFlushCallbackProxy;
	static C(Other: UObject | any): LeaderboardFlushCallbackProxy;
}

declare class LeaderboardQueryCallbackProxy extends UObject { 
	OnSuccess: UnrealEngineMulticastDelegate<(LeaderboardValue: number) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(LeaderboardValue: number) => void>;
	static Load(ResourceName: string): LeaderboardQueryCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): LeaderboardQueryCallbackProxy;
	static GetDefaultObject(): LeaderboardQueryCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LeaderboardQueryCallbackProxy;
	static CreateProxyObjectForIntQuery(PlayerController: PlayerController,StatName: string): LeaderboardQueryCallbackProxy;
	static C(Other: UObject | any): LeaderboardQueryCallbackProxy;
}

declare class LogoutCallbackProxy extends BlueprintAsyncActionBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	static Load(ResourceName: string): LogoutCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): LogoutCallbackProxy;
	static GetDefaultObject(): LogoutCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LogoutCallbackProxy;
	static Logout(WorldContextObject: UObject,PlayerController: PlayerController): LogoutCallbackProxy;
	static C(Other: UObject | any): LogoutCallbackProxy;
}

declare class OnlineBeacon extends Actor { 
	BeaconConnectionInitialTimeout: number;
	BeaconConnectionTimeout: number;
	NetDriver: NetDriver;
	static GetDefaultObject(): OnlineBeacon;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeacon;
	static C(Other: UObject | any): OnlineBeacon;
}

declare class OnlineBeaconHostObject extends Actor { 
	BeaconTypeName: string;
	ClientBeaconActorClass: UnrealEngineClass;
	ClientActors: OnlineBeaconClient[];
	static GetDefaultObject(): OnlineBeaconHostObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeaconHostObject;
	static C(Other: UObject | any): OnlineBeaconHostObject;
}

declare type EBeaconConnectionState = 'Invalid' | 'Closed' | 'Pending' | 'Open' | 'EBeaconConnectionState_MAX';
declare var EBeaconConnectionState : { Invalid:'Invalid',Closed:'Closed',Pending:'Pending',Open:'Open',EBeaconConnectionState_MAX:'EBeaconConnectionState_MAX', };
declare class OnlineBeaconClient extends OnlineBeacon { 
	BeaconOwner: OnlineBeaconHostObject;
	BeaconConnection: NetConnection;
	ConnectionState: EBeaconConnectionState;
	static GetDefaultObject(): OnlineBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeaconClient;
	ClientOnConnected(): void;
	static C(Other: UObject | any): OnlineBeaconClient;
}

declare class OnlineBeaconHost extends OnlineBeacon { 
	ListenPort: number;
	ClientActors: OnlineBeaconClient[];
	static GetDefaultObject(): OnlineBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineBeaconHost;
	static C(Other: UObject | any): OnlineBeaconHost;
}

declare class OnlineEngineInterfaceImpl extends OnlineEngineInterface { 
	VoiceSubsystemNameOverride: string;
	static Load(ResourceName: string): OnlineEngineInterfaceImpl;
	static Find(Outer: UObject, ResourceName: string): OnlineEngineInterfaceImpl;
	static GetDefaultObject(): OnlineEngineInterfaceImpl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineEngineInterfaceImpl;
	static C(Other: UObject | any): OnlineEngineInterfaceImpl;
}

declare class PIELoginSettingsInternal { 
	ID: string;
	Token: string;
	Type: string;
	TokenBytes: number[];
	clone() : PIELoginSettingsInternal;
	static C(Other: UObject | any): PIELoginSettingsInternal;
}

declare class OnlinePIESettings extends DeveloperSettings { 
	bOnlinePIEEnabled: boolean;
	Logins: PIELoginSettingsInternal[];
	static Load(ResourceName: string): OnlinePIESettings;
	static Find(Outer: UObject, ResourceName: string): OnlinePIESettings;
	static GetDefaultObject(): OnlinePIESettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlinePIESettings;
	static C(Other: UObject | any): OnlinePIESettings;
}

declare class OnlineSessionClient extends OnlineSession { 
	bIsFromInvite: boolean;
	bHandlingDisconnect: boolean;
	static Load(ResourceName: string): OnlineSessionClient;
	static Find(Outer: UObject, ResourceName: string): OnlineSessionClient;
	static GetDefaultObject(): OnlineSessionClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OnlineSessionClient;
	static C(Other: UObject | any): OnlineSessionClient;
}

declare class PlayerReservation { 
	UniqueId: UniqueNetIdRepl;
	ValidationStr: string;
	Platform: string;
	bAllowCrossplay: boolean;
	ElapsedTime: number;
	clone() : PlayerReservation;
	static C(Other: UObject | any): PlayerReservation;
}

declare class PartyReservation { 
	TeamNum: number;
	PartyLeader: UniqueNetIdRepl;
	PartyMembers: PlayerReservation[];
	clone() : PartyReservation;
	static C(Other: UObject | any): PartyReservation;
}

declare type EClientRequestType = 'NonePending' | 'ExistingSessionReservation' | 'ReservationUpdate' | 'EmptyServerReservation' | 'Reconnect' | 'Abandon' | 'EClientRequestType_MAX';
declare var EClientRequestType : { NonePending:'NonePending',ExistingSessionReservation:'ExistingSessionReservation',ReservationUpdate:'ReservationUpdate',EmptyServerReservation:'EmptyServerReservation',Reconnect:'Reconnect',Abandon:'Abandon',EClientRequestType_MAX:'EClientRequestType_MAX', };
declare type EPartyReservationResult = 'NoResult' | 'RequestPending' | 'GeneralError' | 'PartyLimitReached' | 'IncorrectPlayerCount' | 'RequestTimedOut' | 'ReservationDuplicate' | 'ReservationNotFound' | 'ReservationAccepted' | 'ReservationDenied' | 'ReservationDenied_CrossPlayRestriction' | 'ReservationDenied_Banned' | 'ReservationRequestCanceled' | 'ReservationInvalid' | 'BadSessionId' | 'ReservationDenied_ContainsExistingPlayers' | 'EPartyReservationResult_MAX';
declare var EPartyReservationResult : { NoResult:'NoResult',RequestPending:'RequestPending',GeneralError:'GeneralError',PartyLimitReached:'PartyLimitReached',IncorrectPlayerCount:'IncorrectPlayerCount',RequestTimedOut:'RequestTimedOut',ReservationDuplicate:'ReservationDuplicate',ReservationNotFound:'ReservationNotFound',ReservationAccepted:'ReservationAccepted',ReservationDenied:'ReservationDenied',ReservationDenied_CrossPlayRestriction:'ReservationDenied_CrossPlayRestriction',ReservationDenied_Banned:'ReservationDenied_Banned',ReservationRequestCanceled:'ReservationRequestCanceled',ReservationInvalid:'ReservationInvalid',BadSessionId:'BadSessionId',ReservationDenied_ContainsExistingPlayers:'ReservationDenied_ContainsExistingPlayers',EPartyReservationResult_MAX:'EPartyReservationResult_MAX', };
declare class PartyBeaconClient extends OnlineBeaconClient { 
	DestSessionId: string;
	PendingReservation: PartyReservation;
	RequestType: EClientRequestType;
	bPendingReservationSent: boolean;
	bCancelReservation: boolean;
	static GetDefaultObject(): PartyBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PartyBeaconClient;
	ServerUpdateReservationRequest(SessionId: string,ReservationUpdate: PartyReservation): void;
	ServerReservationRequest(SessionId: string,Reservation: PartyReservation): void;
	ServerCancelReservationRequest(PartyLeader: UniqueNetIdRepl): void;
	ClientSendReservationUpdates(NumRemainingReservations: number): void;
	ClientSendReservationFull(): void;
	ClientReservationResponse(ReservationResponse: EPartyReservationResult): void;
	ClientCancelReservationResponse(ReservationResponse: EPartyReservationResult): void;
	static C(Other: UObject | any): PartyBeaconClient;
}

declare class PartyBeaconState extends UObject { 
	SessionName: string;
	NumConsumedReservations: number;
	MaxReservations: number;
	NumTeams: number;
	NumPlayersPerTeam: number;
	TeamAssignmentMethod: string;
	ReservedHostTeamNum: number;
	ForceTeamNum: number;
	bRestrictCrossConsole: boolean;
	Reservations: PartyReservation[];
	static Load(ResourceName: string): PartyBeaconState;
	static Find(Outer: UObject, ResourceName: string): PartyBeaconState;
	static GetDefaultObject(): PartyBeaconState;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PartyBeaconState;
	static C(Other: UObject | any): PartyBeaconState;
}

declare class PartyBeaconHost extends OnlineBeaconHostObject { 
	State: PartyBeaconState;
	bLogoutOnSessionTimeout: boolean;
	SessionTimeoutSecs: number;
	TravelSessionTimeoutSecs: number;
	static GetDefaultObject(): PartyBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PartyBeaconHost;
	static C(Other: UObject | any): PartyBeaconHost;
}

declare type EMPMatchOutcome = 'None' | 'Quit' | 'Won' | 'Lost' | 'Tied' | 'TimeExpired' | 'First' | 'Second' | 'Third' | 'Fourth' | 'EMPMatchOutcome_MAX';
declare var EMPMatchOutcome : { None:'None',Quit:'Quit',Won:'Won',Lost:'Lost',Tied:'Tied',TimeExpired:'TimeExpired',First:'First',Second:'Second',Third:'Third',Fourth:'Fourth',EMPMatchOutcome_MAX:'EMPMatchOutcome_MAX', };
declare class QuitMatchCallbackProxy extends OnlineBlueprintCallProxyBase { 
	OnSuccess: UnrealEngineMulticastDelegate<() => void>;
	OnFailure: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): QuitMatchCallbackProxy;
	static Find(Outer: UObject, ResourceName: string): QuitMatchCallbackProxy;
	static GetDefaultObject(): QuitMatchCallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): QuitMatchCallbackProxy;
	static QuitMatch(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,Outcome: EMPMatchOutcome,TurnTimeoutInSeconds: number): QuitMatchCallbackProxy;
	static C(Other: UObject | any): QuitMatchCallbackProxy;
}

declare class ShowLoginUICallbackProxy extends BlueprintAsyncActionBase { 
	OnSuccess: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	OnFailure: UnrealEngineMulticastDelegate<(PlayerController: PlayerController) => void>;
	static Load(ResourceName: string): ShowLoginUICallbackProxy;
	static Find(Outer: UObject, ResourceName: string): ShowLoginUICallbackProxy;
	static GetDefaultObject(): ShowLoginUICallbackProxy;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ShowLoginUICallbackProxy;
	static ShowExternalLoginUI(WorldContextObject: UObject,InPlayerController: PlayerController): ShowLoginUICallbackProxy;
	static C(Other: UObject | any): ShowLoginUICallbackProxy;
}

declare class TestBeaconClient extends OnlineBeaconClient { 
	static GetDefaultObject(): TestBeaconClient;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBeaconClient;
	ServerPong(): void;
	ClientPing(): void;
	static C(Other: UObject | any): TestBeaconClient;
}

declare class TestBeaconHost extends OnlineBeaconHostObject { 
	static GetDefaultObject(): TestBeaconHost;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestBeaconHost;
	static C(Other: UObject | any): TestBeaconHost;
}

declare class TurnBasedBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): TurnBasedBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): TurnBasedBlueprintLibrary;
	static GetDefaultObject(): TurnBasedBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TurnBasedBlueprintLibrary;
	static RegisterTurnBasedMatchInterfaceObject(WorldContextObject: UObject,PlayerController: PlayerController,UObject: UObject): void;
	static GetPlayerDisplayName(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex: number,PlayerDisplayName?: string): {PlayerDisplayName: string};
	static GetMyPlayerIndex(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,PlayerIndex?: number): {PlayerIndex: number};
	static GetIsMyTurn(WorldContextObject: UObject,PlayerController: PlayerController,MatchID: string,bIsMyTurn?: boolean): {bIsMyTurn: boolean};
	static C(Other: UObject | any): TurnBasedBlueprintLibrary;
}

declare class VoipListenerSynthComponent extends SynthComponent { 
	static Load(ResourceName: string): VoipListenerSynthComponent;
	static Find(Outer: UObject, ResourceName: string): VoipListenerSynthComponent;
	static GetDefaultObject(): VoipListenerSynthComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VoipListenerSynthComponent;
	IsIdling(): boolean;
	static C(Other: UObject | any): VoipListenerSynthComponent;
}

declare class K2Node_InAppPurchase extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchase;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchase;
	static GetDefaultObject(): K2Node_InAppPurchase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchase;
	static C(Other: UObject | any): K2Node_InAppPurchase;
}

declare class K2Node_InAppPurchaseQuery extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseQuery;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseQuery;
	static GetDefaultObject(): K2Node_InAppPurchaseQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseQuery;
	static C(Other: UObject | any): K2Node_InAppPurchaseQuery;
}

declare class K2Node_InAppPurchaseRestore extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_InAppPurchaseRestore;
	static Find(Outer: UObject, ResourceName: string): K2Node_InAppPurchaseRestore;
	static GetDefaultObject(): K2Node_InAppPurchaseRestore;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_InAppPurchaseRestore;
	static C(Other: UObject | any): K2Node_InAppPurchaseRestore;
}

declare class K2Node_LatentOnlineCall extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_LatentOnlineCall;
	static Find(Outer: UObject, ResourceName: string): K2Node_LatentOnlineCall;
	static GetDefaultObject(): K2Node_LatentOnlineCall;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LatentOnlineCall;
	static C(Other: UObject | any): K2Node_LatentOnlineCall;
}

declare class K2Node_LeaderboardFlush extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_LeaderboardFlush;
	static Find(Outer: UObject, ResourceName: string): K2Node_LeaderboardFlush;
	static GetDefaultObject(): K2Node_LeaderboardFlush;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LeaderboardFlush;
	static C(Other: UObject | any): K2Node_LeaderboardFlush;
}

declare class K2Node_LeaderboardQuery extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_LeaderboardQuery;
	static Find(Outer: UObject, ResourceName: string): K2Node_LeaderboardQuery;
	static GetDefaultObject(): K2Node_LeaderboardQuery;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LeaderboardQuery;
	static C(Other: UObject | any): K2Node_LeaderboardQuery;
}

declare type ETiledMultiResLevel = 'ETiledMultiResLevel_Off' | 'ETiledMultiResLevel_LMSLow' | 'ETiledMultiResLevel_LMSMedium' | 'ETiledMultiResLevel_LMSHigh' | 'ETiledMultiResLevel_MAX';
declare var ETiledMultiResLevel : { ETiledMultiResLevel_Off:'ETiledMultiResLevel_Off',ETiledMultiResLevel_LMSLow:'ETiledMultiResLevel_LMSLow',ETiledMultiResLevel_LMSMedium:'ETiledMultiResLevel_LMSMedium',ETiledMultiResLevel_LMSHigh:'ETiledMultiResLevel_LMSHigh',ETiledMultiResLevel_MAX:'ETiledMultiResLevel_MAX', };
declare class HmdUserProfileField { 
	FieldName: string;
	FieldValue: string;
	clone() : HmdUserProfileField;
	static C(Other: UObject | any): HmdUserProfileField;
}

declare class HmdUserProfile { 
	Name: string;
	Gender: string;
	PlayerHeight: number;
	EyeHeight: number;
	IPD: number;
	NeckToEyeDistance: Vector2D;
	ExtraFields: HmdUserProfileField[];
	clone() : HmdUserProfile;
	static C(Other: UObject | any): HmdUserProfile;
	GetUserProfile(): {Profile: HmdUserProfile, $: boolean};
	static GetUserProfile(Profile?: HmdUserProfile): {Profile: HmdUserProfile, $: boolean};
}

declare class OculusFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): OculusFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): OculusFunctionLibrary;
	static GetDefaultObject(): OculusFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusFunctionLibrary;
	static ShowLoadingSplashScreen(): void;
	static ShowLoadingIcon(Texture: Texture2D): void;
	static SetTiledMultiresLevel(Level: ETiledMultiResLevel): void;
	static SetReorientHMDOnControllerRecenter(recenterMode: boolean): void;
	static SetPositionScale3D(PosScale3D: Vector): void;
	static SetLoadingSplashParams(TexturePath: string,DistanceInMeters: Vector,SizeInMeters: Vector2D,RotationAxis: Vector,RotationDeltaInDeg: number): void;
	static SetGuardianVisibility(GuardianVisible: boolean): void;
	static SetDisplayFrequency(RequestedFrequency: number): void;
	static SetCPUAndGPULevels(CPULevel: number,GPULevel: number): void;
	static SetBaseRotationAndPositionOffset(BaseRot: Rotator,PosOffset: Vector,Options: EOrientPositionSelector): void;
	static SetBaseRotationAndBaseOffsetInMeters(Rotation: Rotator,BaseOffsetInMeters: Vector,Options: EOrientPositionSelector): void;
	static IsLoadingIconEnabled(): boolean;
	static IsGuardianDisplayed(): boolean;
	static IsDeviceTracked(DeviceType: ETrackedDeviceType): boolean;
	static IsAutoLoadingSplashScreenEnabled(): boolean;
	static HideLoadingSplashScreen(bClear: boolean): void;
	static HideLoadingIcon(): void;
	static HasSystemOverlayPresent(): boolean;
	static HasInputFocus(): boolean;
	static GetUserProfile(Profile?: HmdUserProfile): {Profile: HmdUserProfile, $: boolean};
	static GetTiledMultiresLevel(): ETiledMultiResLevel;
	static GetRawSensorData(AngularAcceleration?: Vector,LinearAcceleration?: Vector,AngularVelocity?: Vector,LinearVelocity?: Vector,TimeInSeconds?: number,DeviceType?: ETrackedDeviceType): {AngularAcceleration: Vector, LinearAcceleration: Vector, AngularVelocity: Vector, LinearVelocity: Vector, TimeInSeconds: number};
	static GetPose(DeviceRotation?: Rotator,DevicePosition?: Vector,NeckPosition?: Vector,bUseOrienationForPlayerCamera?: boolean,bUsePositionForPlayerCamera?: boolean,PositionScale?: Vector): {DeviceRotation: Rotator, DevicePosition: Vector, NeckPosition: Vector};
	static GetPointGuardianIntersection(Point: Vector,BoundaryType: EBoundaryType): GuardianTestResult;
	static GetPlayAreaTransform(): Transform;
	static GetNodeGuardianIntersection(DeviceType: ETrackedDeviceType,BoundaryType: EBoundaryType): GuardianTestResult;
	static GetLoadingSplashParams(TexturePath?: string,DistanceInMeters?: Vector,SizeInMeters?: Vector2D,RotationAxis?: Vector,RotationDeltaInDeg?: number): {TexturePath: string, DistanceInMeters: Vector, SizeInMeters: Vector2D, RotationAxis: Vector, RotationDeltaInDeg: number};
	static GetGuardianPoints(BoundaryType: EBoundaryType): Vector[];
	static GetGuardianDimensions(BoundaryType: EBoundaryType): Vector;
	static GetGPUUtilization(IsGPUAvailable?: boolean,GPUUtilization?: number): {IsGPUAvailable: boolean, GPUUtilization: number};
	static GetGPUFrameTime(): number;
	static GetDeviceName(): string;
	static GetCurrentDisplayFrequency(): number;
	static GetBaseRotationAndPositionOffset(OutRot?: Rotator,OutPosOffset?: Vector): {OutRot: Rotator, OutPosOffset: Vector};
	static GetBaseRotationAndBaseOffsetInMeters(OutRotation?: Rotator,OutBaseOffsetInMeters?: Vector): {OutRotation: Rotator, OutBaseOffsetInMeters: Vector};
	static GetAvailableDisplayFrequencies(): number[];
	static EnablePositionTracking(bPositionTracking: boolean): void;
	static EnableOrientationTracking(bOrientationTracking: boolean): void;
	static EnableAutoLoadingSplashScreen(bAutoShowEnabled: boolean): void;
	static ClearLoadingSplashScreens(): void;
	static AddLoadingSplashScreen(Texture: Texture2D,TranslationInMeters: Vector,Rotation: Rotator,SizeInMeters: Vector2D,DeltaRotation: Rotator,bClearBeforeAdd: boolean): void;
	static C(Other: UObject | any): OculusFunctionLibrary;
}

declare class OculusSplashDesc { 
	TexturePath: SoftObjectPath;
	TransformInMeters: Transform;
	QuadSizeInMeters: Vector2D;
	DeltaRotation: Quat;
	TextureOffset: Vector2D;
	TextureScale: Vector2D;
	bNoAlphaChannel: boolean;
	clone() : OculusSplashDesc;
	static C(Other: UObject | any): OculusSplashDesc;
}

declare class OculusHMDRuntimeSettings extends UObject { 
	bAutoEnabled: boolean;
	SplashDescs: OculusSplashDesc[];
	static Load(ResourceName: string): OculusHMDRuntimeSettings;
	static Find(Outer: UObject, ResourceName: string): OculusHMDRuntimeSettings;
	static GetDefaultObject(): OculusHMDRuntimeSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusHMDRuntimeSettings;
	static C(Other: UObject | any): OculusHMDRuntimeSettings;
}

declare class OculusSceneCaptureCubemap extends UObject { 
	CaptureComponents: SceneCaptureComponent2D[];
	static Load(ResourceName: string): OculusSceneCaptureCubemap;
	static Find(Outer: UObject, ResourceName: string): OculusSceneCaptureCubemap;
	static GetDefaultObject(): OculusSceneCaptureCubemap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusSceneCaptureCubemap;
	static C(Other: UObject | any): OculusSceneCaptureCubemap;
}

declare class KismetProceduralMeshLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): KismetProceduralMeshLibrary;
	static Find(Outer: UObject, ResourceName: string): KismetProceduralMeshLibrary;
	static GetDefaultObject(): KismetProceduralMeshLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): KismetProceduralMeshLibrary;
	static SliceProceduralMesh(InProcMesh: ProceduralMeshComponent,PlanePosition: Vector,PlaneNormal: Vector,bCreateOtherHalf: boolean,OutOtherHalfProcMesh?: ProceduralMeshComponent,CapOption?: EProcMeshSliceCapOption,CapMaterial?: MaterialInterface): {OutOtherHalfProcMesh: ProceduralMeshComponent};
	static GetSectionFromStaticMesh(InMesh: StaticMesh,LODIndex: number,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
	static GetSectionFromProceduralMesh(InProcMesh: ProceduralMeshComponent,SectionIndex: number,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
	static GenerateBoxMesh(BoxRadius: Vector,Vertices?: Vector[],Triangles?: number[],Normals?: Vector[],UVs?: Vector2D[],Tangents?: ProcMeshTangent[]): {Vertices: Vector[], Triangles: number[], Normals: Vector[], UVs: Vector2D[], Tangents: ProcMeshTangent[]};
	static CreateGridMeshTriangles(NumX: number,NumY: number,bWinding: boolean,Triangles?: number[]): {Triangles: number[]};
	static CopyProceduralMeshFromStaticMeshComponent(StaticMeshComponent: StaticMeshComponent,LODIndex: number,ProcMeshComponent: ProceduralMeshComponent,bCreateCollision: boolean): void;
	static ConvertQuadToTriangles(Triangles?: number[],Vert0?: number,Vert1?: number,Vert2?: number,Vert3?: number): {Triangles: number[]};
	static CalculateTangentsForMesh(Vertices: Vector[],Triangles: number[],UVs: Vector2D[],Normals?: Vector[],Tangents?: ProcMeshTangent[]): {Normals: Vector[], Tangents: ProcMeshTangent[]};
	static C(Other: UObject | any): KismetProceduralMeshLibrary;
}

declare class SteamVRChaperoneComponent extends ActorComponent { 
	OnLeaveBounds: UnrealEngineMulticastDelegate<() => void>;
	OnReturnToBounds: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): SteamVRChaperoneComponent;
	static Find(Outer: UObject, ResourceName: string): SteamVRChaperoneComponent;
	static GetDefaultObject(): SteamVRChaperoneComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SteamVRChaperoneComponent;
	GetBounds(): Vector[];
	static C(Other: UObject | any): SteamVRChaperoneComponent;
}

declare type ESteamVRTrackedDeviceType = 'Controller' | 'TrackingReference' | 'Other' | 'Invalid' | 'ESteamVRTrackedDeviceType_MAX';
declare var ESteamVRTrackedDeviceType : { Controller:'Controller',TrackingReference:'TrackingReference',Other:'Other',Invalid:'Invalid',ESteamVRTrackedDeviceType_MAX:'ESteamVRTrackedDeviceType_MAX', };
declare class SteamVRFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SteamVRFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): SteamVRFunctionLibrary;
	static GetDefaultObject(): SteamVRFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SteamVRFunctionLibrary;
	static GetValidTrackedDeviceIds(DeviceType: ESteamVRTrackedDeviceType,OutTrackedDeviceIds?: number[]): {OutTrackedDeviceIds: number[]};
	static GetTrackedDevicePositionAndOrientation(DeviceID: number,OutPosition?: Vector,OutOrientation?: Rotator): {OutPosition: Vector, OutOrientation: Rotator, $: boolean};
	static GetHandPositionAndOrientation(ControllerIndex: number,Hand: EControllerHand,OutPosition?: Vector,OutOrientation?: Rotator): {OutPosition: Vector, OutOrientation: Rotator, $: boolean};
	static C(Other: UObject | any): SteamVRFunctionLibrary;
}

declare type ECompilerVersion = 'Default' | 'VisualStudio2015' | 'VisualStudio2017' | 'ECompilerVersion_MAX';
declare var ECompilerVersion : { Default:'Default',VisualStudio2015:'VisualStudio2015',VisualStudio2017:'VisualStudio2017',ECompilerVersion_MAX:'ECompilerVersion_MAX', };
declare type EMinimumSupportedOS = 'MSOS_Vista' | 'MSOS_MAX';
declare var EMinimumSupportedOS : { MSOS_Vista:'MSOS_Vista',MSOS_MAX:'MSOS_MAX', };
declare class WindowsTargetSettings extends UObject { 
	Compiler: ECompilerVersion;
	TargetedRHIs: string[];
	MinimumOSVersion: EMinimumSupportedOS;
	AudioDevice: string;
	AudioSampleRate: number;
	AudioCallbackBufferFrameSize: number;
	AudioNumBuffersToEnqueue: number;
	AudioMaxChannels: number;
	AudioNumSourceWorkers: number;
	SpatializationPlugin: string;
	ReverbPlugin: string;
	OcclusionPlugin: string;
	static Load(ResourceName: string): WindowsTargetSettings;
	static Find(Outer: UObject, ResourceName: string): WindowsTargetSettings;
	static GetDefaultObject(): WindowsTargetSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WindowsTargetSettings;
	static C(Other: UObject | any): WindowsTargetSettings;
}

declare class SourceCodeAccessSettings extends UObject { 
	PreferredAccessor: string;
	static Load(ResourceName: string): SourceCodeAccessSettings;
	static Find(Outer: UObject, ResourceName: string): SourceCodeAccessSettings;
	static GetDefaultObject(): SourceCodeAccessSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SourceCodeAccessSettings;
	static C(Other: UObject | any): SourceCodeAccessSettings;
}

declare class AssetToolsImpl extends UObject { 
	static Load(ResourceName: string): AssetToolsImpl;
	static Find(Outer: UObject, ResourceName: string): AssetToolsImpl;
	static GetDefaultObject(): AssetToolsImpl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetToolsImpl;
	static C(Other: UObject | any): AssetToolsImpl;
}

declare class AssetRenameData { 
	Asset: any;
	NewPackagePath: string;
	NewName: string;
	OldObjectPath: SoftObjectPath;
	NewObjectPath: SoftObjectPath;
	bOnlyFixSoftReferences: boolean;
	clone() : AssetRenameData;
	static C(Other: UObject | any): AssetRenameData;
}

declare class AssetTools extends Interface { 
	static Load(ResourceName: string): AssetTools;
	static Find(Outer: UObject, ResourceName: string): AssetTools;
	static GetDefaultObject(): AssetTools;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetTools;
	RenameAssetsWithDialog(AssetsAndNames: AssetRenameData[],bAutoCheckout: boolean): void;
	RenameAssets(AssetsAndNames: AssetRenameData[]): boolean;
	OpenEditorForAssets(Assets: UObject[]): void;
	ImportAssetTasks(ImportTasks: AssetImportTask[]): void;
	ImportAssetsWithDialog(DestinationPath: string): UObject[];
	ImportAssetsAutomated(ImportData: AutomatedAssetImportData): UObject[];
	FindSoftReferencesToObject(TargetObject: SoftObjectPath,ReferencingObjects?: UObject[]): {ReferencingObjects: UObject[]};
	ExportAssetsWithDialog(AssetsToExport: string[],bPromptForIndividualFilenames: boolean): void;
	ExportAssets(AssetsToExport: string[],ExportPath: string): void;
	DuplicateAssetWithDialog(AssetName: string,PackagePath: string,OriginalObject: UObject): UObject;
	DuplicateAsset(AssetName: string,PackagePath: string,OriginalObject: UObject): UObject;
	CreateUniqueAssetName(InBasePackageName: string,InSuffix: string,OutPackageName?: string,OutAssetName?: string): {OutPackageName: string, OutAssetName: string};
	CreateAssetWithDialog(AssetName: string,PackagePath: string,AssetClass: UnrealEngineClass,Factory: Factory,CallingContext: string): UObject;
	CreateAsset(AssetName: string,PackagePath: string,AssetClass: UnrealEngineClass,Factory: Factory,CallingContext: string): UObject;
	static C(Other: UObject | any): AssetTools;
}

declare class AssetToolsHelpers extends UObject { 
	static Load(ResourceName: string): AssetToolsHelpers;
	static Find(Outer: UObject, ResourceName: string): AssetToolsHelpers;
	static GetDefaultObject(): AssetToolsHelpers;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AssetToolsHelpers;
	static C(Other: UObject | any): AssetToolsHelpers;
}

declare class AutomationBlueprintFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): AutomationBlueprintFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): AutomationBlueprintFunctionLibrary;
	static GetDefaultObject(): AutomationBlueprintFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationBlueprintFunctionLibrary;
	static TakeAutomationScreenshotOfUI(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Options: AutomationScreenshotOptions): void;
	static TakeAutomationScreenshotAtCamera(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Camera: CameraActor,NameOverride: string,Notes: string,Options: AutomationScreenshotOptions): void;
	static TakeAutomationScreenshot(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Name: string,Notes: string,Options: AutomationScreenshotOptions): void;
	static SetScalabilityQualityToLow(WorldContextObject: UObject): void;
	static SetScalabilityQualityToEpic(WorldContextObject: UObject): void;
	static SetScalabilityQualityLevelRelativeToMax(WorldContextObject: UObject,Value: number): void;
	static GetStatIncMax(StatName: string): number;
	static GetStatIncAverage(StatName: string): number;
	static GetStatExcMax(StatName: string): number;
	static GetStatExcAverage(StatName: string): number;
	static GetStatCallCount(StatName: string): number;
	static GetDefaultScreenshotOptionsForRendering(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
	static GetDefaultScreenshotOptionsForGameplay(Tolerance: EComparisonTolerance,Delay: number): AutomationScreenshotOptions;
	static EnableStatGroup(WorldContextObject: UObject,GroupName: string): void;
	static DisableStatGroup(WorldContextObject: UObject,GroupName: string): void;
	static AreAutomatedTestsRunning(): boolean;
	static C(Other: UObject | any): AutomationBlueprintFunctionLibrary;
}

declare class FuncTestRenderingComponent extends PrimitiveComponent { 
	static Load(ResourceName: string): FuncTestRenderingComponent;
	static Find(Outer: UObject, ResourceName: string): FuncTestRenderingComponent;
	static GetDefaultObject(): FuncTestRenderingComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FuncTestRenderingComponent;
	static C(Other: UObject | any): FuncTestRenderingComponent;
}

declare type EFunctionalTestResult = 'Default' | 'Invalid' | 'Error' | 'Running' | 'Failed' | 'Succeeded' | 'EFunctionalTestResult_MAX';
declare var EFunctionalTestResult : { Default:'Default',Invalid:'Invalid',Error:'Error',Running:'Running',Failed:'Failed',Succeeded:'Succeeded',EFunctionalTestResult_MAX:'EFunctionalTestResult_MAX', };
declare type EComparisonMethod = 'Equal_To' | 'Not_Equal_To' | 'Greater_Than_Or_Equal_To' | 'Less_Than_Or_Equal_To' | 'Greater_Than' | 'Less_Than' | 'EComparisonMethod_MAX';
declare var EComparisonMethod : { Equal_To:'Equal_To',Not_Equal_To:'Not_Equal_To',Greater_Than_Or_Equal_To:'Greater_Than_Or_Equal_To',Less_Than_Or_Equal_To:'Less_Than_Or_Equal_To',Greater_Than:'Greater_Than',Less_Than:'Less_Than',EComparisonMethod_MAX:'EComparisonMethod_MAX', };
declare class FunctionalTest extends Actor { 
	SpriteComponent: BillboardComponent;
	bIsEnabled: boolean;
	bWarningsAsErrors: boolean;
	Author: string;
	Description: string;
	ObservationPoint: Actor;
	RandomNumbersStream: RandomStream;
	Result: EFunctionalTestResult;
	PreparationTimeLimit: number;
	TimeLimit: number;
	TimesUpMessage: string;
	TimesUpResult: EFunctionalTestResult;
	OnTestPrepare: UnrealEngineMulticastDelegate<() => void>;
	OnTestStart: UnrealEngineMulticastDelegate<() => void>;
	OnTestFinished: UnrealEngineMulticastDelegate<() => void>;
	AutoDestroyActors: Actor[];
	RenderComp: FuncTestRenderingComponent;
	TestName: TextRenderComponent;
	bIsRunning: boolean;
	TotalTime: number;
	static GetDefaultObject(): FunctionalTest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTest;
	SetTimeLimit(NewTimeLimit: number,ResultWhenTimeRunsOut: EFunctionalTestResult): void;
	RegisterAutoDestroyActor(ActorToAutoDestroy: Actor): void;
	ReceiveStartTest(): void;
	ReceivePrepareTest(): void;
	OnWantsReRunCheck(): boolean;
	OnAdditionalTestFinishedMessageRequest(TestResult: EFunctionalTestResult): string;
	LogMessage(Message: string): void;
	IsRunning(): boolean;
	IsReady(): boolean;
	IsEnabled(): boolean;
	GetCurrentRerunReason(): string;
	FinishTest(TestResult: EFunctionalTestResult,Message: string): void;
	DebugGatherRelevantActors(): Actor[];
	AssertValue_Int(Actual: number,ShouldBe: EComparisonMethod,Expected: number,What: string,ContextObject: UObject): boolean;
	AssertValue_Float(Actual: number,ShouldBe: EComparisonMethod,Expected: number,What: string,ContextObject: UObject): boolean;
	AssertValue_DateTime(Actual: DateTime,ShouldBe: EComparisonMethod,Expected: DateTime,What: string,ContextObject: UObject): boolean;
	AssertTrue(Condition: boolean,Message: string,ContextObject: UObject): boolean;
	AssertNotEqual_Vector(Actual: Vector,NotExpected: Vector,What: string,ContextObject: UObject): boolean;
	AssertNotEqual_Transform(Actual: Transform,NotExpected: Transform,What: string,ContextObject: UObject): boolean;
	AssertNotEqual_String(Actual: string,NotExpected: string,What: string,ContextObject: UObject): boolean;
	AssertNotEqual_Rotator(Actual: Rotator,NotExpected: Rotator,What: string,ContextObject: UObject): boolean;
	AssertIsValid(UObject: UObject,Message: string,ContextObject: UObject): boolean;
	AssertFalse(Condition: boolean,Message: string,ContextObject: UObject): boolean;
	AssertEqual_Vector(Actual: Vector,Expected: Vector,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_Transform(Actual: Transform,Expected: Transform,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_TraceQueryResults(Actual: TraceQueryTestResults,Expected: TraceQueryTestResults,What: string,ContextObject: UObject): boolean;
	AssertEqual_String(Actual: string,Expected: string,What: string,ContextObject: UObject): boolean;
	AssertEqual_Rotator(Actual: Rotator,Expected: Rotator,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_Name(Actual: string,Expected: string,What: string,ContextObject: UObject): boolean;
	AssertEqual_Int(Actual: number,Expected: number,What: string,ContextObject: UObject): boolean;
	AssertEqual_Float(Actual: number,Expected: number,What: string,Tolerance: number,ContextObject: UObject): boolean;
	AssertEqual_Bool(Actual: boolean,Expected: boolean,What: string,ContextObject: UObject): boolean;
	AddWarning(Message: string): void;
	AddRerun(Reason: string): void;
	AddError(Message: string): void;
	static C(Other: UObject | any): FunctionalTest;
}

declare class GenericTeamId { 
	TeamID: number;
	clone() : GenericTeamId;
	static C(Other: UObject | any): GenericTeamId;
}

declare class AITestSpawnInfo { 
	PawnClass: UnrealEngineClass;
	ControllerClass: UnrealEngineClass;
	TeamID: GenericTeamId;
	BehaviorTree: BehaviorTree;
	SpawnLocation: Actor;
	NumberToSpawn: number;
	SpawnDelay: number;
	PreSpawnDelay: number;
	clone() : AITestSpawnInfo;
	static C(Other: UObject | any): AITestSpawnInfo;
}

declare class AITestSpawnSet { 
	SpawnInfoContainer: AITestSpawnInfo[];
	Name: string;
	bEnabled: boolean;
	FallbackSpawnLocation: Actor;
	clone() : AITestSpawnSet;
	static C(Other: UObject | any): AITestSpawnSet;
}

declare class PendingDelayedSpawn extends AITestSpawnInfo { 
	clone() : PendingDelayedSpawn;
	static C(Other: UObject | any): PendingDelayedSpawn;
}

declare class FunctionalAITest extends FunctionalTest { 
	SpawnSets: AITestSpawnSet[];
	SpawnLocationRandomizationRange: number;
	SpawnedPawns: Pawn[];
	PendingDelayedSpawns: PendingDelayedSpawn[];
	CurrentSpawnSetIndex: number;
	CurrentSpawnSetName: string;
	OnAISpawned: UnrealEngineMulticastDelegate<(Controller: AIController, Pawn: Pawn) => void>;
	OnAllAISPawned: UnrealEngineMulticastDelegate<() => void>;
	NavMeshDebugOrigin: Vector;
	NavMeshDebugExtent: Vector;
	bWaitForNavMesh: boolean;
	bDebugNavMeshOnTimeout: boolean;
	static GetDefaultObject(): FunctionalAITest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalAITest;
	IsOneOfSpawnedPawns(Actor: Actor): boolean;
	static C(Other: UObject | any): FunctionalAITest;
}

declare class AutomationPerformaceHelper extends UObject { 
	static Load(ResourceName: string): AutomationPerformaceHelper;
	static Find(Outer: UObject, ResourceName: string): AutomationPerformaceHelper;
	static GetDefaultObject(): AutomationPerformaceHelper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AutomationPerformaceHelper;
	WriteLogFile(CaptureDir: string,CaptureExtension: string): void;
	TriggerGPUTraceIfRecordFallsBelowBudget(): void;
	Tick(DeltaSeconds: number): void;
	StopCPUProfiling(): void;
	StartCPUProfiling(): void;
	Sample(DeltaSeconds: number): void;
	OnBeginTests(): void;
	OnAllTestsComplete(): void;
	IsRecording(): boolean;
	IsCurrentRecordWithinRenderThreadBudget(): boolean;
	IsCurrentRecordWithinGPUBudget(): boolean;
	IsCurrentRecordWithinGameThreadBudget(): boolean;
	EndStatsFile(): void;
	EndRecordingBaseline(): void;
	EndRecording(): void;
	BeginStatsFile(RecordName: string): void;
	BeginRecordingBaseline(RecordName: string): void;
	BeginRecording(RecordName: string,InGPUBudget: number,InRenderThreadBudget: number,InGameThreadBudget: number): void;
	static C(Other: UObject | any): AutomationPerformaceHelper;
}

declare class FunctionalTestGameMode extends GameModeBase { 
	static GetDefaultObject(): FunctionalTestGameMode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestGameMode;
	static C(Other: UObject | any): FunctionalTestGameMode;
}

declare class FunctionalTestingManager extends BlueprintFunctionLibrary { 
	TestsLeft: FunctionalTest[];
	AllTests: FunctionalTest[];
	OnSetupTests: UnrealEngineMulticastDelegate<() => void>;
	OnTestsComplete: UnrealEngineMulticastDelegate<() => void>;
	OnTestsBegin: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): FunctionalTestingManager;
	static Find(Outer: UObject, ResourceName: string): FunctionalTestingManager;
	static GetDefaultObject(): FunctionalTestingManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestingManager;
	static RunAllFunctionalTests(WorldContextObject: UObject,bNewLog: boolean,bRunLooped: boolean,FailedTestsReproString: string): boolean;
	static C(Other: UObject | any): FunctionalTestingManager;
}

declare class PhasedAutomationActorBase extends Actor { 
	static GetDefaultObject(): PhasedAutomationActorBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PhasedAutomationActorBase;
	OnFunctionalTestingComplete(): void;
	OnFunctionalTestingBegin(): void;
	static C(Other: UObject | any): PhasedAutomationActorBase;
}

declare class FunctionalTestLevelScript extends LevelScriptActor { 
	static GetDefaultObject(): FunctionalTestLevelScript;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestLevelScript;
	static C(Other: UObject | any): FunctionalTestLevelScript;
}

declare class FunctionalTestUtilityLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): FunctionalTestUtilityLibrary;
	static Find(Outer: UObject, ResourceName: string): FunctionalTestUtilityLibrary;
	static GetDefaultObject(): FunctionalTestUtilityLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalTestUtilityLibrary;
	static TraceChannelTestUtil(WorldContextObject: UObject,BatchOptions: TraceChannelTestBatchOptions,Start: Vector,End: Vector,SphereCapsuleRadius: number,CapsuleHalfHeight: number,BoxHalfSize: Vector,Orientation: Rotator,TraceChannel: ETraceTypeQuery,ObjectTypes: EObjectTypeQuery[],ProfileName: string,bTraceComplex: boolean,ActorsToIgnore: Actor[],bIgnoreSelf: boolean,DrawDebugType: EDrawDebugTrace,TraceColor: LinearColor,TraceHitColor: LinearColor,DrawTime: number): TraceQueryTestResults;
	static C(Other: UObject | any): FunctionalTestUtilityLibrary;
}

declare class ScreenshotFunctionalTestBase extends FunctionalTest { 
	Notes: string;
	ScreenshotCamera: CameraComponent;
	ScreenshotOptions: AutomationScreenshotOptions;
	static GetDefaultObject(): ScreenshotFunctionalTestBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScreenshotFunctionalTestBase;
	static C(Other: UObject | any): ScreenshotFunctionalTestBase;
}

declare type EWidgetTestAppearLocation = 'Viewport' | 'PlayerScreen' | 'EWidgetTestAppearLocation_MAX';
declare var EWidgetTestAppearLocation : { Viewport:'Viewport',PlayerScreen:'PlayerScreen',EWidgetTestAppearLocation_MAX:'EWidgetTestAppearLocation_MAX', };
declare class FunctionalUIScreenshotTest extends ScreenshotFunctionalTestBase { 
	WidgetClass: UnrealEngineClass;
	SpawnedWidget: UserWidget;
	WidgetLocation: EWidgetTestAppearLocation;
	ScreenshotRT: TextureRenderTarget2D;
	static GetDefaultObject(): FunctionalUIScreenshotTest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FunctionalUIScreenshotTest;
	static C(Other: UObject | any): FunctionalUIScreenshotTest;
}

declare class GroundTruthData extends UObject { 
	bResetGroundTruth: boolean;
	ObjectData: UObject;
	static Load(ResourceName: string): GroundTruthData;
	static Find(Outer: UObject, ResourceName: string): GroundTruthData;
	static GetDefaultObject(): GroundTruthData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GroundTruthData;
	SaveObject(GroundTruth: UObject): void;
	LoadObject(): UObject;
	CanModify(): boolean;
	static C(Other: UObject | any): GroundTruthData;
}

declare class ScreenshotFunctionalTest extends ScreenshotFunctionalTestBase { 
	bCameraCutOnScreenshotPrep: boolean;
	static GetDefaultObject(): ScreenshotFunctionalTest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ScreenshotFunctionalTest;
	static C(Other: UObject | any): ScreenshotFunctionalTest;
}

declare class TestPhaseComponent extends SceneComponent { 
	static Load(ResourceName: string): TestPhaseComponent;
	static Find(Outer: UObject, ResourceName: string): TestPhaseComponent;
	static GetDefaultObject(): TestPhaseComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TestPhaseComponent;
	static C(Other: UObject | any): TestPhaseComponent;
}

declare class AIGraph extends EdGraph { 
	GraphVersion: number;
	static Load(ResourceName: string): AIGraph;
	static Find(Outer: UObject, ResourceName: string): AIGraph;
	static GetDefaultObject(): AIGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIGraph;
	static C(Other: UObject | any): AIGraph;
}

declare class GraphNodeClassData { 
	AssetName: string;
	GeneratedClassPackage: string;
	ClassName: string;
	Category: string;
	clone() : GraphNodeClassData;
	static C(Other: UObject | any): GraphNodeClassData;
}

declare class AIGraphNode extends EdGraphNode { 
	ClassData: GraphNodeClassData;
	NodeInstance: UObject;
	ParentNode: AIGraphNode;
	SubNodes: AIGraphNode[];
	CopySubNodeIndex: number;
	bIsReadOnly: boolean;
	bIsSubNode: boolean;
	ErrorMessage: string;
	static Load(ResourceName: string): AIGraphNode;
	static Find(Outer: UObject, ResourceName: string): AIGraphNode;
	static GetDefaultObject(): AIGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIGraphNode;
	static C(Other: UObject | any): AIGraphNode;
}

declare class AIGraphSchema extends EdGraphSchema { 
	static Load(ResourceName: string): AIGraphSchema;
	static Find(Outer: UObject, ResourceName: string): AIGraphSchema;
	static GetDefaultObject(): AIGraphSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AIGraphSchema;
	static C(Other: UObject | any): AIGraphSchema;
}

declare class K2Node_AIMoveTo extends K2Node_BaseAsyncTask { 
	static Load(ResourceName: string): K2Node_AIMoveTo;
	static Find(Outer: UObject, ResourceName: string): K2Node_AIMoveTo;
	static GetDefaultObject(): K2Node_AIMoveTo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_AIMoveTo;
	static C(Other: UObject | any): K2Node_AIMoveTo;
}

declare class BehaviorTreeDecoratorGraph extends EdGraph { 
	static Load(ResourceName: string): BehaviorTreeDecoratorGraph;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeDecoratorGraph;
	static GetDefaultObject(): BehaviorTreeDecoratorGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeDecoratorGraph;
	static C(Other: UObject | any): BehaviorTreeDecoratorGraph;
}

declare class BehaviorTreeDecoratorGraphNode extends EdGraphNode { 
	static Load(ResourceName: string): BehaviorTreeDecoratorGraphNode;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeDecoratorGraphNode;
	static GetDefaultObject(): BehaviorTreeDecoratorGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeDecoratorGraphNode;
	static C(Other: UObject | any): BehaviorTreeDecoratorGraphNode;
}

declare class BehaviorTreeDecoratorGraphNode_Decorator extends BehaviorTreeDecoratorGraphNode { 
	NodeInstance: UObject;
	ClassData: GraphNodeClassData;
	static Load(ResourceName: string): BehaviorTreeDecoratorGraphNode_Decorator;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeDecoratorGraphNode_Decorator;
	static GetDefaultObject(): BehaviorTreeDecoratorGraphNode_Decorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeDecoratorGraphNode_Decorator;
	static C(Other: UObject | any): BehaviorTreeDecoratorGraphNode_Decorator;
}

declare type EDecoratorLogicMode = 'Sink' | 'And' | 'Or' | 'Not' | 'EDecoratorLogicMode_MAX';
declare var EDecoratorLogicMode : { Sink:'Sink',And:'And',Or:'Or',Not:'Not',EDecoratorLogicMode_MAX:'EDecoratorLogicMode_MAX', };
declare class BehaviorTreeDecoratorGraphNode_Logic extends BehaviorTreeDecoratorGraphNode { 
	LogicMode: EDecoratorLogicMode;
	static Load(ResourceName: string): BehaviorTreeDecoratorGraphNode_Logic;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeDecoratorGraphNode_Logic;
	static GetDefaultObject(): BehaviorTreeDecoratorGraphNode_Logic;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeDecoratorGraphNode_Logic;
	static C(Other: UObject | any): BehaviorTreeDecoratorGraphNode_Logic;
}

declare class BehaviorTreeEditorTypes extends UObject { 
	static Load(ResourceName: string): BehaviorTreeEditorTypes;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeEditorTypes;
	static GetDefaultObject(): BehaviorTreeEditorTypes;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeEditorTypes;
	static C(Other: UObject | any): BehaviorTreeEditorTypes;
}

declare class BehaviorTreeFactory extends Factory { 
	static Load(ResourceName: string): BehaviorTreeFactory;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeFactory;
	static GetDefaultObject(): BehaviorTreeFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeFactory;
	static C(Other: UObject | any): BehaviorTreeFactory;
}

declare class BehaviorTreeGraph extends AIGraph { 
	ModCounter: number;
	bIsUsingModCounter: boolean;
	static Load(ResourceName: string): BehaviorTreeGraph;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraph;
	static GetDefaultObject(): BehaviorTreeGraph;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraph;
	static C(Other: UObject | any): BehaviorTreeGraph;
}

declare class BehaviorTreeGraphNode extends AIGraphNode { 
	Decorators: BehaviorTreeGraphNode[];
	Services: BehaviorTreeGraphNode[];
	bInjectedNode: boolean;
	static Load(ResourceName: string): BehaviorTreeGraphNode;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode;
	static GetDefaultObject(): BehaviorTreeGraphNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode;
	static C(Other: UObject | any): BehaviorTreeGraphNode;
}

declare class BehaviorTreeGraphNode_Composite extends BehaviorTreeGraphNode { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_Composite;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Composite;
	static GetDefaultObject(): BehaviorTreeGraphNode_Composite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Composite;
	static C(Other: UObject | any): BehaviorTreeGraphNode_Composite;
}

declare class BehaviorTreeGraphNode_CompositeDecorator extends BehaviorTreeGraphNode { 
	BoundGraph: EdGraph;
	CompositeName: string;
	bShowOperations: boolean;
	bCanAbortFlow: boolean;
	ParentNodeInstance: BTCompositeNode;
	CachedDescription: string;
	static Load(ResourceName: string): BehaviorTreeGraphNode_CompositeDecorator;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_CompositeDecorator;
	static GetDefaultObject(): BehaviorTreeGraphNode_CompositeDecorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_CompositeDecorator;
	static C(Other: UObject | any): BehaviorTreeGraphNode_CompositeDecorator;
}

declare class BehaviorTreeGraphNode_Decorator extends BehaviorTreeGraphNode { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_Decorator;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Decorator;
	static GetDefaultObject(): BehaviorTreeGraphNode_Decorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Decorator;
	static C(Other: UObject | any): BehaviorTreeGraphNode_Decorator;
}

declare class BehaviorTreeGraphNode_Root extends BehaviorTreeGraphNode { 
	BlackboardAsset: BlackboardData;
	static Load(ResourceName: string): BehaviorTreeGraphNode_Root;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Root;
	static GetDefaultObject(): BehaviorTreeGraphNode_Root;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Root;
	static C(Other: UObject | any): BehaviorTreeGraphNode_Root;
}

declare class BehaviorTreeGraphNode_Service extends BehaviorTreeGraphNode { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_Service;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Service;
	static GetDefaultObject(): BehaviorTreeGraphNode_Service;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Service;
	static C(Other: UObject | any): BehaviorTreeGraphNode_Service;
}

declare class BehaviorTreeGraphNode_SimpleParallel extends BehaviorTreeGraphNode_Composite { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_SimpleParallel;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_SimpleParallel;
	static GetDefaultObject(): BehaviorTreeGraphNode_SimpleParallel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_SimpleParallel;
	static C(Other: UObject | any): BehaviorTreeGraphNode_SimpleParallel;
}

declare class BehaviorTreeGraphNode_Task extends BehaviorTreeGraphNode { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_Task;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_Task;
	static GetDefaultObject(): BehaviorTreeGraphNode_Task;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_Task;
	static C(Other: UObject | any): BehaviorTreeGraphNode_Task;
}

declare class BehaviorTreeGraphNode_SubtreeTask extends BehaviorTreeGraphNode_Task { 
	static Load(ResourceName: string): BehaviorTreeGraphNode_SubtreeTask;
	static Find(Outer: UObject, ResourceName: string): BehaviorTreeGraphNode_SubtreeTask;
	static GetDefaultObject(): BehaviorTreeGraphNode_SubtreeTask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BehaviorTreeGraphNode_SubtreeTask;
	static C(Other: UObject | any): BehaviorTreeGraphNode_SubtreeTask;
}

declare class BlackboardDataFactory extends Factory { 
	static Load(ResourceName: string): BlackboardDataFactory;
	static Find(Outer: UObject, ResourceName: string): BlackboardDataFactory;
	static GetDefaultObject(): BlackboardDataFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackboardDataFactory;
	static C(Other: UObject | any): BlackboardDataFactory;
}

declare class EdGraphSchema_BehaviorTree extends AIGraphSchema { 
	static Load(ResourceName: string): EdGraphSchema_BehaviorTree;
	static Find(Outer: UObject, ResourceName: string): EdGraphSchema_BehaviorTree;
	static GetDefaultObject(): EdGraphSchema_BehaviorTree;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphSchema_BehaviorTree;
	static C(Other: UObject | any): EdGraphSchema_BehaviorTree;
}

declare class EdGraphSchema_BehaviorTreeDecorator extends EdGraphSchema { 
	PC_Boolean: string;
	static Load(ResourceName: string): EdGraphSchema_BehaviorTreeDecorator;
	static Find(Outer: UObject, ResourceName: string): EdGraphSchema_BehaviorTreeDecorator;
	static GetDefaultObject(): EdGraphSchema_BehaviorTreeDecorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphSchema_BehaviorTreeDecorator;
	static C(Other: UObject | any): EdGraphSchema_BehaviorTreeDecorator;
}

declare class K2Node_LatentGameplayTaskCall extends K2Node_BaseAsyncTask { 
	SpawnParamPins: string[];
	static Load(ResourceName: string): K2Node_LatentGameplayTaskCall;
	static Find(Outer: UObject, ResourceName: string): K2Node_LatentGameplayTaskCall;
	static GetDefaultObject(): K2Node_LatentGameplayTaskCall;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): K2Node_LatentGameplayTaskCall;
	static C(Other: UObject | any): K2Node_LatentGameplayTaskCall;
}

declare class Overlays extends UObject { 
	static Load(ResourceName: string): Overlays;
	static Find(Outer: UObject, ResourceName: string): Overlays;
	static GetDefaultObject(): Overlays;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): Overlays;
	static C(Other: UObject | any): Overlays;
}

declare class OverlayItem { 
	StartTime: Timespan;
	EndTime: Timespan;
	text: string;
	Position: Vector2D;
	clone() : OverlayItem;
	static C(Other: UObject | any): OverlayItem;
}

declare class BasicOverlays extends Overlays { 
	Overlays: OverlayItem[];
	AssetImportData: AssetImportData;
	static Load(ResourceName: string): BasicOverlays;
	static Find(Outer: UObject, ResourceName: string): BasicOverlays;
	static GetDefaultObject(): BasicOverlays;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BasicOverlays;
	static C(Other: UObject | any): BasicOverlays;
}

declare class LocalizedOverlays extends Overlays { 
	DefaultOverlays: BasicOverlays;
	LocaleToOverlaysMap: any;
	AssetImportData: AssetImportData;
	static Load(ResourceName: string): LocalizedOverlays;
	static Find(Outer: UObject, ResourceName: string): LocalizedOverlays;
	static GetDefaultObject(): LocalizedOverlays;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizedOverlays;
	static C(Other: UObject | any): LocalizedOverlays;
}

declare class BasicOverlaysFactory extends Factory { 
	static Load(ResourceName: string): BasicOverlaysFactory;
	static Find(Outer: UObject, ResourceName: string): BasicOverlaysFactory;
	static GetDefaultObject(): BasicOverlaysFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BasicOverlaysFactory;
	static C(Other: UObject | any): BasicOverlaysFactory;
}

declare class BasicOverlaysFactoryNew extends Factory { 
	static Load(ResourceName: string): BasicOverlaysFactoryNew;
	static Find(Outer: UObject, ResourceName: string): BasicOverlaysFactoryNew;
	static GetDefaultObject(): BasicOverlaysFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BasicOverlaysFactoryNew;
	static C(Other: UObject | any): BasicOverlaysFactoryNew;
}

declare class LocalizedOverlaysFactoryNew extends Factory { 
	static Load(ResourceName: string): LocalizedOverlaysFactoryNew;
	static Find(Outer: UObject, ResourceName: string): LocalizedOverlaysFactoryNew;
	static GetDefaultObject(): LocalizedOverlaysFactoryNew;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocalizedOverlaysFactoryNew;
	static C(Other: UObject | any): LocalizedOverlaysFactoryNew;
}

declare class ReimportBasicOverlaysFactory extends BasicOverlaysFactory { 
	static Load(ResourceName: string): ReimportBasicOverlaysFactory;
	static Find(Outer: UObject, ResourceName: string): ReimportBasicOverlaysFactory;
	static GetDefaultObject(): ReimportBasicOverlaysFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReimportBasicOverlaysFactory;
	static C(Other: UObject | any): ReimportBasicOverlaysFactory;
}

declare class MediaSource extends UObject { 
	static Load(ResourceName: string): MediaSource;
	static Find(Outer: UObject, ResourceName: string): MediaSource;
	static GetDefaultObject(): MediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaSource;
	Validate(): boolean;
	GetUrl(): string;
	static C(Other: UObject | any): MediaSource;
}

declare class BaseMediaSource extends MediaSource { 
	PlatformPlayerNames: any;
	PlayerName: string;
	static Load(ResourceName: string): BaseMediaSource;
	static Find(Outer: UObject, ResourceName: string): BaseMediaSource;
	static GetDefaultObject(): BaseMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BaseMediaSource;
	static C(Other: UObject | any): BaseMediaSource;
}

declare class FileMediaSource extends BaseMediaSource { 
	FilePath: string;
	PrecacheFile: boolean;
	static Load(ResourceName: string): FileMediaSource;
	static Find(Outer: UObject, ResourceName: string): FileMediaSource;
	static GetDefaultObject(): FileMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FileMediaSource;
	SetFilePath(Path: string): void;
	static C(Other: UObject | any): FileMediaSource;
}

declare class MediaCaptureDevice { 
	DisplayName: string;
	URL: string;
	clone() : MediaCaptureDevice;
	static C(Other: UObject | any): MediaCaptureDevice;
}

declare class MediaBlueprintFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): MediaBlueprintFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): MediaBlueprintFunctionLibrary;
	static GetDefaultObject(): MediaBlueprintFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaBlueprintFunctionLibrary;
	static EnumerateWebcamCaptureDevices(OutDevices?: MediaCaptureDevice[],Filter?: number): {OutDevices: MediaCaptureDevice[]};
	static EnumerateVideoCaptureDevices(OutDevices?: MediaCaptureDevice[],Filter?: number): {OutDevices: MediaCaptureDevice[]};
	static EnumerateAudioCaptureDevices(OutDevices?: MediaCaptureDevice[],Filter?: number): {OutDevices: MediaCaptureDevice[]};
	static C(Other: UObject | any): MediaBlueprintFunctionLibrary;
}

declare class MediaPlaylist extends UObject { 
	Items: MediaSource[];
	static Load(ResourceName: string): MediaPlaylist;
	static Find(Outer: UObject, ResourceName: string): MediaPlaylist;
	static GetDefaultObject(): MediaPlaylist;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaPlaylist;
	Replace(index: number,Replacement: MediaSource): boolean;
	RemoveAt(index: number): boolean;
	Remove(MediaSource: MediaSource): boolean;
	Num(): number;
	Insert(MediaSource: MediaSource,index: number): void;
	GetRandom(OutIndex?: number): {OutIndex: number, $: MediaSource};
	GetPrevious(InOutIndex?: number): {InOutIndex: number, $: MediaSource};
	GetNext(InOutIndex?: number): {InOutIndex: number, $: MediaSource};
	Get(index: number): MediaSource;
	AddUrl(URL: string): boolean;
	AddFile(FilePath: string): boolean;
	Add(MediaSource: MediaSource): boolean;
	static C(Other: UObject | any): MediaPlaylist;
}

declare type EMediaPlayerTrack = 'Audio' | 'Caption' | 'Metadata' | 'Script' | 'Subtitle' | 'Text' | 'Video' | 'EMediaPlayerTrack_MAX';
declare var EMediaPlayerTrack : { Audio:'Audio',Caption:'Caption',Metadata:'Metadata',Script:'Script',Subtitle:'Subtitle',Text:'Text',Video:'Video',EMediaPlayerTrack_MAX:'EMediaPlayerTrack_MAX', };
declare class MediaPlayerTrackOptions { 
	Audio: number;
	Caption: number;
	MetaData: number;
	Script: number;
	Subtitle: number;
	text: number;
	Video: number;
	clone() : MediaPlayerTrackOptions;
	static C(Other: UObject | any): MediaPlayerTrackOptions;
}

declare class MediaPlayerOptions { 
	Tracks: MediaPlayerTrackOptions;
	clone() : MediaPlayerOptions;
	static C(Other: UObject | any): MediaPlayerOptions;
}

declare class MediaPlayer extends UObject { 
	OnEndReached: UnrealEngineMulticastDelegate<() => void>;
	OnMediaClosed: UnrealEngineMulticastDelegate<() => void>;
	OnMediaOpened: UnrealEngineMulticastDelegate<(OpenedUrl: string) => void>;
	OnMediaOpenFailed: UnrealEngineMulticastDelegate<(FailedUrl: string) => void>;
	OnPlaybackResumed: UnrealEngineMulticastDelegate<() => void>;
	OnPlaybackSuspended: UnrealEngineMulticastDelegate<() => void>;
	OnSeekCompleted: UnrealEngineMulticastDelegate<() => void>;
	OnTracksChanged: UnrealEngineMulticastDelegate<() => void>;
	CacheAhead: Timespan;
	CacheBehind: Timespan;
	CacheBehindGame: Timespan;
	NativeAudioOut: boolean;
	PlayOnOpen: boolean;
	Shuffle: boolean;
	loop: boolean;
	Playlist: MediaPlaylist;
	PlaylistIndex: number;
	TimeDelay: Timespan;
	HorizontalFieldOfView: number;
	VerticalFieldOfView: number;
	ViewRotation: Rotator;
	PlayerGuid: Guid;
	AffectedByPIEHandling: boolean;
	static Load(ResourceName: string): MediaPlayer;
	static Find(Outer: UObject, ResourceName: string): MediaPlayer;
	static GetDefaultObject(): MediaPlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaPlayer;
	SupportsSeeking(): boolean;
	SupportsScrubbing(): boolean;
	SupportsRate(Rate: number,Unthinned: boolean): boolean;
	SetViewRotation(Rotation: Rotator,Absolute: boolean): boolean;
	SetViewField(Horizontal: number,Vertical: number,Absolute: boolean): boolean;
	SetVideoTrackFrameRate(TrackIndex: number,FormatIndex: number,FrameRate: number): boolean;
	SetTrackFormat(TrackType: EMediaPlayerTrack,TrackIndex: number,FormatIndex: number): boolean;
	SetTimeDelay(TimeDelay: Timespan): void;
	SetRate(Rate: number): boolean;
	SetNativeVolume(Volume: number): boolean;
	SetLooping(Looping: boolean): boolean;
	SetDesiredPlayerName(PlayerName: string): void;
	SetBlockOnTime(Time: Timespan): void;
	SelectTrack(TrackType: EMediaPlayerTrack,TrackIndex: number): boolean;
	Seek(Time: Timespan): boolean;
	Rewind(): boolean;
	Reopen(): boolean;
	Previous(): boolean;
	Play(): boolean;
	Pause(): boolean;
	OpenUrl(URL: string): boolean;
	OpenSourceWithOptions(MediaSource: MediaSource,Options: MediaPlayerOptions): boolean;
	OpenSource(MediaSource: MediaSource): boolean;
	OpenPlaylistIndex(InPlaylist: MediaPlaylist,index: number): boolean;
	OpenPlaylist(InPlaylist: MediaPlaylist): boolean;
	OpenFile(FilePath: string): boolean;
	Next(): boolean;
	IsReady(): boolean;
	IsPreparing(): boolean;
	IsPlaying(): boolean;
	IsPaused(): boolean;
	IsLooping(): boolean;
	IsConnecting(): boolean;
	IsBuffering(): boolean;
	HasError(): boolean;
	GetViewRotation(): Rotator;
	GetVideoTrackType(TrackIndex: number,FormatIndex: number): string;
	GetVideoTrackFrameRates(TrackIndex: number,FormatIndex: number): FloatRange;
	GetVideoTrackFrameRate(TrackIndex: number,FormatIndex: number): number;
	GetVideoTrackDimensions(TrackIndex: number,FormatIndex: number): IntPoint;
	GetVideoTrackAspectRatio(TrackIndex: number,FormatIndex: number): number;
	GetVerticalFieldOfView(): number;
	GetUrl(): string;
	GetTrackLanguage(TrackType: EMediaPlayerTrack,TrackIndex: number): string;
	GetTrackFormat(TrackType: EMediaPlayerTrack,TrackIndex: number): number;
	GetTrackDisplayName(TrackType: EMediaPlayerTrack,TrackIndex: number): string;
	GetTimeDelay(): Timespan;
	GetTime(): Timespan;
	GetSupportedRates(OutRates?: FloatRange[],Unthinned?: boolean): {OutRates: FloatRange[]};
	GetSelectedTrack(TrackType: EMediaPlayerTrack): number;
	GetRate(): number;
	GetPlaylistIndex(): number;
	GetPlaylist(): MediaPlaylist;
	GetPlayerName(): string;
	GetNumTracks(TrackType: EMediaPlayerTrack): number;
	GetNumTrackFormats(TrackType: EMediaPlayerTrack,TrackIndex: number): number;
	GetMediaName(): string;
	GetHorizontalFieldOfView(): number;
	GetDuration(): Timespan;
	GetDesiredPlayerName(): string;
	GetAudioTrackType(TrackIndex: number,FormatIndex: number): string;
	GetAudioTrackSampleRate(TrackIndex: number,FormatIndex: number): number;
	GetAudioTrackChannels(TrackIndex: number,FormatIndex: number): number;
	Close(): void;
	CanPlayUrl(URL: string): boolean;
	CanPlaySource(MediaSource: MediaSource): boolean;
	CanPause(): boolean;
	static C(Other: UObject | any): MediaPlayer;
}

declare type EMediaSoundChannels = 'Mono' | 'Stereo' | 'Surround' | 'EMediaSoundChannels_MAX';
declare var EMediaSoundChannels : { Mono:'Mono',Stereo:'Stereo',Surround:'Surround',EMediaSoundChannels_MAX:'EMediaSoundChannels_MAX', };
declare class MediaTexture extends Texture { 
	AddressX: TextureAddress;
	AddressY: TextureAddress;
	AutoClear: boolean;
	ClearColor: LinearColor;
	MediaPlayer: MediaPlayer;
	static Load(ResourceName: string): MediaTexture;
	static Find(Outer: UObject, ResourceName: string): MediaTexture;
	static GetDefaultObject(): MediaTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaTexture;
	SetMediaPlayer(NewMediaPlayer: MediaPlayer): void;
	GetWidth(): number;
	GetMediaPlayer(): MediaPlayer;
	GetHeight(): number;
	GetAspectRatio(): number;
	static C(Other: UObject | any): MediaTexture;
}

declare class MediaSoundComponent extends SynthComponent { 
	Channels: EMediaSoundChannels;
	DynamicRateAdjustment: boolean;
	RateAdjustmentFactor: number;
	RateAdjustmentRange: FloatRange;
	MediaPlayer: MediaPlayer;
	static Load(ResourceName: string): MediaSoundComponent;
	static Find(Outer: UObject, ResourceName: string): MediaSoundComponent;
	static GetDefaultObject(): MediaSoundComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaSoundComponent;
	SetMediaPlayer(NewMediaPlayer: MediaPlayer): void;
	GetMediaPlayer(): MediaPlayer;
	BP_GetAttenuationSettingsToApply(OutAttenuationSettings?: SoundAttenuationSettings): {OutAttenuationSettings: SoundAttenuationSettings, $: boolean};
	static C(Other: UObject | any): MediaSoundComponent;
	LoadVideo(URL: string,Success?: boolean,MediaPlayer?: MediaPlayer,MediaTexture?: MediaTexture,PlayOnOpen?: boolean,loop?: boolean): {Success: boolean, MediaPlayer: MediaPlayer, MediaTexture: MediaTexture};
	static LoadVideo(MediaSoundComponent: MediaSoundComponent,URL: string,Success?: boolean,MediaPlayer?: MediaPlayer,MediaTexture?: MediaTexture,PlayOnOpen?: boolean,loop?: boolean): {Success: boolean, MediaPlayer: MediaPlayer, MediaTexture: MediaTexture};
}

declare class PlatformMediaSource extends MediaSource { 
	PlatformMediaSources: any;
	MediaSource: MediaSource;
	static Load(ResourceName: string): PlatformMediaSource;
	static Find(Outer: UObject, ResourceName: string): PlatformMediaSource;
	static GetDefaultObject(): PlatformMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlatformMediaSource;
	static C(Other: UObject | any): PlatformMediaSource;
}

declare class StreamMediaSource extends BaseMediaSource { 
	StreamUrl: string;
	static Load(ResourceName: string): StreamMediaSource;
	static Find(Outer: UObject, ResourceName: string): StreamMediaSource;
	static GetDefaultObject(): StreamMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): StreamMediaSource;
	static C(Other: UObject | any): StreamMediaSource;
}

declare class TimeSynchronizableMediaSource extends BaseMediaSource { 
	bUseTimeSynchronization: boolean;
	static Load(ResourceName: string): TimeSynchronizableMediaSource;
	static Find(Outer: UObject, ResourceName: string): TimeSynchronizableMediaSource;
	static GetDefaultObject(): TimeSynchronizableMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TimeSynchronizableMediaSource;
	static C(Other: UObject | any): TimeSynchronizableMediaSource;
}

declare class MediaOutput extends UObject { 
	NumberOfTextureBuffers: number;
	static Load(ResourceName: string): MediaOutput;
	static Find(Outer: UObject, ResourceName: string): MediaOutput;
	static GetDefaultObject(): MediaOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaOutput;
	Validate(OutFailureReason?: string): {OutFailureReason: string, $: boolean};
	CreateMediaCapture(): MediaCapture;
	static C(Other: UObject | any): MediaOutput;
}

declare type EMediaCaptureState = 'Error' | 'Capturing' | 'Preparing' | 'StopRequested' | 'Stopped' | 'EMediaCaptureState_MAX';
declare var EMediaCaptureState : { Error:'Error',Capturing:'Capturing',Preparing:'Preparing',StopRequested:'StopRequested',Stopped:'Stopped',EMediaCaptureState_MAX:'EMediaCaptureState_MAX', };
declare class MediaCapture extends UObject { 
	MediaOutput: MediaOutput;
	CapturingRenderTarget: TextureRenderTarget2D;
	static Load(ResourceName: string): MediaCapture;
	static Find(Outer: UObject, ResourceName: string): MediaCapture;
	static GetDefaultObject(): MediaCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MediaCapture;
	UpdateTextureRenderTarget2D(RenderTarget: TextureRenderTarget2D): boolean;
	StopCapture(bAllowPendingFrameToBeProcess: boolean): void;
	SetMediaOutput(InMediaOutput: MediaOutput): void;
	GetState(): EMediaCaptureState;
	GetDesiredSize(): IntPoint;
	GetDesiredPixelFormat(): EPixelFormat;
	CaptureTextureRenderTarget2D(RenderTarget: TextureRenderTarget2D): boolean;
	CaptureActiveSceneViewport(): boolean;
	static C(Other: UObject | any): MediaCapture;
}

declare class MediaIODevice { 
	DeviceName: string;
	DeviceIdentifier: number;
	clone() : MediaIODevice;
	static C(Other: UObject | any): MediaIODevice;
}

declare type EMediaIOSDITransportType = 'SingleLink' | 'DualLink' | 'QuadLink' | 'EMediaIOSDITransportType_MAX';
declare var EMediaIOSDITransportType : { SingleLink:'SingleLink',DualLink:'DualLink',QuadLink:'QuadLink',EMediaIOSDITransportType_MAX:'EMediaIOSDITransportType_MAX', };
declare type EMediaIOQuadLinkTransportType = 'SquareDivision' | 'TwoSampleInterleave' | 'EMediaIOQuadLinkTransportType_MAX';
declare var EMediaIOQuadLinkTransportType : { SquareDivision:'SquareDivision',TwoSampleInterleave:'TwoSampleInterleave',EMediaIOQuadLinkTransportType_MAX:'EMediaIOQuadLinkTransportType_MAX', };
declare class MediaIOConnection { 
	Device: MediaIODevice;
	Protocol: string;
	TransportType: EMediaIOSDITransportType;
	QuadTransportType: EMediaIOQuadLinkTransportType;
	PortIdentifier: number;
	clone() : MediaIOConnection;
	static C(Other: UObject | any): MediaIOConnection;
}

declare type EMediaIOStandardType = 'Progressive' | 'Interlaced' | 'ProgressiveSegmentedFrame' | 'EMediaIOStandardType_MAX';
declare var EMediaIOStandardType : { Progressive:'Progressive',Interlaced:'Interlaced',ProgressiveSegmentedFrame:'ProgressiveSegmentedFrame',EMediaIOStandardType_MAX:'EMediaIOStandardType_MAX', };
declare class MediaIOMode { 
	FrameRate: FrameRate;
	Resolution: IntPoint;
	Standard: EMediaIOStandardType;
	DeviceModeIdentifier: number;
	clone() : MediaIOMode;
	static C(Other: UObject | any): MediaIOMode;
}

declare class MediaIOConfiguration { 
	bIsInput: boolean;
	MediaConnection: MediaIOConnection;
	MediaMode: MediaIOMode;
	clone() : MediaIOConfiguration;
	static C(Other: UObject | any): MediaIOConfiguration;
}

declare class BlackmagicCustomTimeStep extends FixedFrameRateCustomTimeStep { 
	MediaConfiguration: MediaIOConfiguration;
	static Load(ResourceName: string): BlackmagicCustomTimeStep;
	static Find(Outer: UObject, ResourceName: string): BlackmagicCustomTimeStep;
	static GetDefaultObject(): BlackmagicCustomTimeStep;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackmagicCustomTimeStep;
	static C(Other: UObject | any): BlackmagicCustomTimeStep;
}

declare type EMediaIOTimecodeFormat = 'None' | 'LTC' | 'VITC' | 'EMediaIOTimecodeFormat_MAX';
declare var EMediaIOTimecodeFormat : { None:'None',LTC:'LTC',VITC:'VITC',EMediaIOTimecodeFormat_MAX:'EMediaIOTimecodeFormat_MAX', };
declare type EBlackmagicMediaAudioChannel = 'Stereo2' | 'Surround8' | 'EBlackmagicMediaAudioChannel_MAX';
declare var EBlackmagicMediaAudioChannel : { Stereo2:'Stereo2',Surround8:'Surround8',EBlackmagicMediaAudioChannel_MAX:'EBlackmagicMediaAudioChannel_MAX', };
declare type EBlackmagicMediaSourceColorFormat = 'BGRA' | 'BGR10' | 'EBlackmagicMediaSourceColorFormat_MAX';
declare var EBlackmagicMediaSourceColorFormat : { BGRA:'BGRA',BGR10:'BGR10',EBlackmagicMediaSourceColorFormat_MAX:'EBlackmagicMediaSourceColorFormat_MAX', };
declare class BlackmagicMediaSource extends TimeSynchronizableMediaSource { 
	MediaConfiguration: MediaIOConfiguration;
	TimecodeFormat: EMediaIOTimecodeFormat;
	bCaptureAudio: boolean;
	AudioChannels: EBlackmagicMediaAudioChannel;
	MaxNumAudioFrameBuffer: number;
	bCaptureVideo: boolean;
	ColorFormat: EBlackmagicMediaSourceColorFormat;
	MaxNumVideoFrameBuffer: number;
	bLogDropFrame: boolean;
	bEncodeTimecodeInTexel: boolean;
	static Load(ResourceName: string): BlackmagicMediaSource;
	static Find(Outer: UObject, ResourceName: string): BlackmagicMediaSource;
	static GetDefaultObject(): BlackmagicMediaSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackmagicMediaSource;
	static C(Other: UObject | any): BlackmagicMediaSource;
}

declare class BlackmagicTimecodeProvider extends TimecodeProvider { 
	MediaConfiguration: MediaIOConfiguration;
	static Load(ResourceName: string): BlackmagicTimecodeProvider;
	static Find(Outer: UObject, ResourceName: string): BlackmagicTimecodeProvider;
	static GetDefaultObject(): BlackmagicTimecodeProvider;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackmagicTimecodeProvider;
	static C(Other: UObject | any): BlackmagicTimecodeProvider;
}

declare class BlackmagicMediaCapture extends MediaCapture { 
	static Load(ResourceName: string): BlackmagicMediaCapture;
	static Find(Outer: UObject, ResourceName: string): BlackmagicMediaCapture;
	static GetDefaultObject(): BlackmagicMediaCapture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackmagicMediaCapture;
	static C(Other: UObject | any): BlackmagicMediaCapture;
}

declare type EMediaIOOutputType = 'Fill' | 'FillAndKey' | 'EMediaIOOutputType_MAX';
declare var EMediaIOOutputType : { Fill:'Fill',FillAndKey:'FillAndKey',EMediaIOOutputType_MAX:'EMediaIOOutputType_MAX', };
declare type EMediaIOReferenceType = 'FreeRun' | 'External' | 'Input' | 'EMediaIOReferenceType_MAX';
declare var EMediaIOReferenceType : { FreeRun:'FreeRun',External:'External',Input:'Input',EMediaIOReferenceType_MAX:'EMediaIOReferenceType_MAX', };
declare class MediaIOOutputConfiguration { 
	MediaConfiguration: MediaIOConfiguration;
	OutputType: EMediaIOOutputType;
	KeyPortIdentifier: number;
	OutputReference: EMediaIOReferenceType;
	ReferencePortIdentifier: number;
	clone() : MediaIOOutputConfiguration;
	static C(Other: UObject | any): MediaIOOutputConfiguration;
}

declare type EBlackmagicMediaOutputPixelFormat = 'PF_8BIT_ARGB' | 'PF_10BIT_RGB' | 'PF_MAX';
declare var EBlackmagicMediaOutputPixelFormat : { PF_8BIT_ARGB:'PF_8BIT_ARGB',PF_10BIT_RGB:'PF_10BIT_RGB',PF_MAX:'PF_MAX', };
declare class BlackmagicMediaOutput extends MediaOutput { 
	OutputConfiguration: MediaIOOutputConfiguration;
	TimecodeFormat: EMediaIOTimecodeFormat;
	PixelFormat: EBlackmagicMediaOutputPixelFormat;
	NumberOfBlackmagicBuffers: number;
	bInterlacedFieldsTimecodeNeedToMatch: boolean;
	bWaitForSyncEvent: boolean;
	bEncodeTimecodeInTexel: boolean;
	static Load(ResourceName: string): BlackmagicMediaOutput;
	static Find(Outer: UObject, ResourceName: string): BlackmagicMediaOutput;
	static GetDefaultObject(): BlackmagicMediaOutput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BlackmagicMediaOutput;
	static C(Other: UObject | any): BlackmagicMediaOutput;
}

declare class WmfMediaSettings extends UObject { 
	AllowNonStandardCodecs: boolean;
	LowLatency: boolean;
	NativeAudioOut: boolean;
	static Load(ResourceName: string): WmfMediaSettings;
	static Find(Outer: UObject, ResourceName: string): WmfMediaSettings;
	static GetDefaultObject(): WmfMediaSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WmfMediaSettings;
	static C(Other: UObject | any): WmfMediaSettings;
}

declare class MaterialExpressionSpriteTextureSampler extends MaterialExpressionTextureSampleParameter2D { 
	bSampleAdditionalTextures: boolean;
	AdditionalSlotIndex: number;
	SlotDisplayName: string;
	static Load(ResourceName: string): MaterialExpressionSpriteTextureSampler;
	static Find(Outer: UObject, ResourceName: string): MaterialExpressionSpriteTextureSampler;
	static GetDefaultObject(): MaterialExpressionSpriteTextureSampler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MaterialExpressionSpriteTextureSampler;
	static C(Other: UObject | any): MaterialExpressionSpriteTextureSampler;
}

declare class PaperSpriteSocket { 
	LocalTransform: Transform;
	SocketName: string;
	clone() : PaperSpriteSocket;
	static C(Other: UObject | any): PaperSpriteSocket;
}

declare type ESpriteCollisionMode = 'None' | 'Use2DPhysics' | 'Use3DPhysics' | 'ESpriteCollisionMode_MAX';
declare var ESpriteCollisionMode : { None:'None',Use2DPhysics:'Use2DPhysics',Use3DPhysics:'Use3DPhysics',ESpriteCollisionMode_MAX:'ESpriteCollisionMode_MAX', };
declare type ESpritePivotMode = 'Top_Left' | 'Top_Center' | 'Top_Right' | 'Center_Left' | 'Center_Center' | 'Center_Right' | 'Bottom_Left' | 'Bottom_Center' | 'Bottom_Right' | 'Custom' | 'ESpritePivotMode_MAX';
declare var ESpritePivotMode : { Top_Left:'Top_Left',Top_Center:'Top_Center',Top_Right:'Top_Right',Center_Left:'Center_Left',Center_Center:'Center_Center',Center_Right:'Center_Right',Bottom_Left:'Bottom_Left',Bottom_Center:'Bottom_Center',Bottom_Right:'Bottom_Right',Custom:'Custom',ESpritePivotMode_MAX:'ESpritePivotMode_MAX', };
declare type ESpriteShapeType = 'Box' | 'Circle' | 'Polygon' | 'ESpriteShapeType_MAX';
declare var ESpriteShapeType : { Box:'Box',Circle:'Circle',Polygon:'Polygon',ESpriteShapeType_MAX:'ESpriteShapeType_MAX', };
declare class SpriteGeometryShape { 
	ShapeType: ESpriteShapeType;
	Vertices: Vector2D[];
	BoxSize: Vector2D;
	BoxPosition: Vector2D;
	Rotation: number;
	bNegativeWinding: boolean;
	clone() : SpriteGeometryShape;
	static C(Other: UObject | any): SpriteGeometryShape;
}

declare type ESpritePolygonMode = 'SourceBoundingBox' | 'TightBoundingBox' | 'ShrinkWrapped' | 'FullyCustom' | 'Diced' | 'ESpritePolygonMode_MAX';
declare var ESpritePolygonMode : { SourceBoundingBox:'SourceBoundingBox',TightBoundingBox:'TightBoundingBox',ShrinkWrapped:'ShrinkWrapped',FullyCustom:'FullyCustom',Diced:'Diced',ESpritePolygonMode_MAX:'ESpritePolygonMode_MAX', };
declare class SpriteGeometryCollection { 
	Shapes: SpriteGeometryShape[];
	GeometryType: ESpritePolygonMode;
	PixelsPerSubdivisionX: number;
	PixelsPerSubdivisionY: number;
	bAvoidVertexMerging: boolean;
	AlphaThreshold: number;
	DetailAmount: number;
	SimplifyEpsilon: number;
	clone() : SpriteGeometryCollection;
	static C(Other: UObject | any): SpriteGeometryCollection;
}

declare type EPaperSpriteAtlasPadding = 'DilateBorder' | 'PadWithZero' | 'EPaperSpriteAtlasPadding_MAX';
declare var EPaperSpriteAtlasPadding : { DilateBorder:'DilateBorder',PadWithZero:'PadWithZero',EPaperSpriteAtlasPadding_MAX:'EPaperSpriteAtlasPadding_MAX', };
declare class PaperSpriteAtlasSlot { 
	SpriteRef: PaperSprite;
	AtlasIndex: number;
	X: number;
	Y: number;
	Width: number;
	Height: number;
	clone() : PaperSpriteAtlasSlot;
	static C(Other: UObject | any): PaperSpriteAtlasSlot;
}

declare class PaperSpriteAtlas extends UObject { 
	AtlasDescription: string;
	MaxWidth: number;
	MaxHeight: number;
	MipCount: number;
	PaddingType: EPaperSpriteAtlasPadding;
	Padding: number;
	CompressionSettings: TextureCompressionSettings;
	Filter: TextureFilter;
	GeneratedTextures: Texture[];
	AtlasGUID: Guid;
	bRebuildAtlas: boolean;
	AtlasSlots: PaperSpriteAtlasSlot[];
	NumIncrementalBuilds: number;
	BuiltWidth: number;
	BuiltHeight: number;
	BuiltPadding: number;
	static Load(ResourceName: string): PaperSpriteAtlas;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteAtlas;
	static GetDefaultObject(): PaperSpriteAtlas;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteAtlas;
	static C(Other: UObject | any): PaperSpriteAtlas;
}

declare class PaperSprite extends UObject { 
	OriginInSourceImageBeforeTrimming: Vector2D;
	SourceImageDimensionBeforeTrimming: Vector2D;
	bTrimmedInSourceImage: boolean;
	bRotatedInSourceImage: boolean;
	SourceTextureDimension: Vector2D;
	SourceUV: Vector2D;
	SourceDimension: Vector2D;
	SourceTexture: Texture2D;
	AdditionalSourceTextures: Texture[];
	BakedSourceUV: Vector2D;
	BakedSourceDimension: Vector2D;
	BakedSourceTexture: Texture2D;
	DefaultMaterial: MaterialInterface;
	AlternateMaterial: MaterialInterface;
	Sockets: PaperSpriteSocket[];
	SpriteCollisionDomain: ESpriteCollisionMode;
	PixelsPerUnrealUnit: number;
	BodySetup: BodySetup;
	PivotMode: ESpritePivotMode;
	CustomPivotPoint: Vector2D;
	bSnapPivotToPixelGrid: boolean;
	CollisionGeometry: SpriteGeometryCollection;
	CollisionThickness: number;
	RenderGeometry: SpriteGeometryCollection;
	AtlasGroup: PaperSpriteAtlas;
	AlternateMaterialSplitIndex: number;
	BakedRenderData: Vector4[];
	static Load(ResourceName: string): PaperSprite;
	static Find(Outer: UObject, ResourceName: string): PaperSprite;
	static GetDefaultObject(): PaperSprite;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSprite;
	static C(Other: UObject | any): PaperSprite;
	MakeBrushFromSprite(Width: number,Height: number): SlateBrush;
	static MakeBrushFromSprite(Sprite: PaperSprite,Width: number,Height: number): SlateBrush;
}

declare class PaperFlipbookKeyFrame { 
	Sprite: PaperSprite;
	FrameRun: number;
	clone() : PaperFlipbookKeyFrame;
	static C(Other: UObject | any): PaperFlipbookKeyFrame;
}

declare type EFlipbookCollisionMode = 'NoCollision' | 'FirstFrameCollision' | 'EachFrameCollision' | 'EFlipbookCollisionMode_MAX';
declare var EFlipbookCollisionMode : { NoCollision:'NoCollision',FirstFrameCollision:'FirstFrameCollision',EachFrameCollision:'EachFrameCollision',EFlipbookCollisionMode_MAX:'EFlipbookCollisionMode_MAX', };
declare class PaperFlipbook extends UObject { 
	FramesPerSecond: number;
	KeyFrames: PaperFlipbookKeyFrame[];
	DefaultMaterial: MaterialInterface;
	CollisionSource: EFlipbookCollisionMode;
	static Load(ResourceName: string): PaperFlipbook;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbook;
	static GetDefaultObject(): PaperFlipbook;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbook;
	IsValidKeyFrameIndex(index: number): boolean;
	GetTotalDuration(): number;
	GetSpriteAtTime(Time: number,bClampToEnds: boolean): PaperSprite;
	GetSpriteAtFrame(FrameIndex: number): PaperSprite;
	GetNumKeyFrames(): number;
	GetNumFrames(): number;
	GetKeyFrameIndexAtTime(Time: number,bClampToEnds: boolean): number;
	static C(Other: UObject | any): PaperFlipbook;
}

declare class PaperFlipbookComponent extends MeshComponent { 
	SourceFlipbook: PaperFlipbook;
	Material: MaterialInterface;
	PlayRate: number;
	bLooping: boolean;
	bReversePlayback: boolean;
	bPlaying: boolean;
	AccumulatedTime: number;
	CachedFrameIndex: number;
	SpriteColor: LinearColor;
	CachedBodySetup: BodySetup;
	OnFinishedPlaying: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): PaperFlipbookComponent;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbookComponent;
	static GetDefaultObject(): PaperFlipbookComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookComponent;
	Stop(): void;
	SetSpriteColor(NewColor: LinearColor): void;
	SetPlayRate(NewRate: number): void;
	SetPlaybackPositionInFrames(NewFramePosition: number,bFireEvents: boolean): void;
	SetPlaybackPosition(NewPosition: number,bFireEvents: boolean): void;
	SetNewTime(NewTime: number): void;
	SetLooping(bNewLooping: boolean): void;
	SetFlipbook(NewFlipbook: PaperFlipbook): boolean;
	ReverseFromEnd(): void;
	Reverse(): void;
	PlayFromStart(): void;
	Play(): void;
	OnRep_SourceFlipbook(OldFlipbook: PaperFlipbook): void;
	IsReversing(): boolean;
	IsPlaying(): boolean;
	IsLooping(): boolean;
	GetPlayRate(): number;
	GetPlaybackPositionInFrames(): number;
	GetPlaybackPosition(): number;
	GetFlipbookLengthInFrames(): number;
	GetFlipbookLength(): number;
	GetFlipbookFramerate(): number;
	GetFlipbook(): PaperFlipbook;
	static C(Other: UObject | any): PaperFlipbookComponent;
}

declare class PaperCharacter extends Character { 
	Sprite: PaperFlipbookComponent;
	static GetDefaultObject(): PaperCharacter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperCharacter;
	static C(Other: UObject | any): PaperCharacter;
}

declare class PaperFlipbookActor extends Actor { 
	RenderComponent: PaperFlipbookComponent;
	static GetDefaultObject(): PaperFlipbookActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookActor;
	static C(Other: UObject | any): PaperFlipbookActor;
}

declare class SpriteInstanceData { 
	Transform: Matrix;
	SourceSprite: PaperSprite;
	VertexColor: Color;
	MaterialIndex: number;
	clone() : SpriteInstanceData;
	static C(Other: UObject | any): SpriteInstanceData;
}

declare class PaperGroupedSpriteComponent extends MeshComponent { 
	InstanceMaterials: MaterialInterface[];
	PerInstanceSpriteData: SpriteInstanceData[];
	static Load(ResourceName: string): PaperGroupedSpriteComponent;
	static Find(Outer: UObject, ResourceName: string): PaperGroupedSpriteComponent;
	static GetDefaultObject(): PaperGroupedSpriteComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperGroupedSpriteComponent;
	UpdateInstanceTransform(InstanceIndex: number,NewInstanceTransform: Transform,bWorldSpace: boolean,bMarkRenderStateDirty: boolean,bTeleport: boolean): boolean;
	UpdateInstanceColor(InstanceIndex: number,NewInstanceColor: LinearColor,bMarkRenderStateDirty: boolean): boolean;
	SortInstancesAlongAxis(WorldSpaceSortAxis: Vector): void;
	RemoveInstance(InstanceIndex: number): boolean;
	GetInstanceTransform(InstanceIndex: number,OutInstanceTransform?: Transform,bWorldSpace?: boolean): {OutInstanceTransform: Transform, $: boolean};
	GetInstanceCount(): number;
	ClearInstances(): void;
	AddInstance(Transform: Transform,Sprite: PaperSprite,bWorldSpace: boolean,Color: LinearColor): number;
	static C(Other: UObject | any): PaperGroupedSpriteComponent;
}

declare class PaperGroupedSpriteActor extends Actor { 
	RenderComponent: PaperGroupedSpriteComponent;
	static GetDefaultObject(): PaperGroupedSpriteActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperGroupedSpriteActor;
	static C(Other: UObject | any): PaperGroupedSpriteActor;
}

declare class PaperRuntimeSettings extends UObject { 
	bEnableSpriteAtlasGroups: boolean;
	bEnableTerrainSplineEditing: boolean;
	bResizeSpriteDataToMatchTextures: boolean;
	static Load(ResourceName: string): PaperRuntimeSettings;
	static Find(Outer: UObject, ResourceName: string): PaperRuntimeSettings;
	static GetDefaultObject(): PaperRuntimeSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperRuntimeSettings;
	static C(Other: UObject | any): PaperRuntimeSettings;
}

declare class PaperSpriteComponent extends MeshComponent { 
	SourceSprite: PaperSprite;
	MaterialOverride: MaterialInterface;
	SpriteColor: LinearColor;
	static Load(ResourceName: string): PaperSpriteComponent;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteComponent;
	static GetDefaultObject(): PaperSpriteComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteComponent;
	SetSpriteColor(NewColor: LinearColor): void;
	SetSprite(NewSprite: PaperSprite): boolean;
	GetSprite(): PaperSprite;
	static C(Other: UObject | any): PaperSpriteComponent;
}

declare class PaperSpriteActor extends Actor { 
	RenderComponent: PaperSpriteComponent;
	static GetDefaultObject(): PaperSpriteActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteActor;
	static C(Other: UObject | any): PaperSpriteActor;
}

declare class PaperSpriteBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PaperSpriteBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteBlueprintLibrary;
	static GetDefaultObject(): PaperSpriteBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteBlueprintLibrary;
	static MakeBrushFromSprite(Sprite: PaperSprite,Width: number,Height: number): SlateBrush;
	static C(Other: UObject | any): PaperSpriteBlueprintLibrary;
}

declare class PaperTerrainSplineComponent extends SplineComponent { 
	static Load(ResourceName: string): PaperTerrainSplineComponent;
	static Find(Outer: UObject, ResourceName: string): PaperTerrainSplineComponent;
	static GetDefaultObject(): PaperTerrainSplineComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTerrainSplineComponent;
	static C(Other: UObject | any): PaperTerrainSplineComponent;
}

declare class PaperTerrainMaterialRule { 
	StartCap: PaperSprite;
	Body: PaperSprite[];
	EndCap: PaperSprite;
	MinimumAngle: number;
	MaximumAngle: number;
	bEnableCollision: boolean;
	CollisionOffset: number;
	DrawOrder: number;
	Description: string;
	clone() : PaperTerrainMaterialRule;
	static C(Other: UObject | any): PaperTerrainMaterialRule;
}

declare class PaperTerrainMaterial extends DataAsset { 
	Rules: PaperTerrainMaterialRule[];
	InteriorFill: PaperSprite;
	static Load(ResourceName: string): PaperTerrainMaterial;
	static Find(Outer: UObject, ResourceName: string): PaperTerrainMaterial;
	static GetDefaultObject(): PaperTerrainMaterial;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTerrainMaterial;
	static C(Other: UObject | any): PaperTerrainMaterial;
}

declare class PaperTerrainComponent extends PrimitiveComponent { 
	TerrainMaterial: PaperTerrainMaterial;
	bClosedSpline: boolean;
	bFilledSpline: boolean;
	AssociatedSpline: PaperTerrainSplineComponent;
	RandomSeed: number;
	SegmentOverlapAmount: number;
	TerrainColor: LinearColor;
	ReparamStepsPerSegment: number;
	SpriteCollisionDomain: ESpriteCollisionMode;
	CollisionThickness: number;
	CachedBodySetup: BodySetup;
	static Load(ResourceName: string): PaperTerrainComponent;
	static Find(Outer: UObject, ResourceName: string): PaperTerrainComponent;
	static GetDefaultObject(): PaperTerrainComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTerrainComponent;
	SetTerrainColor(NewColor: LinearColor): void;
	static C(Other: UObject | any): PaperTerrainComponent;
}

declare class PaperTerrainActor extends Actor { 
	DummyRoot: SceneComponent;
	SplineComponent: PaperTerrainSplineComponent;
	RenderComponent: PaperTerrainComponent;
	static GetDefaultObject(): PaperTerrainActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTerrainActor;
	static C(Other: UObject | any): PaperTerrainActor;
}

declare class IntMargin { 
	Left: number;
	Top: number;
	Right: number;
	Bottom: number;
	clone() : IntMargin;
	static C(Other: UObject | any): IntMargin;
}

declare class PaperTileMetadata { 
	UserDataName: string;
	CollisionData: SpriteGeometryCollection;
	TerrainMembership: number;
	clone() : PaperTileMetadata;
	static C(Other: UObject | any): PaperTileMetadata;
}

declare class PaperTileSetTerrain { 
	TerrainName: string;
	CenterTileIndex: number;
	clone() : PaperTileSetTerrain;
	static C(Other: UObject | any): PaperTileSetTerrain;
}

declare class PaperTileSet extends UObject { 
	TileSize: IntPoint;
	TileSheet: Texture2D;
	AdditionalSourceTextures: Texture[];
	BorderMargin: IntMargin;
	PerTileSpacing: IntPoint;
	DrawingOffset: IntPoint;
	BackgroundColor: LinearColor;
	WidthInTiles: number;
	HeightInTiles: number;
	AllocatedWidth: number;
	AllocatedHeight: number;
	PerTileData: PaperTileMetadata[];
	Terrains: PaperTileSetTerrain[];
	TileWidth: number;
	TileHeight: number;
	Margin: number;
	Spacing: number;
	static Load(ResourceName: string): PaperTileSet;
	static Find(Outer: UObject, ResourceName: string): PaperTileSet;
	static GetDefaultObject(): PaperTileSet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileSet;
	static C(Other: UObject | any): PaperTileSet;
}

declare class PaperTileInfo { 
	TileSet: PaperTileSet;
	PackedTileIndex: number;
	clone() : PaperTileInfo;
	static C(Other: UObject | any): PaperTileInfo;
	BreakTile(TileIndex?: number,TileSet?: PaperTileSet,bFlipH?: boolean,bFlipV?: boolean,bFlipD?: boolean): {TileIndex: number, TileSet: PaperTileSet, bFlipH: boolean, bFlipV: boolean, bFlipD: boolean};
	GetTileTransform(): Transform;
	GetTileUserData(): string;
	static BreakTile(Tile: PaperTileInfo,TileIndex?: number,TileSet?: PaperTileSet,bFlipH?: boolean,bFlipV?: boolean,bFlipD?: boolean): {TileIndex: number, TileSet: PaperTileSet, bFlipH: boolean, bFlipV: boolean, bFlipD: boolean};
	static GetTileTransform(Tile: PaperTileInfo): Transform;
	static GetTileUserData(Tile: PaperTileInfo): string;
	static MakeTile(TileIndex: number,TileSet: PaperTileSet,bFlipH: boolean,bFlipV: boolean,bFlipD: boolean): PaperTileInfo;
}

declare class PaperTileLayer extends UObject { 
	LayerName: string;
	LayerWidth: number;
	LayerHeight: number;
	bHiddenInEditor: boolean;
	bHiddenInGame: boolean;
	bLayerCollides: boolean;
	bOverrideCollisionThickness: boolean;
	bOverrideCollisionOffset: boolean;
	CollisionThicknessOverride: number;
	CollisionOffsetOverride: number;
	LayerColor: LinearColor;
	AllocatedWidth: number;
	AllocatedHeight: number;
	AllocatedCells: PaperTileInfo[];
	TileSet: PaperTileSet;
	AllocatedGrid: number[];
	static Load(ResourceName: string): PaperTileLayer;
	static Find(Outer: UObject, ResourceName: string): PaperTileLayer;
	static GetDefaultObject(): PaperTileLayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileLayer;
	static C(Other: UObject | any): PaperTileLayer;
}

declare type ETileMapProjectionMode = 'Orthogonal' | 'IsometricDiamond' | 'IsometricStaggered' | 'HexagonalStaggered' | 'ETileMapProjectionMode_MAX';
declare var ETileMapProjectionMode : { Orthogonal:'Orthogonal',IsometricDiamond:'IsometricDiamond',IsometricStaggered:'IsometricStaggered',HexagonalStaggered:'HexagonalStaggered',ETileMapProjectionMode_MAX:'ETileMapProjectionMode_MAX', };
declare class PaperTileMap extends UObject { 
	MapWidth: number;
	MapHeight: number;
	TileWidth: number;
	TileHeight: number;
	PixelsPerUnrealUnit: number;
	SeparationPerTileX: number;
	SeparationPerTileY: number;
	SeparationPerLayer: number;
	SelectedTileSet: PaperTileSet;
	Material: MaterialInterface;
	TileLayers: PaperTileLayer[];
	CollisionThickness: number;
	SpriteCollisionDomain: ESpriteCollisionMode;
	ProjectionMode: ETileMapProjectionMode;
	HexSideLength: number;
	BodySetup: BodySetup;
	AssetImportData: AssetImportData;
	SelectedLayerIndex: number;
	BackgroundColor: LinearColor;
	TileGridColor: LinearColor;
	MultiTileGridColor: LinearColor;
	MultiTileGridWidth: number;
	MultiTileGridHeight: number;
	MultiTileGridOffsetX: number;
	MultiTileGridOffsetY: number;
	LayerGridColor: LinearColor;
	LayerNameIndex: number;
	static Load(ResourceName: string): PaperTileMap;
	static Find(Outer: UObject, ResourceName: string): PaperTileMap;
	static GetDefaultObject(): PaperTileMap;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMap;
	static C(Other: UObject | any): PaperTileMap;
}

declare class PaperTileMapComponent extends MeshComponent { 
	MapWidth: number;
	MapHeight: number;
	TileWidth: number;
	TileHeight: number;
	DefaultLayerTileSet: PaperTileSet;
	Material: MaterialInterface;
	TileLayers: PaperTileLayer[];
	TileMapColor: LinearColor;
	UseSingleLayerIndex: number;
	bUseSingleLayer: boolean;
	TileMap: PaperTileMap;
	bShowPerTileGridWhenSelected: boolean;
	bShowPerLayerGridWhenSelected: boolean;
	bShowOutlineWhenUnselected: boolean;
	bShowPerTileGridWhenUnselected: boolean;
	bShowPerLayerGridWhenUnselected: boolean;
	static Load(ResourceName: string): PaperTileMapComponent;
	static Find(Outer: UObject, ResourceName: string): PaperTileMapComponent;
	static GetDefaultObject(): PaperTileMapComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMapComponent;
	SetTileMapColor(NewColor: LinearColor): void;
	SetTileMap(NewTileMap: PaperTileMap): boolean;
	SetTile(X: number,Y: number,Layer: number,NewValue: PaperTileInfo): void;
	SetLayerColor(NewColor: LinearColor,Layer: number): void;
	SetLayerCollision(Layer: number,bHasCollision: boolean,bOverrideThickness: boolean,CustomThickness: number,bOverrideOffset: boolean,CustomOffset: number,bRebuildCollision: boolean): void;
	SetDefaultCollisionThickness(Thickness: number,bRebuildCollision: boolean): void;
	ResizeMap(NewWidthInTiles: number,NewHeightInTiles: number): void;
	RebuildCollision(): void;
	OwnsTileMap(): boolean;
	MakeTileMapEditable(): void;
	GetTilePolygon(TileX: number,TileY: number,Points?: Vector[],LayerIndex?: number,bWorldSpace?: boolean): {Points: Vector[]};
	GetTileMapColor(): LinearColor;
	GetTileCornerPosition(TileX: number,TileY: number,LayerIndex: number,bWorldSpace: boolean): Vector;
	GetTileCenterPosition(TileX: number,TileY: number,LayerIndex: number,bWorldSpace: boolean): Vector;
	GetTile(X: number,Y: number,Layer: number): PaperTileInfo;
	GetMapSize(MapWidth?: number,MapHeight?: number,NumLayers?: number): {MapWidth: number, MapHeight: number, NumLayers: number};
	GetLayerColor(Layer: number): LinearColor;
	CreateNewTileMap(MapWidth: number,MapHeight: number,TileWidth: number,TileHeight: number,PixelsPerUnrealUnit: number,bCreateLayer: boolean): void;
	AddNewLayer(): PaperTileLayer;
	static C(Other: UObject | any): PaperTileMapComponent;
}

declare class PaperTileMapActor extends Actor { 
	RenderComponent: PaperTileMapComponent;
	static GetDefaultObject(): PaperTileMapActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMapActor;
	static C(Other: UObject | any): PaperTileMapActor;
}

declare class TileMapBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): TileMapBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): TileMapBlueprintLibrary;
	static GetDefaultObject(): TileMapBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileMapBlueprintLibrary;
	static MakeTile(TileIndex: number,TileSet: PaperTileSet,bFlipH: boolean,bFlipV: boolean,bFlipD: boolean): PaperTileInfo;
	static GetTileUserData(Tile: PaperTileInfo): string;
	static GetTileTransform(Tile: PaperTileInfo): Transform;
	static BreakTile(Tile: PaperTileInfo,TileIndex?: number,TileSet?: PaperTileSet,bFlipH?: boolean,bFlipV?: boolean,bFlipD?: boolean): {TileIndex: number, TileSet: PaperTileSet, bFlipH: boolean, bFlipV: boolean, bFlipD: boolean};
	static C(Other: UObject | any): TileMapBlueprintLibrary;
}

declare class SubjectMetadata { 
	StringMetaData: any;
	SceneTimecode: Timecode;
	SceneFramerate: FrameRate;
	clone() : SubjectMetadata;
	static C(Other: UObject | any): SubjectMetadata;
}

declare class LiveLinkTransform { 
	clone() : LiveLinkTransform;
	static C(Other: UObject | any): LiveLinkTransform;
	ChildCount(): {LiveLinkTransform: LiveLinkTransform, $: number};
	ComponentSpaceTransform(Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	GetChildren(Children?: LiveLinkTransform[]): {LiveLinkTransform: LiveLinkTransform, Children: LiveLinkTransform[]};
	GetParent(Parent?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, Parent: LiveLinkTransform};
	HasParent(): {LiveLinkTransform: LiveLinkTransform, $: boolean};
	ParentBoneSpaceTransform(Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	TransformName(Name?: string): {LiveLinkTransform: LiveLinkTransform, Name: string};
	static ChildCount(LiveLinkTransform?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, $: number};
	static ComponentSpaceTransform(LiveLinkTransform?: LiveLinkTransform,Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	static GetChildren(LiveLinkTransform?: LiveLinkTransform,Children?: LiveLinkTransform[]): {LiveLinkTransform: LiveLinkTransform, Children: LiveLinkTransform[]};
	static GetParent(LiveLinkTransform?: LiveLinkTransform,Parent?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, Parent: LiveLinkTransform};
	static HasParent(LiveLinkTransform?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, $: boolean};
	static ParentBoneSpaceTransform(LiveLinkTransform?: LiveLinkTransform,Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	static TransformName(LiveLinkTransform?: LiveLinkTransform,Name?: string): {LiveLinkTransform: LiveLinkTransform, Name: string};
}

declare class SubjectFrameHandle { 
	clone() : SubjectFrameHandle;
	static C(Other: UObject | any): SubjectFrameHandle;
	GetCurves(Curves?: any): {SubjectFrameHandle: SubjectFrameHandle, Curves: any};
	GetMetadata(MetaData?: SubjectMetadata): {SubjectFrameHandle: SubjectFrameHandle, MetaData: SubjectMetadata};
	GetRootTransform(LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	GetTransformByIndex(TransformIndex?: number,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	GetTransformByName(TransformName?: string,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	NumberOfTransforms(): {SubjectFrameHandle: SubjectFrameHandle, $: number};
	TransformNames(TransformNames?: string[]): {SubjectFrameHandle: SubjectFrameHandle, TransformNames: string[]};
	static GetCurves(SubjectFrameHandle?: SubjectFrameHandle,Curves?: any): {SubjectFrameHandle: SubjectFrameHandle, Curves: any};
	static GetMetadata(SubjectFrameHandle?: SubjectFrameHandle,MetaData?: SubjectMetadata): {SubjectFrameHandle: SubjectFrameHandle, MetaData: SubjectMetadata};
	static GetRootTransform(SubjectFrameHandle?: SubjectFrameHandle,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetTransformByIndex(SubjectFrameHandle?: SubjectFrameHandle,TransformIndex?: number,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetTransformByName(SubjectFrameHandle?: SubjectFrameHandle,TransformName?: string,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static NumberOfTransforms(SubjectFrameHandle?: SubjectFrameHandle): {SubjectFrameHandle: SubjectFrameHandle, $: number};
	static TransformNames(SubjectFrameHandle?: SubjectFrameHandle,TransformNames?: string[]): {SubjectFrameHandle: SubjectFrameHandle, TransformNames: string[]};
}

declare class LiveLinkBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): LiveLinkBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): LiveLinkBlueprintLibrary;
	static GetDefaultObject(): LiveLinkBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkBlueprintLibrary;
	static TransformNames(SubjectFrameHandle?: SubjectFrameHandle,TransformNames?: string[]): {SubjectFrameHandle: SubjectFrameHandle, TransformNames: string[]};
	static TransformName(LiveLinkTransform?: LiveLinkTransform,Name?: string): {LiveLinkTransform: LiveLinkTransform, Name: string};
	static RequestShutdown(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static ParentBoneSpaceTransform(LiveLinkTransform?: LiveLinkTransform,Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	static NumberOfTransforms(SubjectFrameHandle?: SubjectFrameHandle): {SubjectFrameHandle: SubjectFrameHandle, $: number};
	static IsSourceStillValid(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: boolean};
	static HasParent(LiveLinkTransform?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, $: boolean};
	static GetTransformByName(SubjectFrameHandle?: SubjectFrameHandle,TransformName?: string,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetTransformByIndex(SubjectFrameHandle?: SubjectFrameHandle,TransformIndex?: number,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetSourceType(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetSourceStatus(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetSourceMachineName(SourceHandle?: LiveLinkSourceHandle): {SourceHandle: LiveLinkSourceHandle, $: string};
	static GetRootTransform(SubjectFrameHandle?: SubjectFrameHandle,LiveLinkTransform?: LiveLinkTransform): {SubjectFrameHandle: SubjectFrameHandle, LiveLinkTransform: LiveLinkTransform};
	static GetParent(LiveLinkTransform?: LiveLinkTransform,Parent?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, Parent: LiveLinkTransform};
	static GetMetadata(SubjectFrameHandle?: SubjectFrameHandle,MetaData?: SubjectMetadata): {SubjectFrameHandle: SubjectFrameHandle, MetaData: SubjectMetadata};
	static GetCurves(SubjectFrameHandle?: SubjectFrameHandle,Curves?: any): {SubjectFrameHandle: SubjectFrameHandle, Curves: any};
	static GetChildren(LiveLinkTransform?: LiveLinkTransform,Children?: LiveLinkTransform[]): {LiveLinkTransform: LiveLinkTransform, Children: LiveLinkTransform[]};
	static ComponentSpaceTransform(LiveLinkTransform?: LiveLinkTransform,Transform?: Transform): {LiveLinkTransform: LiveLinkTransform, Transform: Transform};
	static ChildCount(LiveLinkTransform?: LiveLinkTransform): {LiveLinkTransform: LiveLinkTransform, $: number};
	static C(Other: UObject | any): LiveLinkBlueprintLibrary;
}

declare class LiveLinkComponent extends ActorComponent { 
	OnLiveLinkUpdated: UnrealEngineMulticastDelegate<(DeltaTime: number) => void>;
	static Load(ResourceName: string): LiveLinkComponent;
	static Find(Outer: UObject, ResourceName: string): LiveLinkComponent;
	static GetDefaultObject(): LiveLinkComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkComponent;
	GetSubjectDataAtWorldTime(SubjectName: string,WorldTime: number,bSuccess?: boolean,SubjectFrameHandle?: SubjectFrameHandle): {bSuccess: boolean, SubjectFrameHandle: SubjectFrameHandle};
	GetSubjectDataAtSceneTime(SubjectName: string,SceneTime: Timecode,bSuccess?: boolean,SubjectFrameHandle?: SubjectFrameHandle): {bSuccess: boolean, SubjectFrameHandle: SubjectFrameHandle};
	GetSubjectData(SubjectName: string,bSuccess?: boolean,SubjectFrameHandle?: SubjectFrameHandle): {bSuccess: boolean, SubjectFrameHandle: SubjectFrameHandle};
	GetAvailableSubjectNames(SubjectNames?: string[]): {SubjectNames: string[]};
	static C(Other: UObject | any): LiveLinkComponent;
}

declare class LiveLinkSubjectName { 
	Name: string;
	clone() : LiveLinkSubjectName;
	static C(Other: UObject | any): LiveLinkSubjectName;
}

declare class LiveLinkDrivenComponent extends ActorComponent { 
	SubjectName: LiveLinkSubjectName;
	ActorTransformBone: string;
	bModifyActorTransform: boolean;
	bSetRelativeLocation: boolean;
	static Load(ResourceName: string): LiveLinkDrivenComponent;
	static Find(Outer: UObject, ResourceName: string): LiveLinkDrivenComponent;
	static GetDefaultObject(): LiveLinkDrivenComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkDrivenComponent;
	static C(Other: UObject | any): LiveLinkDrivenComponent;
}

declare class LiveLinkRetargetAsset extends UObject { 
	static Load(ResourceName: string): LiveLinkRetargetAsset;
	static Find(Outer: UObject, ResourceName: string): LiveLinkRetargetAsset;
	static GetDefaultObject(): LiveLinkRetargetAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkRetargetAsset;
	static C(Other: UObject | any): LiveLinkRetargetAsset;
}

declare class LiveLinkInstance extends AnimInstance { 
	CurrentRetargetAsset: LiveLinkRetargetAsset;
	static Load(ResourceName: string): LiveLinkInstance;
	static Find(Outer: UObject, ResourceName: string): LiveLinkInstance;
	static GetDefaultObject(): LiveLinkInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkInstance;
	static C(Other: UObject | any): LiveLinkInstance;
}

declare class ProviderPollResult { 
	Name: string;
	MachineName: string;
	clone() : ProviderPollResult;
	static C(Other: UObject | any): ProviderPollResult;
}

declare class LiveLinkMessageBusFinder extends UObject { 
	static Load(ResourceName: string): LiveLinkMessageBusFinder;
	static Find(Outer: UObject, ResourceName: string): LiveLinkMessageBusFinder;
	static GetDefaultObject(): LiveLinkMessageBusFinder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMessageBusFinder;
	GetAvailableProviders(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Duration: number,AvailableProviders?: ProviderPollResult[]): {AvailableProviders: ProviderPollResult[]};
	static ConstructMessageBusFinder(): LiveLinkMessageBusFinder;
	static ConnectToProvider(Provider?: ProviderPollResult,SourceHandle?: LiveLinkSourceHandle): {Provider: ProviderPollResult, SourceHandle: LiveLinkSourceHandle};
	static C(Other: UObject | any): LiveLinkMessageBusFinder;
}

declare class LiveLinkRemapAsset extends LiveLinkRetargetAsset { 
	static Load(ResourceName: string): LiveLinkRemapAsset;
	static Find(Outer: UObject, ResourceName: string): LiveLinkRemapAsset;
	static GetDefaultObject(): LiveLinkRemapAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkRemapAsset;
	RemapCurveElements(CurveItems?: any): {CurveItems: any};
	GetRemappedCurveName(CurveName: string): string;
	GetRemappedBoneName(BoneName: string): string;
	static C(Other: UObject | any): LiveLinkRemapAsset;
}

declare class LiveLinkTimeSynchronizationSource extends TimeSynchronizationSource { 
	SubjectName: string;
	static Load(ResourceName: string): LiveLinkTimeSynchronizationSource;
	static Find(Outer: UObject, ResourceName: string): LiveLinkTimeSynchronizationSource;
	static GetDefaultObject(): LiveLinkTimeSynchronizationSource;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkTimeSynchronizationSource;
	static C(Other: UObject | any): LiveLinkTimeSynchronizationSource;
}

declare class LiveLinkCurveElement { 
	CurveName: string;
	CurveValue: number;
	clone() : LiveLinkCurveElement;
	static C(Other: UObject | any): LiveLinkCurveElement;
}

declare class LiveLinkWorldTime { 
	Time: any;
	Offset: any;
	clone() : LiveLinkWorldTime;
	static C(Other: UObject | any): LiveLinkWorldTime;
}

declare class LiveLinkMetaData { 
	StringMetaData: any;
	clone() : LiveLinkMetaData;
	static C(Other: UObject | any): LiveLinkMetaData;
}

declare class LiveLinkFrameData { 
	Transforms: Transform[];
	CurveElements: LiveLinkCurveElement[];
	WorldTime: LiveLinkWorldTime;
	MetaData: LiveLinkMetaData;
	clone() : LiveLinkFrameData;
	static C(Other: UObject | any): LiveLinkFrameData;
}

declare class LiveLinkRefSkeleton { 
	BoneNames: string[];
	BoneParents: number[];
	clone() : LiveLinkRefSkeleton;
	static C(Other: UObject | any): LiveLinkRefSkeleton;
}

declare class MovieSceneLiveLinkSection extends MovieSceneSection { 
	SubjectName: string;
	TemplateToPush: LiveLinkFrameData;
	RefSkeleton: LiveLinkRefSkeleton;
	PropertyFloatChannels: MovieSceneFloatChannel[];
	static Load(ResourceName: string): MovieSceneLiveLinkSection;
	static Find(Outer: UObject, ResourceName: string): MovieSceneLiveLinkSection;
	static GetDefaultObject(): MovieSceneLiveLinkSection;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneLiveLinkSection;
	static C(Other: UObject | any): MovieSceneLiveLinkSection;
}

declare class MovieSceneLiveLinkTrack extends MovieScenePropertyTrack { 
	static Load(ResourceName: string): MovieSceneLiveLinkTrack;
	static Find(Outer: UObject, ResourceName: string): MovieSceneLiveLinkTrack;
	static GetDefaultObject(): MovieSceneLiveLinkTrack;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieSceneLiveLinkTrack;
	static C(Other: UObject | any): MovieSceneLiveLinkTrack;
}

declare class SequenceRecordingBase extends UObject { 
	static Load(ResourceName: string): SequenceRecordingBase;
	static Find(Outer: UObject, ResourceName: string): SequenceRecordingBase;
	static GetDefaultObject(): SequenceRecordingBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecordingBase;
	static C(Other: UObject | any): SequenceRecordingBase;
}

declare class ActorRecordingSettings { 
	Settings: UObject[];
	clone() : ActorRecordingSettings;
	static C(Other: UObject | any): ActorRecordingSettings;
}

declare class AnimationRecordingSettings { 
	bRecordInWorldSpace: boolean;
	bRemoveRootAnimation: boolean;
	bAutoSaveAsset: boolean;
	SampleRate: number;
	Length: number;
	InterpMode: ERichCurveInterpMode;
	TangentMode: ERichCurveTangentMode;
	clone() : AnimationRecordingSettings;
	static C(Other: UObject | any): AnimationRecordingSettings;
}

declare class ActorRecording extends SequenceRecordingBase { 
	ActorSettings: ActorRecordingSettings;
	bActive: boolean;
	bCreateLevelSequence: boolean;
	TargetLevelSequence: LevelSequence;
	TargetName: string;
	TakeNumber: any;
	bSpecifyTargetAnimation: boolean;
	TargetAnimation: AnimSequence;
	AnimationSettings: AnimationRecordingSettings;
	bRecordToPossessable: boolean;
	ActorToRecord: Actor;
	static Load(ResourceName: string): ActorRecording;
	static Find(Outer: UObject, ResourceName: string): ActorRecording;
	static GetDefaultObject(): ActorRecording;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorRecording;
	static C(Other: UObject | any): ActorRecording;
}

declare class MovieScene3DTransformSectionRecorderSettings extends UObject { 
	bRecordTransforms: boolean;
	static Load(ResourceName: string): MovieScene3DTransformSectionRecorderSettings;
	static Find(Outer: UObject, ResourceName: string): MovieScene3DTransformSectionRecorderSettings;
	static GetDefaultObject(): MovieScene3DTransformSectionRecorderSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MovieScene3DTransformSectionRecorderSettings;
	static C(Other: UObject | any): MovieScene3DTransformSectionRecorderSettings;
}

declare class SequenceRecorderActorGroup extends UObject { 
	GroupName: string;
	SequenceName: string;
	SequenceRecordingBasePath: DirectoryPath;
	bSpecifyTargetLevelSequence: boolean;
	TargetLevelSequence: LevelSequence;
	bDuplicateTargetLevelSequence: boolean;
	bRecordTargetLevelSequenceLength: boolean;
	RecordedActors: ActorRecording[];
	static Load(ResourceName: string): SequenceRecorderActorGroup;
	static Find(Outer: UObject, ResourceName: string): SequenceRecorderActorGroup;
	static GetDefaultObject(): SequenceRecorderActorGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecorderActorGroup;
	static C(Other: UObject | any): SequenceRecorderActorGroup;
}

declare class SequenceRecorderGroup extends Actor { 
	ActorGroups: SequenceRecorderActorGroup[];
	static GetDefaultObject(): SequenceRecorderGroup;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecorderGroup;
	static C(Other: UObject | any): SequenceRecorderGroup;
}

declare class SequenceRecorderBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SequenceRecorderBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): SequenceRecorderBlueprintLibrary;
	static GetDefaultObject(): SequenceRecorderBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecorderBlueprintLibrary;
	static StopRecordingSequence(): void;
	static StartRecordingSequence(ActorsToRecord: Actor[]): void;
	static IsRecordingSequence(): boolean;
	static C(Other: UObject | any): SequenceRecorderBlueprintLibrary;
}

declare type EAudioRecordingMode = 'None' | 'AudioTrack' | 'EAudioRecordingMode_MAX';
declare var EAudioRecordingMode : { None:'None',AudioTrack:'AudioTrack',EAudioRecordingMode_MAX:'EAudioRecordingMode_MAX', };
declare class SequenceRecorderActorFilter { 
	ActorClassesToRecord: UnrealEngineClass[];
	clone() : SequenceRecorderActorFilter;
	static C(Other: UObject | any): SequenceRecorderActorFilter;
}

declare class PropertiesToRecordForClass { 
	Class: UnrealEngineClass;
	Properties: string[];
	clone() : PropertiesToRecordForClass;
	static C(Other: UObject | any): PropertiesToRecordForClass;
}

declare class PropertiesToRecordForActorClass { 
	Class: UnrealEngineClass;
	Properties: string[];
	clone() : PropertiesToRecordForActorClass;
	static C(Other: UObject | any): PropertiesToRecordForActorClass;
}

declare class SettingsForActorClass { 
	Class: UnrealEngineClass;
	bRecordToPossessable: boolean;
	clone() : SettingsForActorClass;
	static C(Other: UObject | any): SettingsForActorClass;
}

declare class SequenceRecorderSettings extends UObject { 
	bCreateLevelSequence: boolean;
	bImmersiveMode: boolean;
	SequenceLength: number;
	RecordingDelay: number;
	bAllowLooping: boolean;
	GlobalTimeDilation: number;
	bIgnoreTimeDilation: boolean;
	AnimationSubDirectory: string;
	RecordAudio: EAudioRecordingMode;
	AudioGain: number;
	bSplitAudioChannelsIntoSeparateTracks: boolean;
	bReplaceRecordedAudio: boolean;
	AudioTrackName: string;
	AudioSubDirectory: string;
	bRecordNearbySpawnedActors: boolean;
	NearbyActorRecordingProximity: number;
	bRecordWorldSettingsActor: boolean;
	bReduceKeys: boolean;
	bAutoSaveAsset: boolean;
	ActorFilter: SequenceRecorderActorFilter;
	LevelSequenceActorsToTrigger: any[];
	DefaultAnimationSettings: AnimationRecordingSettings;
	bRecordSequencerSpawnedActors: boolean;
	ClassesAndPropertiesToRecord: PropertiesToRecordForClass[];
	ActorsAndPropertiesToRecord: PropertiesToRecordForActorClass[];
	PerActorSettings: SettingsForActorClass[];
	static Load(ResourceName: string): SequenceRecorderSettings;
	static Find(Outer: UObject, ResourceName: string): SequenceRecorderSettings;
	static GetDefaultObject(): SequenceRecorderSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SequenceRecorderSettings;
	static C(Other: UObject | any): SequenceRecorderSettings;
}

declare type EPinnedCommandListType = 'Command' | 'CustomWidget' | 'EPinnedCommandListType_MAX';
declare var EPinnedCommandListType : { Command:'Command',CustomWidget:'CustomWidget',EPinnedCommandListType_MAX:'EPinnedCommandListType_MAX', };
declare class PinnedCommandListCommand { 
	Name: string;
	Binding: string;
	Type: EPinnedCommandListType;
	clone() : PinnedCommandListCommand;
	static C(Other: UObject | any): PinnedCommandListCommand;
}

declare class PinnedCommandListContext { 
	Name: string;
	Commands: PinnedCommandListCommand[];
	clone() : PinnedCommandListContext;
	static C(Other: UObject | any): PinnedCommandListContext;
}

declare class PinnedCommandListSettings extends UObject { 
	Contexts: PinnedCommandListContext[];
	static Load(ResourceName: string): PinnedCommandListSettings;
	static Find(Outer: UObject, ResourceName: string): PinnedCommandListSettings;
	static GetDefaultObject(): PinnedCommandListSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PinnedCommandListSettings;
	static C(Other: UObject | any): PinnedCommandListSettings;
}

declare class AnimationEditorPreviewActor extends Actor { 
	static GetDefaultObject(): AnimationEditorPreviewActor;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimationEditorPreviewActor;
	static C(Other: UObject | any): AnimationEditorPreviewActor;
}

declare class PersonaPreviewSceneController extends UObject { 
	static Load(ResourceName: string): PersonaPreviewSceneController;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneController;
	static GetDefaultObject(): PersonaPreviewSceneController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneController;
	static C(Other: UObject | any): PersonaPreviewSceneController;
}

declare class PersonaPreviewSceneAnimationController extends PersonaPreviewSceneController { 
	Animation: AnimationAsset;
	static Load(ResourceName: string): PersonaPreviewSceneAnimationController;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneAnimationController;
	static GetDefaultObject(): PersonaPreviewSceneAnimationController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneAnimationController;
	static C(Other: UObject | any): PersonaPreviewSceneAnimationController;
}

declare class PersonaPreviewSceneDefaultController extends PersonaPreviewSceneController { 
	static Load(ResourceName: string): PersonaPreviewSceneDefaultController;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneDefaultController;
	static GetDefaultObject(): PersonaPreviewSceneDefaultController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneDefaultController;
	static C(Other: UObject | any): PersonaPreviewSceneDefaultController;
}

declare class PersonaPreviewSceneDescription extends UObject { 
	PreviewController: UnrealEngineClass;
	PreviewControllerInstance: PersonaPreviewSceneController;
	PreviewControllerInstances: PersonaPreviewSceneController[];
	PreviewMesh: SkeletalMesh;
	AdditionalMeshes: DataAsset;
	DefaultAdditionalMeshes: PreviewMeshCollection;
	static Load(ResourceName: string): PersonaPreviewSceneDescription;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneDescription;
	static GetDefaultObject(): PersonaPreviewSceneDescription;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneDescription;
	static C(Other: UObject | any): PersonaPreviewSceneDescription;
}

declare class PersonaPreviewSceneRefPoseController extends PersonaPreviewSceneController { 
	bResetBoneTransforms: boolean;
	static Load(ResourceName: string): PersonaPreviewSceneRefPoseController;
	static Find(Outer: UObject, ResourceName: string): PersonaPreviewSceneRefPoseController;
	static GetDefaultObject(): PersonaPreviewSceneRefPoseController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PersonaPreviewSceneRefPoseController;
	static C(Other: UObject | any): PersonaPreviewSceneRefPoseController;
}

declare class AnimNode_LiveLinkPose extends AnimNode_Base { 
	SubjectName: string;
	RetargetAsset: UnrealEngineClass;
	CurrentRetargetAsset: LiveLinkRetargetAsset;
	clone() : AnimNode_LiveLinkPose;
	static C(Other: UObject | any): AnimNode_LiveLinkPose;
}

declare class AnimGraphNode_LiveLinkPose extends AnimGraphNode_Base { 
	UNode: AnimNode_LiveLinkPose;
	static Load(ResourceName: string): AnimGraphNode_LiveLinkPose;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_LiveLinkPose;
	static GetDefaultObject(): AnimGraphNode_LiveLinkPose;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_LiveLinkPose;
	static C(Other: UObject | any): AnimGraphNode_LiveLinkPose;
}

declare class LiveLinkMessageBusSourceFactory extends LiveLinkSourceFactory { 
	static Load(ResourceName: string): LiveLinkMessageBusSourceFactory;
	static Find(Outer: UObject, ResourceName: string): LiveLinkMessageBusSourceFactory;
	static GetDefaultObject(): LiveLinkMessageBusSourceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMessageBusSourceFactory;
	static C(Other: UObject | any): LiveLinkMessageBusSourceFactory;
}

declare class LiveLinkPreviewController extends PersonaPreviewSceneController { 
	SubjectName: string;
	bEnableCameraSync: boolean;
	RetargetAsset: UnrealEngineClass;
	static Load(ResourceName: string): LiveLinkPreviewController;
	static Find(Outer: UObject, ResourceName: string): LiveLinkPreviewController;
	static GetDefaultObject(): LiveLinkPreviewController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkPreviewController;
	static C(Other: UObject | any): LiveLinkPreviewController;
}

declare class LiveLinkVirtualSubject { 
	Subjects: string[];
	Source: Guid;
	clone() : LiveLinkVirtualSubject;
	static C(Other: UObject | any): LiveLinkVirtualSubject;
}

declare class LiveLinkVirtualSubjectDetails extends UObject { 
	VirtualSubjectProxy: LiveLinkVirtualSubject;
	static Load(ResourceName: string): LiveLinkVirtualSubjectDetails;
	static Find(Outer: UObject, ResourceName: string): LiveLinkVirtualSubjectDetails;
	static GetDefaultObject(): LiveLinkVirtualSubjectDetails;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkVirtualSubjectDetails;
	static C(Other: UObject | any): LiveLinkVirtualSubjectDetails;
}

declare class LightPropagationVolumeSettings { 
	bOverride_LPVIntensity: boolean;
	bOverride_LPVDirectionalOcclusionIntensity: boolean;
	bOverride_LPVDirectionalOcclusionRadius: boolean;
	bOverride_LPVDiffuseOcclusionExponent: boolean;
	bOverride_LPVSpecularOcclusionExponent: boolean;
	bOverride_LPVDiffuseOcclusionIntensity: boolean;
	bOverride_LPVSpecularOcclusionIntensity: boolean;
	bOverride_LPVSize: boolean;
	bOverride_LPVSecondaryOcclusionIntensity: boolean;
	bOverride_LPVSecondaryBounceIntensity: boolean;
	bOverride_LPVGeometryVolumeBias: boolean;
	bOverride_LPVVplInjectionBias: boolean;
	bOverride_LPVEmissiveInjectionIntensity: boolean;
	LPVIntensity: number;
	LPVVplInjectionBias: number;
	LPVSize: number;
	LPVSecondaryOcclusionIntensity: number;
	LPVSecondaryBounceIntensity: number;
	LPVGeometryVolumeBias: number;
	LPVEmissiveInjectionIntensity: number;
	LPVDirectionalOcclusionIntensity: number;
	LPVDirectionalOcclusionRadius: number;
	LPVDiffuseOcclusionExponent: number;
	LPVSpecularOcclusionExponent: number;
	LPVDiffuseOcclusionIntensity: number;
	LPVSpecularOcclusionIntensity: number;
	LPVFadeRange: number;
	LPVDirectionalOcclusionFadeRange: number;
	clone() : LightPropagationVolumeSettings;
	static C(Other: UObject | any): LightPropagationVolumeSettings;
}

declare class LightPropagationVolumeBlendable extends UObject { 
	Settings: LightPropagationVolumeSettings;
	BlendWeight: number;
	static Load(ResourceName: string): LightPropagationVolumeBlendable;
	static Find(Outer: UObject, ResourceName: string): LightPropagationVolumeBlendable;
	static GetDefaultObject(): LightPropagationVolumeBlendable;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LightPropagationVolumeBlendable;
	static C(Other: UObject | any): LightPropagationVolumeBlendable;
}

declare class EdGraph_ReferenceViewer extends EdGraph { 
	static Load(ResourceName: string): EdGraph_ReferenceViewer;
	static Find(Outer: UObject, ResourceName: string): EdGraph_ReferenceViewer;
	static GetDefaultObject(): EdGraph_ReferenceViewer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraph_ReferenceViewer;
	static C(Other: UObject | any): EdGraph_ReferenceViewer;
}

declare class EdGraphNode_Reference extends EdGraphNode { 
	static Load(ResourceName: string): EdGraphNode_Reference;
	static Find(Outer: UObject, ResourceName: string): EdGraphNode_Reference;
	static GetDefaultObject(): EdGraphNode_Reference;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EdGraphNode_Reference;
	static C(Other: UObject | any): EdGraphNode_Reference;
}

declare class ReferenceViewerSchema extends EdGraphSchema { 
	static Load(ResourceName: string): ReferenceViewerSchema;
	static Find(Outer: UObject, ResourceName: string): ReferenceViewerSchema;
	static GetDefaultObject(): ReferenceViewerSchema;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ReferenceViewerSchema;
	static C(Other: UObject | any): ReferenceViewerSchema;
}

declare class ContentBrowserFrontEndFilterExtension extends UObject { 
	static Load(ResourceName: string): ContentBrowserFrontEndFilterExtension;
	static Find(Outer: UObject, ResourceName: string): ContentBrowserFrontEndFilterExtension;
	static GetDefaultObject(): ContentBrowserFrontEndFilterExtension;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ContentBrowserFrontEndFilterExtension;
	static C(Other: UObject | any): ContentBrowserFrontEndFilterExtension;
}

declare class InternationalizationExportSettings extends UObject { 
	CulturesToGenerate: string[];
	CommandletClass: string;
	SourcePath: string;
	DestinationPath: string;
	PortableObjectName: string;
	ManifestName: string;
	ArchiveName: string;
	bExportLoc: boolean;
	bImportLoc: boolean;
	bUseCultureDirectory: boolean;
	static Load(ResourceName: string): InternationalizationExportSettings;
	static Find(Outer: UObject, ResourceName: string): InternationalizationExportSettings;
	static GetDefaultObject(): InternationalizationExportSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): InternationalizationExportSettings;
	static C(Other: UObject | any): InternationalizationExportSettings;
}

declare class TranslationPickerSettings extends UObject { 
	bSubmitTranslationPickerChangesToLocalizationService: boolean;
	static Load(ResourceName: string): TranslationPickerSettings;
	static Find(Outer: UObject, ResourceName: string): TranslationPickerSettings;
	static GetDefaultObject(): TranslationPickerSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TranslationPickerSettings;
	static C(Other: UObject | any): TranslationPickerSettings;
}

declare class TranslationChange { 
	Version: string;
	DateAndTime: DateTime;
	Source: string;
	Translation: string;
	clone() : TranslationChange;
	static C(Other: UObject | any): TranslationChange;
}

declare class TranslationContextInfo { 
	Key: string;
	Context: string;
	Changes: TranslationChange[];
	clone() : TranslationContextInfo;
	static C(Other: UObject | any): TranslationContextInfo;
}

declare class TranslationUnit extends UObject { 
	Namespace: string;
	Key: string;
	Source: string;
	Translation: string;
	Contexts: TranslationContextInfo[];
	HasBeenReviewed: boolean;
	TranslationBeforeImport: string;
	LocresPath: string;
	static Load(ResourceName: string): TranslationUnit;
	static Find(Outer: UObject, ResourceName: string): TranslationUnit;
	static GetDefaultObject(): TranslationUnit;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TranslationUnit;
	static C(Other: UObject | any): TranslationUnit;
}

declare class PixelInspectorView extends UObject { 
	FinalColor: LinearColor;
	SceneColor: LinearColor;
	PreExposure: number;
	Luminance: number;
	HdrColor: LinearColor;
	Normal: Vector;
	PerObjectGBufferData: number;
	Metallic: number;
	Specular: number;
	Roughness: number;
	MaterialShadingModel: EMaterialShadingModel;
	SelectiveOutputMask: number;
	BaseColor: LinearColor;
	IndirectIrradiance: number;
	AmbientOcclusion: number;
	SubsurfaceColor: LinearColor;
	SubsurfaceProfile: Vector;
	Opacity: number;
	Clearcoat: number;
	ClearCoatRoughness: number;
	WorldNormal: Vector;
	BackLit: number;
	Cloth: number;
	EyeTangent: Vector;
	IrisMask: number;
	IrisDistance: number;
	static Load(ResourceName: string): PixelInspectorView;
	static Find(Outer: UObject, ResourceName: string): PixelInspectorView;
	static GetDefaultObject(): PixelInspectorView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PixelInspectorView;
	static C(Other: UObject | any): PixelInspectorView;
}

declare class DataValidationCommandlet extends Commandlet { 
	static Load(ResourceName: string): DataValidationCommandlet;
	static Find(Outer: UObject, ResourceName: string): DataValidationCommandlet;
	static GetDefaultObject(): DataValidationCommandlet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataValidationCommandlet;
	static C(Other: UObject | any): DataValidationCommandlet;
}

declare class DataValidationManager extends UObject { 
	ExcludedDirectories: DirectoryPath[];
	bValidateOnSave: boolean;
	DataValidationManagerClassName: SoftClassPath;
	static Load(ResourceName: string): DataValidationManager;
	static Find(Outer: UObject, ResourceName: string): DataValidationManager;
	static GetDefaultObject(): DataValidationManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DataValidationManager;
	static C(Other: UObject | any): DataValidationManager;
}

declare class AudioCurveSourceComponent extends AudioComponent { 
	CurveSourceBindingName: string;
	CurveSyncOffset: number;
	static Load(ResourceName: string): AudioCurveSourceComponent;
	static Find(Outer: UObject, ResourceName: string): AudioCurveSourceComponent;
	static GetDefaultObject(): AudioCurveSourceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AudioCurveSourceComponent;
	static C(Other: UObject | any): AudioCurveSourceComponent;
}

declare class FacialAnimationBulkImporterSettings extends UObject { 
	SourceImportPath: DirectoryPath;
	TargetImportPath: DirectoryPath;
	CurveNodeName: string;
	static Load(ResourceName: string): FacialAnimationBulkImporterSettings;
	static Find(Outer: UObject, ResourceName: string): FacialAnimationBulkImporterSettings;
	static GetDefaultObject(): FacialAnimationBulkImporterSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FacialAnimationBulkImporterSettings;
	static C(Other: UObject | any): FacialAnimationBulkImporterSettings;
}

declare class GameplayTagSearchFilter extends ContentBrowserFrontEndFilterExtension { 
	static Load(ResourceName: string): GameplayTagSearchFilter;
	static Find(Outer: UObject, ResourceName: string): GameplayTagSearchFilter;
	static GetDefaultObject(): GameplayTagSearchFilter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagSearchFilter;
	static C(Other: UObject | any): GameplayTagSearchFilter;
}

declare class GameplayTagsK2Node_LiteralGameplayTag extends K2Node { 
	static Load(ResourceName: string): GameplayTagsK2Node_LiteralGameplayTag;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_LiteralGameplayTag;
	static GetDefaultObject(): GameplayTagsK2Node_LiteralGameplayTag;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_LiteralGameplayTag;
	static C(Other: UObject | any): GameplayTagsK2Node_LiteralGameplayTag;
}

declare class GameplayTagsK2Node_MultiCompareBase extends K2Node { 
	NumberOfPins: number;
	PinNames: string[];
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareBase;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareBase;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareBase;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareBase;
	static C(Other: UObject | any): GameplayTagsK2Node_MultiCompareBase;
}

declare class GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface extends GameplayTagsK2Node_MultiCompareBase { 
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
	static C(Other: UObject | any): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterface;
}

declare class GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags extends GameplayTagsK2Node_MultiCompareBase { 
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
	static C(Other: UObject | any): GameplayTagsK2Node_MultiCompareGameplayTagAssetInterfaceSingleTags;
}

declare class GameplayTagsK2Node_MultiCompareGameplayTagContainer extends GameplayTagsK2Node_MultiCompareBase { 
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
	static C(Other: UObject | any): GameplayTagsK2Node_MultiCompareGameplayTagContainer;
}

declare class GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags extends GameplayTagsK2Node_MultiCompareBase { 
	static Load(ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
	static GetDefaultObject(): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
	static C(Other: UObject | any): GameplayTagsK2Node_MultiCompareGameplayTagContainerSingleTags;
}

declare class GameplayTagsK2Node_SwitchGameplayTag extends K2Node_Switch { 
	PinTags: GameplayTag[];
	PinNames: string[];
	static Load(ResourceName: string): GameplayTagsK2Node_SwitchGameplayTag;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_SwitchGameplayTag;
	static GetDefaultObject(): GameplayTagsK2Node_SwitchGameplayTag;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_SwitchGameplayTag;
	static C(Other: UObject | any): GameplayTagsK2Node_SwitchGameplayTag;
}

declare class GameplayTagsK2Node_SwitchGameplayTagContainer extends K2Node_Switch { 
	PinContainers: GameplayTagContainer[];
	PinNames: string[];
	static Load(ResourceName: string): GameplayTagsK2Node_SwitchGameplayTagContainer;
	static Find(Outer: UObject, ResourceName: string): GameplayTagsK2Node_SwitchGameplayTagContainer;
	static GetDefaultObject(): GameplayTagsK2Node_SwitchGameplayTagContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameplayTagsK2Node_SwitchGameplayTagContainer;
	static C(Other: UObject | any): GameplayTagsK2Node_SwitchGameplayTagContainer;
}

declare class CarSimBPFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): CarSimBPFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): CarSimBPFunctionLibrary;
	static GetDefaultObject(): CarSimBPFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CarSimBPFunctionLibrary;
	static WritePathToFile(File: string,Path: Vector[]): boolean;
	static UnrealToCarSimLocation(X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
	static GetUnrealTransformFromSolverValues(X: number,Y: number,Z: number,Roll: number,Pitch: number,Yaw: number): Transform;
	static GetHappyMessage(): string;
	static CarSimToUnrealLocation(X?: number,Y?: number,Z?: number): {X: number, Y: number, Z: number};
	static C(Other: UObject | any): CarSimBPFunctionLibrary;
}

declare class VsVarHandle { 
	mOwnerUObject: UObject;
	clone() : VsVarHandle;
	static C(Other: UObject | any): VsVarHandle;
}

declare class VsDoubleArray { 
	clone() : VsDoubleArray;
	static C(Other: UObject | any): VsDoubleArray;
}

declare class VsSolverVarHandle extends VsVarHandle { 
	clone() : VsSolverVarHandle;
	static C(Other: UObject | any): VsSolverVarHandle;
}

declare class VsMovementComponent extends PawnMovementComponent { 
	static Load(ResourceName: string): VsMovementComponent;
	static Find(Outer: UObject, ResourceName: string): VsMovementComponent;
	static GetDefaultObject(): VsMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VsMovementComponent;
	SyncVsVehicleLocOri(): void;
	SetVectorValue(inputHandle: VsVarHandle,Value: Vector): void;
	SetThrottleInput(Val: number): void;
	SetSteeringInput(Val: number): void;
	SetIntValue(Handle: VsVarHandle,Value: number): void;
	SetFloatValues(inputHandle: VsVarHandle,Data: VsDoubleArray): void;
	SetFloatValue(inputHandle: VsVarHandle,Value: number): void;
	SetClutchInput(Val: number): void;
	SetBrakeInput(Val: number): void;
	RegisterWithVsConnect(): boolean;
	OwnsOutputHandle(Handle: VsVarHandle): boolean;
	OwnsInputHandle(Handle: VsVarHandle): boolean;
	GetWheelTransform(unitIndex: number,axleIndex: number,axleSide: number): Transform;
	GetWheelRotation(unitIndex: number,axleIndex: number,axleSide: number): number;
	GetVsSolverVarValue(varHandle: VsSolverVarHandle): number;
	GetVsSolverVarHandle(VarName: string): VsSolverVarHandle;
	GetVscObjectName(): string;
	GetVectorValue(outputHandle: VsVarHandle): Vector;
	GetTireTransform(unitIndex: number,axleIndex: number,axleSide: number,wheelSide: number): Transform;
	GetTireRotation(unitIndex: number,axleIndex: number,axleSide: number,wheelSide: number): number;
	GetOutputHandle(Name: string,Params: string): VsVarHandle;
	GetNumUnits(): number;
	GetNumForwardGears(): number;
	GetNumAxles(unitIndex: number): number;
	GetIntValue(Handle: VsVarHandle): number;
	GetInputHandle(Name: string,Params: string): VsVarHandle;
	GetFloatValue(outputHandle: VsVarHandle): number;
	GetDualTireWidth(unitIndex: number,axleIndex: number): number;
	GetAxleTrack(unitIndex: number,axleIndex: number): number;
	GetAxleOffsetForward(unitIndex: number,axleIndex: number): number;
	DeregisterWithVsConnect(): boolean;
	static C(Other: UObject | any): VsMovementComponent;
}

declare class CarSimMovementComponent extends VsMovementComponent { 
	VsConfigFile: string;
	SolverRunForever: boolean;
	InitOnGround: boolean;
	AutoResetSolver: boolean;
	UseVehicleSimRoad: boolean;
	UseVehicleSimStartPosition: boolean;
	UseVehicleSimDriver: boolean;
	DisableVehicle: boolean;
	MaxHandWheelAngleDegrees: number;
	MaxThrottle: number;
	MaxBrakePedalForceNewtons: number;
	ResetLocaion: Vector;
	ResetOrientation: Rotator;
	EngineRadPerSec: number;
	CurrentGear: number;
	ForwardSpeed: number;
	EnginePowerNorm: number;
	static Load(ResourceName: string): CarSimMovementComponent;
	static Find(Outer: UObject, ResourceName: string): CarSimMovementComponent;
	static GetDefaultObject(): CarSimMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CarSimMovementComponent;
	VsSolverIsOk(): boolean;
	ResetVsVehicle(applyResetPosAndOri: boolean): void;
	IsModuleLoadedAndActive(): boolean;
	GetUnitWorldPosition(unitIndex: number): Vector;
	GetUnitWorldOrientation(unitIndex: number): Rotator;
	GetSteeringWheelAngleRightDeg(): number;
	GetForwardSpeed(): number;
	GetEnginePowerOutputNorm(): number;
	GetCurrentGear(): number;
	static C(Other: UObject | any): CarSimMovementComponent;
}

declare class CarsimPawn extends Pawn { 
	CarSimVehicleOrigin: SceneComponent;
	BodyShapeOffset: SceneComponent;
	SpringArm: SpringArmComponent;
	Camera: CameraComponent;
	InternalCameraBase: SceneComponent;
	InternalCamera: CameraComponent;
	CarSimMovement: CarSimMovementComponent;
	bInCarCameraActive: boolean;
	static GetDefaultObject(): CarsimPawn;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CarsimPawn;
	SetThrottlePedal(Val: number): void;
	SetClutchPedal(Val: number): void;
	SetBrakePedal(Val: number): void;
	GetThrottlePedal(): number;
	GetClutchPedal(): number;
	GetCarSimMovement(): CarSimMovementComponent;
	GetBrakePedal(): number;
	static C(Other: UObject | any): CarsimPawn;
}

declare class VsConnectNode extends UObject { 
	static Load(ResourceName: string): VsConnectNode;
	static Find(Outer: UObject, ResourceName: string): VsConnectNode;
	static GetDefaultObject(): VsConnectNode;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VsConnectNode;
	Shutdown(): void;
	static C(Other: UObject | any): VsConnectNode;
}

declare class VsConnect extends UObject { 
	mVscNodes: VsConnectNode[];
	mVscObjects: any;
	static Load(ResourceName: string): VsConnect;
	static Find(Outer: UObject, ResourceName: string): VsConnect;
	static GetDefaultObject(): VsConnect;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VsConnect;
	Listen_IP(ListenAddress: string,Port: number,maxConnections: number,allowBlockingForTimeSerialization: boolean): VsConnectNode;
	IsBlocking(): boolean;
	GetWorld(): World;
	static GetVsConnectInstanceFromWorld(World: World): VsConnect;
	static GetVsConnectInstanceFromObject(UObject: UObject): VsConnect;
	static C(Other: UObject | any): VsConnect;
}

declare class VsConnectComponent extends ActorComponent { 
	vsConnectObjectName: string;
	AutoRegisterWithVsConnect: boolean;
	static Load(ResourceName: string): VsConnectComponent;
	static Find(Outer: UObject, ResourceName: string): VsConnectComponent;
	static GetDefaultObject(): VsConnectComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VsConnectComponent;
	SetVectorValue(inputHandle: VsVarHandle,Value: Vector): void;
	SetIntValue(Handle: VsVarHandle,Value: number): void;
	SetFloatValues(inputHandle: VsVarHandle,Data: VsDoubleArray): void;
	SetFloatValue(inputHandle: VsVarHandle,Value: number): void;
	RegisterWithVsConnect(): boolean;
	OwnsOutputHandle(Handle: VsVarHandle): boolean;
	OwnsInputHandle(Handle: VsVarHandle): boolean;
	GetVscObjectName(): string;
	GetVectorValue(outputHandle: VsVarHandle): Vector;
	GetOutputHandle(Name: string,Params: string): VsVarHandle;
	GetIntValue(Handle: VsVarHandle): number;
	GetInputHandle(Name: string,Params: string): VsVarHandle;
	GetFloatValue(outputHandle: VsVarHandle): number;
	DeregisterWithVsConnect(): boolean;
	static C(Other: UObject | any): VsConnectComponent;
}

declare class VsConnectObject extends Interface { 
	static Load(ResourceName: string): VsConnectObject;
	static Find(Outer: UObject, ResourceName: string): VsConnectObject;
	static GetDefaultObject(): VsConnectObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VsConnectObject;
	SetVectorValue(inputHandle: VsVarHandle,Value: Vector): void;
	SetIntValue(Handle: VsVarHandle,Value: number): void;
	SetFloatValues(inputHandle: VsVarHandle,Data: VsDoubleArray): void;
	SetFloatValue(inputHandle: VsVarHandle,Value: number): void;
	RegisterWithVsConnect(): boolean;
	OwnsOutputHandle(Handle: VsVarHandle): boolean;
	OwnsInputHandle(Handle: VsVarHandle): boolean;
	GetVscObjectName(): string;
	GetVectorValue(outputHandle: VsVarHandle): Vector;
	GetOutputHandle(Name: string,Params: string): VsVarHandle;
	GetIntValue(Handle: VsVarHandle): number;
	GetInputHandle(Name: string,Params: string): VsVarHandle;
	GetFloatValue(Handle: VsVarHandle): number;
	DeregisterWithVsConnect(): boolean;
	static C(Other: UObject | any): VsConnectObject;
}

declare class CreaturePackAnimationAsset extends UObject { 
	animation_speed: number;
	collection_material: MaterialInterface;
	CreatureZipBinary: number[];
	AssetImportData: AssetImportData;
	creature_filename: string;
	static Load(ResourceName: string): CreaturePackAnimationAsset;
	static Find(Outer: UObject, ResourceName: string): CreaturePackAnimationAsset;
	static GetDefaultObject(): CreaturePackAnimationAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CreaturePackAnimationAsset;
	static C(Other: UObject | any): CreaturePackAnimationAsset;
}

declare class CustomPackProceduralMeshComponent extends MeshComponent { 
	ModelBodySetup: BodySetup;
	static Load(ResourceName: string): CustomPackProceduralMeshComponent;
	static Find(Outer: UObject, ResourceName: string): CustomPackProceduralMeshComponent;
	static GetDefaultObject(): CustomPackProceduralMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CustomPackProceduralMeshComponent;
	static C(Other: UObject | any): CustomPackProceduralMeshComponent;
}

declare class CreaturePackMeshComponent extends CustomPackProceduralMeshComponent { 
	creature_animation_asset: CreaturePackAnimationAsset;
	animation_speed: number;
	animation_frame: number;
	creature_debug_draw: boolean;
	attach_vertex_id: number;
	region_offset_z: number;
	static Load(ResourceName: string): CreaturePackMeshComponent;
	static Find(Outer: UObject, ResourceName: string): CreaturePackMeshComponent;
	static GetDefaultObject(): CreaturePackMeshComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): CreaturePackMeshComponent;
	SetShouldLoop(flagIn: boolean): void;
	SetBlendActiveAnimation(name_in: string,factor: number): void;
	SetActiveAnimation(name_in: string): void;
	GetAttachmentPosition(vertex_id: number): Vector;
	static C(Other: UObject | any): CreaturePackMeshComponent;
}

declare class BT_FlyToTarget_DebugParams extends DoNNavigationDebugParams { 
	bVisualizePawnAsVoxels: boolean;
	clone() : BT_FlyToTarget_DebugParams;
	static C(Other: UObject | any): BT_FlyToTarget_DebugParams;
}

declare type EDonNavigationQueryStatus = 'Unscheduled' | 'InProgress' | 'Success' | 'Failure' | 'QueryHasNoSolution' | 'TimedOut' | 'EDonNavigationQueryStatus_MAX';
declare var EDonNavigationQueryStatus : { Unscheduled:'Unscheduled',InProgress:'InProgress',Success:'Success',Failure:'Failure',QueryHasNoSolution:'QueryHasNoSolution',TimedOut:'TimedOut',EDonNavigationQueryStatus_MAX:'EDonNavigationQueryStatus_MAX', };
declare class DoNNavigationQueryData { 
	Actor: any;
	CollisionComponent: any;
	Origin: Vector;
	Destination: Vector;
	QueryParams: DoNNavigationQueryParams;
	PathSolutionOptimized: Vector[];
	QueryStatus: EDonNavigationQueryStatus;
	clone() : DoNNavigationQueryData;
	static C(Other: UObject | any): DoNNavigationQueryData;
}

declare class DonNavigationDynamicCollisionPayload { 
	clone() : DonNavigationDynamicCollisionPayload;
	static C(Other: UObject | any): DonNavigationDynamicCollisionPayload;
}

declare class BTTask_FlyTo extends BTTaskNode { 
	FlightLocationKey: BlackboardKeySelector;
	FlightResultKey: BlackboardKeySelector;
	KeyToFlipFlopWhenTaskExits: BlackboardKeySelector;
	MinimumProximityRequired: number;
	bRecalcPathOnDestinationChanged: boolean;
	RecalculatePathTolerance: number;
	QueryParams: DoNNavigationQueryParams;
	DebugParams: BT_FlyToTarget_DebugParams;
	NavigationManager: DonNavigationManager;
	bTeleportToDestinationUponFailure: boolean;
	MaxTimeBeforeTeleport: number;
	static Load(ResourceName: string): BTTask_FlyTo;
	static Find(Outer: UObject, ResourceName: string): BTTask_FlyTo;
	static GetDefaultObject(): BTTask_FlyTo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): BTTask_FlyTo;
	Pathfinding_OnFinish(Data: DoNNavigationQueryData): void;
	Pathfinding_OnDynamicCollisionAlert(Data: DonNavigationDynamicCollisionPayload): void;
	static C(Other: UObject | any): BTTask_FlyTo;
}

declare class DonEnvQueryTest_Navigation extends EnvQueryTest { 
	bSearchRandomLocation: boolean;
	RandomLocationMaxAttempts: number;
	RandomLocationRadius: number;
	static Load(ResourceName: string): DonEnvQueryTest_Navigation;
	static Find(Outer: UObject, ResourceName: string): DonEnvQueryTest_Navigation;
	static GetDefaultObject(): DonEnvQueryTest_Navigation;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DonEnvQueryTest_Navigation;
	static C(Other: UObject | any): DonEnvQueryTest_Navigation;
}

declare class DonNavigationHelper extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): DonNavigationHelper;
	static Find(Outer: UObject, ResourceName: string): DonNavigationHelper;
	static GetDefaultObject(): DonNavigationHelper;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DonNavigationHelper;
	static DonNavigationManagerForActor(Actor: Actor): DonNavigationManager;
	static DonNavigationManager(WorldContextObject: UObject): DonNavigationManager;
	static C(Other: UObject | any): DonNavigationHelper;
}

declare class DonNavigationManagerUnbound extends DonNavigationManager { 
	static GetDefaultObject(): DonNavigationManagerUnbound;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DonNavigationManagerUnbound;
	static C(Other: UObject | any): DonNavigationManagerUnbound;
}

declare class DonNavigator extends Interface { 
	static Load(ResourceName: string): DonNavigator;
	static Find(Outer: UObject, ResourceName: string): DonNavigator;
	static GetDefaultObject(): DonNavigator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DonNavigator;
	OnNextSegment(NextPoint: Vector): void;
	OnLocomotionEnd(bLocomotionSuccess: boolean): void;
	OnLocomotionBegin(): void;
	OnLocomotionAbort(): void;
	AddMovementInputCustom(WorldDirection: Vector,ScaleValue: number): void;
	static C(Other: UObject | any): DonNavigator;
}

declare class EnvQueryTest_Faction extends EnvQueryTest { 
	Mode: EFactionTestMode;
	bCompareTowardsContextActor: boolean;
	Faction: Faction;
	Context: UnrealEngineClass;
	static Load(ResourceName: string): EnvQueryTest_Faction;
	static Find(Outer: UObject, ResourceName: string): EnvQueryTest_Faction;
	static GetDefaultObject(): EnvQueryTest_Faction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): EnvQueryTest_Faction;
	static C(Other: UObject | any): EnvQueryTest_Faction;
}

declare class FactionAgentInterface extends GenericTeamAgentInterface { 
	static Load(ResourceName: string): FactionAgentInterface;
	static Find(Outer: UObject, ResourceName: string): FactionAgentInterface;
	static GetDefaultObject(): FactionAgentInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FactionAgentInterface;
	EventSetFaction(Faction: Faction): void;
	EventGetFaction(OutFaction?: Faction): {OutFaction: Faction};
	static C(Other: UObject | any): FactionAgentInterface;
}

declare class FactionRelation { 
	FactionA: Faction;
	FactionB: Faction;
	Attitude: ETeamAttitude;
	clone() : FactionRelation;
	static C(Other: UObject | any): FactionRelation;
	RegistryRelation(): boolean;
	UnregistryRelation(): boolean;
	static RegistryRelation(NewRelation: FactionRelation): boolean;
	static UnregistryRelation(Relation: FactionRelation): boolean;
}

declare class FactionsLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): FactionsLibrary;
	static Find(Outer: UObject, ResourceName: string): FactionsLibrary;
	static GetDefaultObject(): FactionsLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FactionsLibrary;
	static UnregistryRelation(Relation: FactionRelation): boolean;
	static UnregistryFaction(Faction: Faction): boolean;
	static SharesFaction(One: Actor,Other: Actor): boolean;
	static SetFactionInfo(Faction: Faction,Info: FactionInfo): boolean;
	static SetFaction(Target: Actor,NewFaction: Faction): void;
	static RegistryRelation(NewRelation: FactionRelation): boolean;
	static RegistryFaction(Name: string,FactionInfo: FactionInfo): Faction;
	static NotEqual(A: Faction,B: Faction): boolean;
	static IsNeutralFaction(One: Faction,Other: Faction): boolean;
	static IsNeutral(One: Actor,Other: Actor): boolean;
	static IsHostileFaction(One: Faction,Other: Faction): boolean;
	static IsHostile(One: Actor,Other: Actor): boolean;
	static IsFriendlyFaction(One: Faction,Other: Faction): boolean;
	static IsFriendly(One: Actor,Other: Actor): boolean;
	static GetFactionInfo(Faction: Faction,Info?: FactionInfo): {Info: FactionInfo, $: boolean};
	static GetFaction(Target: Actor): Faction;
	static GetDisplayName(Faction: Faction): string;
	static GetAttitudeTowards(One: Actor,Other: Actor): ETeamAttitude;
	static GetAttitudeToFaction(One: Faction,Other: Faction): ETeamAttitude;
	static GetAllFactions(Factions?: Faction[]): {Factions: Faction[]};
	static GetAllActorsWithFaction(ContextObject: UObject,Faction: Faction,Comparison: EFactionTestMode,ActorClass: UnrealEngineClass,OutActors?: Actor[]): {OutActors: Actor[], $: boolean};
	static FactionIsNone(Faction: Faction): boolean;
	static Equals(A: Faction,B: Faction): boolean;
	static C(Other: UObject | any): FactionsLibrary;
}

declare class RelationDatabase { 
	ConfigList: FactionRelation[];
	IndexedList: any;
	clone() : RelationDatabase;
	static C(Other: UObject | any): RelationDatabase;
}

declare class FactionsSettings extends UObject { 
	Factions: any;
	Relations: RelationDatabase;
	static Load(ResourceName: string): FactionsSettings;
	static Find(Outer: UObject, ResourceName: string): FactionsSettings;
	static GetDefaultObject(): FactionsSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FactionsSettings;
	static C(Other: UObject | any): FactionsSettings;
}

declare type EGAGender = 'undefined' | 'male' | 'female' | 'EGAGender_MAX';
declare var EGAGender : { undefined:'undefined',male:'male',female:'female',EGAGender_MAX:'EGAGender_MAX', };
declare type EGAResourceFlowType = 'undefined' | 'source' | 'sink' | 'EGAResourceFlowType_MAX';
declare var EGAResourceFlowType : { undefined:'undefined',source:'source',sink:'sink',EGAResourceFlowType_MAX:'EGAResourceFlowType_MAX', };
declare type EGAProgressionStatus = 'undefined' | 'start' | 'complete' | 'fail' | 'EGAProgressionStatus_MAX';
declare var EGAProgressionStatus : { undefined:'undefined',start:'start',complete:'complete',fail:'fail',EGAProgressionStatus_MAX:'EGAProgressionStatus_MAX', };
declare type EGAErrorSeverity = 'undefined' | 'debug' | 'info' | 'warning' | 'error' | 'critical' | 'EGAErrorSeverity_MAX';
declare var EGAErrorSeverity : { undefined:'undefined',debug:'debug',info:'info',warning:'warning',error:'error',critical:'critical',EGAErrorSeverity_MAX:'EGAErrorSeverity_MAX', };
declare class GameAnalytics extends UObject { 
	static Load(ResourceName: string): GameAnalytics;
	static Find(Outer: UObject, ResourceName: string): GameAnalytics;
	static GetDefaultObject(): GameAnalytics;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameAnalytics;
	static SetGender(Gender: EGAGender): void;
	static SetFacebookId(FacebookId: string): void;
	static SetCustomDimension03(CustomDimension: string): void;
	static SetCustomDimension02(CustomDimension: string): void;
	static SetCustomDimension01(CustomDimension: string): void;
	static SetBirthYear(BirthYear: number): void;
	static IsCommandCenterReady(): boolean;
	static GetConfigurationsContentAsString(): string;
	static GetCommandCenterValueAsStringWithDefaultValue(Key: string,DefaultValue: string): string;
	static GetCommandCenterValueAsString(Key: string): string;
	static AddResourceEvent(FlowType: EGAResourceFlowType,Currency: string,Amount: number,ItemType: string,ItemId: string): void;
	static AddProgressionEvenWithOneTwoThreeAndScore(ProgressionStatus: EGAProgressionStatus,Progression01: string,Progression02: string,Progression03: string,Score: number): void;
	static AddProgressionEventWithOneTwoAndThree(ProgressionStatus: EGAProgressionStatus,Progression01: string,Progression02: string,Progression03: string): void;
	static AddProgressionEventWithOneTwoAndScore(ProgressionStatus: EGAProgressionStatus,Progression01: string,Progression02: string,Score: number): void;
	static AddProgressionEventWithOneAndTwo(ProgressionStatus: EGAProgressionStatus,Progression01: string,Progression02: string): void;
	static AddProgressionEventWithOneAndScore(ProgressionStatus: EGAProgressionStatus,Progression01: string,Score: number): void;
	static AddProgressionEventWithOne(ProgressionStatus: EGAProgressionStatus,Progression01: string): void;
	static AddErrorEvent(Severity: EGAErrorSeverity,Message: string): void;
	static AddDesignEventWithValue(EventId: string,Value: number): void;
	static AddDesignEvent(EventId: string): void;
	static AddBusinessEventIOS(Currency: string,Amount: number,ItemType: string,ItemId: string,CartType: string,Receipt: string): void;
	static AddBusinessEventAndroid(Currency: string,Amount: number,ItemType: string,ItemId: string,CartType: string,Receipt: string,Signature: string): void;
	static AddBusinessEventAndAutoFetchReceipt(Currency: string,Amount: number,ItemType: string,ItemId: string,CartType: string): void;
	static AddBusinessEvent(Currency: string,Amount: number,ItemType: string,ItemId: string,CartType: string): void;
	static C(Other: UObject | any): GameAnalytics;
}

declare class GameAnalyticsProjectSettings extends UObject { 
	IosGameKey: string;
	IosSecretKey: string;
	IosBuild: string;
	AndroidGameKey: string;
	AndroidSecretKey: string;
	AndroidBuild: string;
	MacGameKey: string;
	MacSecretKey: string;
	MacBuild: string;
	WindowsGameKey: string;
	WindowsSecretKey: string;
	WindowsBuild: string;
	LinuxGameKey: string;
	LinuxSecretKey: string;
	LinuxBuild: string;
	Html5GameKey: string;
	Html5SecretKey: string;
	Html5Build: string;
	CustomDimensions01: string[];
	CustomDimensions02: string[];
	CustomDimensions03: string[];
	ResourceCurrencies: string[];
	ResourceItemTypes: string[];
	UseManualSessionHandling: boolean;
	InfoLogBuild: boolean;
	VerboseLogBuild: boolean;
	static Load(ResourceName: string): GameAnalyticsProjectSettings;
	static Find(Outer: UObject, ResourceName: string): GameAnalyticsProjectSettings;
	static GetDefaultObject(): GameAnalyticsProjectSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): GameAnalyticsProjectSettings;
	static C(Other: UObject | any): GameAnalyticsProjectSettings;
}

declare class LiveLinkMvnRetargetAsset extends LiveLinkRetargetAsset { 
	TPoseAnimation: AnimSequence;
	static Load(ResourceName: string): LiveLinkMvnRetargetAsset;
	static Find(Outer: UObject, ResourceName: string): LiveLinkMvnRetargetAsset;
	static GetDefaultObject(): LiveLinkMvnRetargetAsset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMvnRetargetAsset;
	GetRemappedBoneName(BoneName: string): string;
	static C(Other: UObject | any): LiveLinkMvnRetargetAsset;
}

declare class LiveLinkMvnSourceFactory extends LiveLinkSourceFactory { 
	static Load(ResourceName: string): LiveLinkMvnSourceFactory;
	static Find(Outer: UObject, ResourceName: string): LiveLinkMvnSourceFactory;
	static GetDefaultObject(): LiveLinkMvnSourceFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LiveLinkMvnSourceFactory;
	static C(Other: UObject | any): LiveLinkMvnSourceFactory;
}

declare class LowEntryBitDataReader extends UObject { 
	Bytes: number[];
	Position: number;
	CurrentByte: number;
	CurrentBytePosition: number;
	static Load(ResourceName: string): LowEntryBitDataReader;
	static Find(Outer: UObject, ResourceName: string): LowEntryBitDataReader;
	static GetDefaultObject(): LowEntryBitDataReader;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryBitDataReader;
	SetPosition(Position_: number): void;
	Reset(): void;
	Remaining(): number;
	GetStringUtf8Array(): string[];
	GetStringUtf8(): string;
	GetPositiveInteger3Array(): number[];
	GetPositiveInteger3(): number;
	GetPositiveInteger2Array(): number[];
	GetPositiveInteger2(): number;
	GetPositiveInteger1Array(): number[];
	GetPositiveInteger1(): number;
	GetPosition(): number;
	GetLongBytesArray(): LowEntryLong[];
	GetLongBytes(): LowEntryLong;
	GetIntegerMostSignificantBits(BitCount: number): number;
	GetIntegerLeastSignificantBits(BitCount: number): number;
	GetIntegerArrayMostSignificantBits(BitCount: number): number[];
	GetIntegerArrayLeastSignificantBits(BitCount: number): number[];
	GetIntegerArray(): number[];
	GetInteger(): number;
	GetFloatArray(): number[];
	GetFloat(): number;
	GetDoubleBytesArray(): LowEntryDouble[];
	GetDoubleBytes(): LowEntryDouble;
	GetClone(): LowEntryBitDataReader;
	GetByteMostSignificantBits(BitCount: number): number;
	GetByteLeastSignificantBits(BitCount: number): number;
	GetByteArrayMostSignificantBits(BitCount: number): number[];
	GetByteArrayLeastSignificantBits(BitCount: number): number[];
	GetByteArray(): number[];
	GetByte(): number;
	GetBooleanArray(): boolean[];
	GetBoolean(): boolean;
	GetBitArray(): boolean[];
	GetBit(): boolean;
	Empty(): void;
	static C(Other: UObject | any): LowEntryBitDataReader;
}

declare class LowEntryBitDataWriter extends UObject { 
	Bytes: number[];
	CurrentByte: number;
	CurrentBytePosition: number;
	static Load(ResourceName: string): LowEntryBitDataWriter;
	static Find(Outer: UObject, ResourceName: string): LowEntryBitDataWriter;
	static GetDefaultObject(): LowEntryBitDataWriter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryBitDataWriter;
	AddStringUtf8Array(Value: string[]): void;
	AddStringUtf8(Value: string): void;
	AddPositiveInteger3Array(Value: number[]): void;
	AddPositiveInteger3(Value: number): void;
	AddPositiveInteger2Array(Value: number[]): void;
	AddPositiveInteger2(Value: number): void;
	AddPositiveInteger1Array(Value: number[]): void;
	AddPositiveInteger1(Value: number): void;
	AddLongBytesArray(Value: LowEntryLong[]): void;
	AddLongBytes(Value: LowEntryLong): void;
	AddIntegerMostSignificantBits(Value: number,BitCount: number): void;
	AddIntegerLeastSignificantBits(Value: number,BitCount: number): void;
	AddIntegerArrayMostSignificantBits(Value: number[],BitCount: number): void;
	AddIntegerArrayLeastSignificantBits(Value: number[],BitCount: number): void;
	AddIntegerArray(Value: number[]): void;
	AddInteger(Value: number): void;
	AddFloatArray(Value: number[]): void;
	AddFloat(Value: number): void;
	AddDoubleBytesArray(Value: LowEntryDouble[]): void;
	AddDoubleBytes(Value: LowEntryDouble): void;
	AddByteMostSignificantBits(Value: number,BitCount: number): void;
	AddByteLeastSignificantBits(Value: number,BitCount: number): void;
	AddByteArrayMostSignificantBits(Value: number[],BitCount: number): void;
	AddByteArrayLeastSignificantBits(Value: number[],BitCount: number): void;
	AddByteArray(Value: number[]): void;
	AddByte(Value: number): void;
	AddBooleanArray(Value: boolean[]): void;
	AddBoolean(Value: boolean): void;
	AddBitArray(Value: boolean[]): void;
	AddBit(Value: boolean): void;
	static C(Other: UObject | any): LowEntryBitDataWriter;
	BitDataWriter_GetBytes(): number[];
	static BitDataWriter_GetBytes(BitDataWriter: LowEntryBitDataWriter): number[];
}

declare class LowEntryByteArray extends UObject { 
	ByteArray: number[];
	static Load(ResourceName: string): LowEntryByteArray;
	static Find(Outer: UObject, ResourceName: string): LowEntryByteArray;
	static GetDefaultObject(): LowEntryByteArray;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryByteArray;
	static C(Other: UObject | any): LowEntryByteArray;
}

declare class LowEntryByteDataReader extends UObject { 
	Bytes: number[];
	Position: number;
	static Load(ResourceName: string): LowEntryByteDataReader;
	static Find(Outer: UObject, ResourceName: string): LowEntryByteDataReader;
	static GetDefaultObject(): LowEntryByteDataReader;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryByteDataReader;
	SetPosition(Position_: number): void;
	Reset(): void;
	Remaining(): number;
	GetStringUtf8Array(): string[];
	GetStringUtf8(): string;
	GetPositiveInteger3Array(): number[];
	GetPositiveInteger3(): number;
	GetPositiveInteger2Array(): number[];
	GetPositiveInteger2(): number;
	GetPositiveInteger1Array(): number[];
	GetPositiveInteger1(): number;
	GetPosition(): number;
	GetLongBytesArray(): LowEntryLong[];
	GetLongBytes(): LowEntryLong;
	GetIntegerArray(): number[];
	GetInteger(): number;
	GetFloatArray(): number[];
	GetFloat(): number;
	GetDoubleBytesArray(): LowEntryDouble[];
	GetDoubleBytes(): LowEntryDouble;
	GetClone(): LowEntryByteDataReader;
	GetByteArray(): number[];
	GetByte(): number;
	GetBooleanArray(): boolean[];
	GetBoolean(): boolean;
	Empty(): void;
	static C(Other: UObject | any): LowEntryByteDataReader;
}

declare class LowEntryByteDataWriter extends UObject { 
	Bytes: number[];
	static Load(ResourceName: string): LowEntryByteDataWriter;
	static Find(Outer: UObject, ResourceName: string): LowEntryByteDataWriter;
	static GetDefaultObject(): LowEntryByteDataWriter;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryByteDataWriter;
	AddStringUtf8Array(Value: string[]): void;
	AddStringUtf8(Value: string): void;
	AddPositiveInteger3Array(Value: number[]): void;
	AddPositiveInteger3(Value: number): void;
	AddPositiveInteger2Array(Value: number[]): void;
	AddPositiveInteger2(Value: number): void;
	AddPositiveInteger1Array(Value: number[]): void;
	AddPositiveInteger1(Value: number): void;
	AddLongBytesArray(Value: LowEntryLong[]): void;
	AddLongBytes(Value: LowEntryLong): void;
	AddIntegerArray(Value: number[]): void;
	AddInteger(Value: number): void;
	AddFloatArray(Value: number[]): void;
	AddFloat(Value: number): void;
	AddDoubleBytesArray(Value: LowEntryDouble[]): void;
	AddDoubleBytes(Value: LowEntryDouble): void;
	AddByteArray(Value: number[]): void;
	AddByte(Value: number): void;
	AddBooleanArray(Value: boolean[]): void;
	AddBoolean(Value: boolean): void;
	static C(Other: UObject | any): LowEntryByteDataWriter;
	ByteDataWriter_GetBytes(): number[];
	static ByteDataWriter_GetBytes(ByteDataWriter: LowEntryByteDataWriter): number[];
}

declare type ELowEntrySplitScreenTypeTwoPlayers = 'Horizontal' | 'Vertical' | 'ELowEntrySplitScreenTypeTwoPlayers_MAX';
declare var ELowEntrySplitScreenTypeTwoPlayers : { Horizontal:'Horizontal',Vertical:'Vertical',ELowEntrySplitScreenTypeTwoPlayers_MAX:'ELowEntrySplitScreenTypeTwoPlayers_MAX', };
declare type ELowEntrySplitScreenTypeThreePlayers = 'FavorTop' | 'FavorBottom' | 'ELowEntrySplitScreenTypeThreePlayers_MAX';
declare var ELowEntrySplitScreenTypeThreePlayers : { FavorTop:'FavorTop',FavorBottom:'FavorBottom',ELowEntrySplitScreenTypeThreePlayers_MAX:'ELowEntrySplitScreenTypeThreePlayers_MAX', };
declare class LowEntryRegexCaptureGroup { 
	CaptureGroupNumber: number;
	BeginIndex: number;
	EndIndex: number;
	Match: string;
	clone() : LowEntryRegexCaptureGroup;
	static C(Other: UObject | any): LowEntryRegexCaptureGroup;
}

declare class LowEntryRegexMatch { 
	MatchNumber: number;
	BeginIndex: number;
	EndIndex: number;
	Match: string;
	CaptureGroups: LowEntryRegexCaptureGroup[];
	clone() : LowEntryRegexMatch;
	static C(Other: UObject | any): LowEntryRegexMatch;
}

declare class LowEntryParsedHashcash extends UObject { 
	Valid: boolean;
	Resource: string;
	Date: DateTime;
	Bits: number;
	static Load(ResourceName: string): LowEntryParsedHashcash;
	static Find(Outer: UObject, ResourceName: string): LowEntryParsedHashcash;
	static GetDefaultObject(): LowEntryParsedHashcash;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryParsedHashcash;
	ToString(): string;
	GetResource(): string;
	GetDate(): DateTime;
	GetBits(): number;
	static C(Other: UObject | any): LowEntryParsedHashcash;
	ParsedHashcashIsValid(): boolean;
	static ParsedHashcashIsValid(Target: LowEntryParsedHashcash): boolean;
}

declare class LowEntryLatentActionString extends UObject { 
	Finished: boolean;
	Result: string;
	KeepAliveCount: number;
	static Load(ResourceName: string): LowEntryLatentActionString;
	static Find(Outer: UObject, ResourceName: string): LowEntryLatentActionString;
	static GetDefaultObject(): LowEntryLatentActionString;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryLatentActionString;
	WaitTillDone(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Result_?: string): {Result_: string};
	IsDone(): boolean;
	GetResult(Result_?: string): {Result_: string};
	Done(Result_: string): void;
	static C(Other: UObject | any): LowEntryLatentActionString;
	LatentAction_Create_String(): {LatentAction: LowEntryLatentActionString};
	static LatentAction_Create_String(LatentAction?: LowEntryLatentActionString): {LatentAction: LowEntryLatentActionString};
}

declare class LowEntryLatentActionObject extends UObject { 
	Finished: boolean;
	Result: UObject;
	KeepAliveCount: number;
	static Load(ResourceName: string): LowEntryLatentActionObject;
	static Find(Outer: UObject, ResourceName: string): LowEntryLatentActionObject;
	static GetDefaultObject(): LowEntryLatentActionObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryLatentActionObject;
	WaitTillDone(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Result_?: UObject): {Result_: UObject};
	IsDone(): boolean;
	GetResult(Result_?: UObject): {Result_: UObject};
	Done(Result_: UObject): void;
	static C(Other: UObject | any): LowEntryLatentActionObject;
	LatentAction_Create_Object(): {LatentAction: LowEntryLatentActionObject};
	static LatentAction_Create_Object(LatentAction?: LowEntryLatentActionObject): {LatentAction: LowEntryLatentActionObject};
}

declare class LowEntryLatentActionNone extends UObject { 
	Finished: boolean;
	KeepAliveCount: number;
	static Load(ResourceName: string): LowEntryLatentActionNone;
	static Find(Outer: UObject, ResourceName: string): LowEntryLatentActionNone;
	static GetDefaultObject(): LowEntryLatentActionNone;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryLatentActionNone;
	WaitTillDone(WorldContextObject: UObject,LatentInfo: LatentActionInfo): void;
	IsDone(): boolean;
	Done(): void;
	static C(Other: UObject | any): LowEntryLatentActionNone;
	LatentAction_Create_None(): {LatentAction: LowEntryLatentActionNone};
	static LatentAction_Create_None(LatentAction?: LowEntryLatentActionNone): {LatentAction: LowEntryLatentActionNone};
}

declare class LowEntryLatentActionInteger extends UObject { 
	Finished: boolean;
	Result: number;
	KeepAliveCount: number;
	static Load(ResourceName: string): LowEntryLatentActionInteger;
	static Find(Outer: UObject, ResourceName: string): LowEntryLatentActionInteger;
	static GetDefaultObject(): LowEntryLatentActionInteger;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryLatentActionInteger;
	WaitTillDone(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Result_?: number): {Result_: number};
	IsDone(): boolean;
	GetResult(Result_?: number): {Result_: number};
	Done(Result_: number): void;
	static C(Other: UObject | any): LowEntryLatentActionInteger;
	LatentAction_Create_Integer(): {LatentAction: LowEntryLatentActionInteger};
	static LatentAction_Create_Integer(LatentAction?: LowEntryLatentActionInteger): {LatentAction: LowEntryLatentActionInteger};
}

declare class LowEntryLatentActionFloat extends UObject { 
	Finished: boolean;
	Result: number;
	KeepAliveCount: number;
	static Load(ResourceName: string): LowEntryLatentActionFloat;
	static Find(Outer: UObject, ResourceName: string): LowEntryLatentActionFloat;
	static GetDefaultObject(): LowEntryLatentActionFloat;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryLatentActionFloat;
	WaitTillDone(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Result_?: number): {Result_: number};
	IsDone(): boolean;
	GetResult(Result_?: number): {Result_: number};
	Done(Result_: number): void;
	static C(Other: UObject | any): LowEntryLatentActionFloat;
	LatentAction_Create_Float(): {LatentAction: LowEntryLatentActionFloat};
	static LatentAction_Create_Float(LatentAction?: LowEntryLatentActionFloat): {LatentAction: LowEntryLatentActionFloat};
}

declare class LowEntryLatentActionBoolean extends UObject { 
	Finished: boolean;
	Result: boolean;
	KeepAliveCount: number;
	static Load(ResourceName: string): LowEntryLatentActionBoolean;
	static Find(Outer: UObject, ResourceName: string): LowEntryLatentActionBoolean;
	static GetDefaultObject(): LowEntryLatentActionBoolean;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryLatentActionBoolean;
	WaitTillDone(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Result_?: boolean): {Result_: boolean};
	IsDone(): boolean;
	GetResult(Result_?: boolean): {Result_: boolean};
	Done(Result_: boolean): void;
	static C(Other: UObject | any): LowEntryLatentActionBoolean;
	LatentAction_Create_Boolean(): {LatentAction: LowEntryLatentActionBoolean};
	static LatentAction_Create_Boolean(LatentAction?: LowEntryLatentActionBoolean): {LatentAction: LowEntryLatentActionBoolean};
}

declare type ELowEntryHmacAlgorithm = 'MD5' | 'SHA1' | 'SHA256' | 'SHA512' | 'ELowEntryHmacAlgorithm_MAX';
declare var ELowEntryHmacAlgorithm : { MD5:'MD5',SHA1:'SHA1',SHA256:'SHA256',SHA512:'SHA512',ELowEntryHmacAlgorithm_MAX:'ELowEntryHmacAlgorithm_MAX', };
declare type ELowEntrySplitScreenType = 'None' | 'TwoPlayer_Horizontal' | 'TwoPlayer_Vertical' | 'ThreePlayer_FavorTop' | 'ThreePlayer_FavorBottom' | 'ThreePlayer_Vertical' | 'FourPlayer_Grid' | 'FourPlayer_Vertical' | 'ELowEntrySplitScreenType_MAX';
declare var ELowEntrySplitScreenType : { None:'None',TwoPlayer_Horizontal:'TwoPlayer_Horizontal',TwoPlayer_Vertical:'TwoPlayer_Vertical',ThreePlayer_FavorTop:'ThreePlayer_FavorTop',ThreePlayer_FavorBottom:'ThreePlayer_FavorBottom',ThreePlayer_Vertical:'ThreePlayer_Vertical',FourPlayer_Grid:'FourPlayer_Grid',FourPlayer_Vertical:'FourPlayer_Vertical',ELowEntrySplitScreenType_MAX:'ELowEntrySplitScreenType_MAX', };
declare type ELowEntryBatteryState = 'Charging' | 'Discharging' | 'Full' | 'NotCharging' | 'Unknown' | 'ELowEntryBatteryState_MAX';
declare var ELowEntryBatteryState : { Charging:'Charging',Discharging:'Discharging',Full:'Full',NotCharging:'NotCharging',Unknown:'Unknown',ELowEntryBatteryState_MAX:'ELowEntryBatteryState_MAX', };
declare type ELowEntryExtendedStandardLibrary0to9 = '_0_' | '_1_' | '_2_' | '_3_' | '_4_' | '_5_' | '_6_' | '_7_' | '_8_' | '_9_' | '_MAX';
declare var ELowEntryExtendedStandardLibrary0to9 : { _0_:'_0_',_1_:'_1_',_2_:'_2_',_3_:'_3_',_4_:'_4_',_5_:'_5_',_6_:'_6_',_7_:'_7_',_8_:'_8_',_9_:'_9_',_MAX:'_MAX', };
declare type ELowEntryExtendedStandardLibraryTrueOrFalse = '_True_' | '_False_' | '_MAX';
declare var ELowEntryExtendedStandardLibraryTrueOrFalse : { _True_:'_True_',_False_:'_False_',_MAX:'_MAX', };
declare type ELowEntryExtendedStandardLibrary1to10other = '_1_' | '_2_' | '_3_' | '_4_' | '_5_' | '_6_' | '_7_' | '_8_' | '_9_' | '_10_' | 'Other' | 'ELowEntryExtendedStandardLibrary1to10other_MAX';
declare var ELowEntryExtendedStandardLibrary1to10other : { _1_:'_1_',_2_:'_2_',_3_:'_3_',_4_:'_4_',_5_:'_5_',_6_:'_6_',_7_:'_7_',_8_:'_8_',_9_:'_9_',_10_:'_10_',Other:'Other',ELowEntryExtendedStandardLibrary1to10other_MAX:'ELowEntryExtendedStandardLibrary1to10other_MAX', };
declare class LowEntryExtendedStandardLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): LowEntryExtendedStandardLibrary;
	static Find(Outer: UObject, ResourceName: string): LowEntryExtendedStandardLibrary;
	static GetDefaultObject(): LowEntryExtendedStandardLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LowEntryExtendedStandardLibrary;
	static XboxOnePlatform(): boolean;
	static WithEditor(): boolean;
	static WindowsRtPlatform(): boolean;
	static WindowsRtArmPlatform(): boolean;
	static WindowsPlatform(): boolean;
	static WindowsNewlineCharacter(): string;
	static Windows64Platform(): boolean;
	static Windows32Platform(): boolean;
	static TickSeconds(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Ticks: number,SecondsInterval: number,Tick?: number): {Tick: number};
	static TickFrames(WorldContextObject: UObject,LatentInfo: LatentActionInfo,Ticks: number,FramesInterval: number,Tick?: number): {Tick: number};
	static TextureUpdateResource(Texture: Texture): void;
	static TextureRenderTarget2DToPixels(TextureRenderTarget2D: TextureRenderTarget2D,Width?: number,Height?: number,Pixels?: Color[]): {Width: number, Height: number, Pixels: Color[]};
	static TextureRenderTarget2DToBytes(TextureRenderTarget2D: TextureRenderTarget2D,ImageFormat: ELowEntryImageFormat,ByteArray?: number[],CompressionQuality?: number): {ByteArray: number[]};
	static Texture2DToPixels(Texture2D: Texture2D,Width?: number,Height?: number,Pixels?: Color[]): {Width: number, Height: number, Pixels: Color[]};
	static Texture2DToBytes(Texture2D: Texture2D,ImageFormat: ELowEntryImageFormat,ByteArray?: number[],CompressionQuality?: number): {ByteArray: number[]};
	static TestBuild(): boolean;
	static TabCharacter(): string;
	static SwitchPlatform(): boolean;
	static StringToBytesUtf8(string: string): number[];
	static SplitBytes(ByteArray: number[],LengthA: number,A?: number[],B?: number[]): {A: number[], B: number[]};
	static SoundClass_SetVolume(SoundClass: SoundClass,Volume: number): void;
	static SoundClass_SetPitch(SoundClass: SoundClass,Pitch: number): void;
	static SoundClass_GetVolume(SoundClass: SoundClass): number;
	static SoundClass_GetPitch(SoundClass: SoundClass): number;
	static SortTimespanArrayDirectly(TimespanArray?: Timespan[],Reversed?: boolean): {TimespanArray: Timespan[]};
	static SortTimespanArray(TimespanArray: Timespan[],Reversed: boolean): Timespan[];
	static SortStringArrayDirectly(StringArray?: string[],Reversed?: boolean): {StringArray: string[]};
	static SortStringArray(StringArray: string[],Reversed: boolean): string[];
	static SortIntegerArrayDirectly(IntegerArray?: number[],Reversed?: boolean): {IntegerArray: number[]};
	static SortIntegerArray(IntegerArray: number[],Reversed: boolean): number[];
	static SortFloatArrayDirectly(FloatArray?: number[],Reversed?: boolean): {FloatArray: number[]};
	static SortFloatArray(FloatArray: number[],Reversed: boolean): number[];
	static SortDateTimeArrayDirectly(DateTimeArray?: DateTime[],Reversed?: boolean): {DateTimeArray: DateTime[]};
	static SortDateTimeArray(DateTimeArray: DateTime[],Reversed: boolean): DateTime[];
	static SortByteArrayDirectly(ByteArray?: number[],Reversed?: boolean): {ByteArray: number[]};
	static SortByteArray(ByteArray: number[],Reversed: boolean): number[];
	static SimpleKismetSystemLibraryPrintString(inString: string): void;
	static ShippingBuild(): boolean;
	static Sha512(ByteArray: number[],index: number,Length: number): number[];
	static Sha256(ByteArray: number[],index: number,Length: number): number[];
	static Sha1(ByteArray: number[],index: number,Length: number): number[];
	static SetWorldRenderingEnabled(Enabled: boolean): void;
	static SetWindowSize(Width: number,Height: number): void;
	static SetWindowPosition(X: number,Y: number): void;
	static SetWindowPositiomInPercentagesCentered(X: number,Y: number): void;
	static SetWindowMode(Fullscreen: boolean,IsFullscreenWindowed: boolean): void;
	static SetSplitScreenType_TwoPlayers(Type: ELowEntrySplitScreenTypeTwoPlayers): void;
	static SetSplitScreenType_ThreePlayers(Type: ELowEntrySplitScreenTypeThreePlayers): void;
	static SetSplitScreenEnabled(Enabled: boolean): void;
	static SetMousePositionInPercentages(X: number,Y: number): void;
	static SetMousePosition(X: number,Y: number): void;
	static SetMouseLockedToViewport(Locked: boolean): void;
	static SetGenericTeamId(Target: Actor,TeamID: number): void;
	static ServerChangeMap(WorldContextObject: UObject,Map: string,Args: string,SpecificPlayer: PlayerController): void;
	static SceneCaptureComponent2DToPixels(SceneCaptureComponent2D: SceneCaptureComponent2D,Width?: number,Height?: number,Pixels?: Color[]): {Width: number, Height: number, Pixels: Color[]};
	static SceneCaptureComponent2DToBytes(SceneCaptureComponent2D: SceneCaptureComponent2D,ImageFormat: ELowEntryImageFormat,ByteArray?: number[],CompressionQuality?: number): {ByteArray: number[]};
	static SceneCaptureComponent2D_SetFov(SceneCaptureComponent2D: SceneCaptureComponent2D,FOV: number): void;
	static SceneCaptureComponent2D_GetFov(SceneCaptureComponent2D: SceneCaptureComponent2D,FOV?: number): {FOV: number};
	static SceneCapture2DToPixels(SceneCapture2D: SceneCapture2D,Width?: number,Height?: number,Pixels?: Color[]): {Width: number, Height: number, Pixels: Color[]};
	static SceneCapture2DToBytes(SceneCapture2D: SceneCapture2D,ImageFormat: ELowEntryImageFormat,ByteArray?: number[],CompressionQuality?: number): {ByteArray: number[]};
	static SceneCapture2D_SetFov(SceneCapture2D: SceneCapture2D,FOV: number): void;
	static SceneCapture2D_GetFov(SceneCapture2D: SceneCapture2D,FOV?: number): {FOV: number};
	static RoundDecimals(Number: number,Decimals: number): number;
	static RetriggerableRandomDelayFrames(WorldContextObject: UObject,MinFrames: number,MaxFrames: number,LatentInfo: LatentActionInfo): void;
	static RetriggerableRandomDelay(WorldContextObject: UObject,MinDuration: number,MaxDuration: number,LatentInfo: LatentActionInfo): void;
	static RetriggerableDelayFrames(WorldContextObject: UObject,Frames: number,LatentInfo: LatentActionInfo): void;
	static ReplaceCharactersExcept(string: string,ReplacementCharacter: string,KeepLowercaseAZ: boolean,KeepUppercaseAZ: boolean,KeepNumbers: boolean,OtherCharactersToKeep: string): string;
	static RemoveCharactersExcept(string: string,KeepLowercaseAZ: boolean,KeepUppercaseAZ: boolean,KeepNumbers: boolean,OtherCharactersToKeep: string): string;
	static RegexReplace(string: string,Pattern: string,Replacement: string): string;
	static RegexMatch(string: string,Pattern: string): boolean;
	static RegexGetMatches(string: string,Pattern: string): LowEntryRegexMatch[];
	static RegexCount(string: string,Pattern: string): number;
	static RandomDelayFrames(WorldContextObject: UObject,MinFrames: number,MaxFrames: number,LatentInfo: LatentActionInfo): void;
	static RandomDelay(WorldContextObject: UObject,MinDuration: number,MaxDuration: number,LatentInfo: LatentActionInfo): void;
	static QueueExecutions(WorldContextObject: UObject,Queue?: LowEntryExecutionQueue,LatentInfo?: LatentActionInfo): {Queue: LowEntryExecutionQueue};
	static Ps4Platform(): boolean;
	static PlayerControllerGetLocalPlayer(PlayerController: PlayerController,Success?: boolean,LocalPlayer?: LocalPlayer): {Success: boolean, LocalPlayer: LocalPlayer};
	static PixelsToTexture2D(Width: number,Height: number,Pixels: Color[]): Texture2D;
	static PixelsToExistingTexture2D(ReusedGivenTexture2D?: boolean,Texture2D?: Texture2D,Width?: number,Height?: number,Pixels?: Color[]): {ReusedGivenTexture2D: boolean, $: Texture2D};
	static PixelsToBytes(Width: number,Height: number,Pixels: Color[],ImageFormat: ELowEntryImageFormat,ByteArray?: number[],CompressionQuality?: number): {ByteArray: number[]};
	static Pearson(ByteArray: number[],HashLength: number,index: number,Length: number): number[];
	static ParseStringIntoLongBytes(string: string): LowEntryLong;
	static ParseStringIntoDoubleBytes(string: string): LowEntryDouble;
	static ParsedHashcashIsValid(Target: LowEntryParsedHashcash): boolean;
	static NextQueueExecution(Queue: LowEntryExecutionQueue): void;
	static NewlineCharacter(): string;
	static MinString(A: string,B: string): string;
	static MinOfTimespanArray(TimespanArray: Timespan[],IndexOfMinValue?: number,MinValue?: Timespan): {IndexOfMinValue: number, MinValue: Timespan};
	static MinOfStringArray(StringArray: string[],IndexOfMinValue?: number,MinValue?: string): {IndexOfMinValue: number, MinValue: string};
	static MinOfDateTimeArray(DateTimeArray: DateTime[],IndexOfMinValue?: number,MinValue?: DateTime): {IndexOfMinValue: number, MinValue: DateTime};
	static MergeEncapsulatedByteArrays(ByteArrays: LowEntryByteArray[]): number[];
	static MergeBytes(A: number[],B: number[]): number[];
	static Md5(ByteArray: number[],index: number,Length: number): number[];
	static MaxString(A: string,B: string): string;
	static MaxOfTimespanArray(TimespanArray: Timespan[],IndexOfMaxValue?: number,MaxValue?: Timespan): {IndexOfMaxValue: number, MaxValue: Timespan};
	static MaxOfStringArray(StringArray: string[],IndexOfMaxValue?: number,MaxValue?: string): {IndexOfMaxValue: number, MaxValue: string};
	static MaxOfDateTimeArray(DateTimeArray: DateTime[],IndexOfMaxValue?: number,MaxValue?: DateTime): {IndexOfMaxValue: number, MaxValue: DateTime};
	static MacPlatform(): boolean;
	static Long_CreateZero(): LowEntryLong;
	static Long_Create(ByteArray: number[],index: number,Length: number): LowEntryLong;
	static LoadVideo(MediaSoundComponent: MediaSoundComponent,URL: string,Success?: boolean,MediaPlayer?: MediaPlayer,MediaTexture?: MediaTexture,PlayOnOpen?: boolean,loop?: boolean): {Success: boolean, MediaPlayer: MediaPlayer, MediaTexture: MediaTexture};
	static LinuxPlatform(): boolean;
	static LessStringString(A: string,B: string): boolean;
	static LessIntegerFloat(A: number,B: number): boolean;
	static LessIntegerByte(A: number,B: number): boolean;
	static LessFloatInteger(A: number,B: number): boolean;
	static LessFloatByte(A: number,B: number): boolean;
	static LessEqualStringString(A: string,B: string): boolean;
	static LessEqualIntegerFloat(A: number,B: number): boolean;
	static LessEqualIntegerByte(A: number,B: number): boolean;
	static LessEqualFloatInteger(A: number,B: number): boolean;
	static LessEqualFloatByte(A: number,B: number): boolean;
	static LessEqualByteInteger(A: number,B: number): boolean;
	static LessEqualByteFloat(A: number,B: number): boolean;
	static LessByteInteger(A: number,B: number): boolean;
	static LessByteFloat(A: number,B: number): boolean;
	static LatentAction_Create_String(LatentAction?: LowEntryLatentActionString): {LatentAction: LowEntryLatentActionString};
	static LatentAction_Create_Object(LatentAction?: LowEntryLatentActionObject): {LatentAction: LowEntryLatentActionObject};
	static LatentAction_Create_None(LatentAction?: LowEntryLatentActionNone): {LatentAction: LowEntryLatentActionNone};
	static LatentAction_Create_Integer(LatentAction?: LowEntryLatentActionInteger): {LatentAction: LowEntryLatentActionInteger};
	static LatentAction_Create_Float(LatentAction?: LowEntryLatentActionFloat): {LatentAction: LowEntryLatentActionFloat};
	static LatentAction_Create_Boolean(LatentAction?: LowEntryLatentActionBoolean): {LatentAction: LowEntryLatentActionBoolean};
	static JoinGame(WorldContextObject: UObject,ServerAddress: string,Args: string,SpecificPlayer: PlayerController): void;
	static IsWorldRenderingEnabled(Success?: boolean,Enabled?: boolean): {Success: boolean, Enabled: boolean};
	static IsBitSet(B: number,Bit: number): boolean;
	static IsAndroidDaydreamApplication(): boolean;
	static IosPlatform(): boolean;
	static IntegerToBytes(Value: number): number[];
	static Html5Platform(): boolean;
	static HostGame(WorldContextObject: UObject,Map: string,Args: string,SpecificPlayer: PlayerController): void;
	static HMAC(ByteArray: number[],Key: number[],Algorithm: ELowEntryHmacAlgorithm,index: number,Length: number): number[];
	static HexToBytes(Hex: string): number[];
	static HashcashParseArray(Hashes: string[]): LowEntryParsedHashcash[];
	static HashcashParse(Hash: string): LowEntryParsedHashcash;
	static HashcashCustomCreationDate(Resource: string,UtcDate: DateTime,Bits: number): string;
	static HashcashArrayCustomCreationDate(Resources: string[],UtcDate: DateTime,Bits: number): string[];
	static HashcashArray(Resources: string[],Bits: number): string[];
	static Hashcash(Resource: string,Bits: number): string;
	static GreaterStringString(A: string,B: string): boolean;
	static GreaterIntegerFloat(A: number,B: number): boolean;
	static GreaterIntegerByte(A: number,B: number): boolean;
	static GreaterFloatInteger(A: number,B: number): boolean;
	static GreaterFloatByte(A: number,B: number): boolean;
	static GreaterEqualStringString(A: string,B: string): boolean;
	static GreaterEqualIntegerFloat(A: number,B: number): boolean;
	static GreaterEqualIntegerByte(A: number,B: number): boolean;
	static GreaterEqualFloatInteger(A: number,B: number): boolean;
	static GreaterEqualFloatByte(A: number,B: number): boolean;
	static GreaterEqualByteInteger(A: number,B: number): boolean;
	static GreaterEqualByteFloat(A: number,B: number): boolean;
	static GreaterByteInteger(A: number,B: number): boolean;
	static GreaterByteFloat(A: number,B: number): boolean;
	static GetWindowSize(Success?: boolean,Width?: number,Height?: number): {Success: boolean, Width: number, Height: number};
	static GetWindowPosition(Success?: boolean,X?: number,Y?: number): {Success: boolean, X: number, Y: number};
	static GetWindowPositiomInPercentagesCentered(Success?: boolean,X?: number,Y?: number): {Success: boolean, X: number, Y: number};
	static GetWindowMode(Success?: boolean,Fullscreen?: boolean,IsFullscreenWindowed?: boolean): {Success: boolean, Fullscreen: boolean, IsFullscreenWindowed: boolean};
	static GetWindowBounds(Success?: boolean,X?: number,Y?: number,Width?: number,Height?: number): {Success: boolean, X: number, Y: number, Width: number, Height: number};
	static GetUserFocusedWidgetType(UserIndex: number): string;
	static GetSplitScreenType(Type?: ELowEntrySplitScreenType): {Type: ELowEntrySplitScreenType};
	static GetPrimaryMonitorWorkArea(X?: number,Y?: number,Width?: number,Height?: number): {X: number, Y: number, Width: number, Height: number};
	static GetPrimaryMonitorResolution(Width?: number,Height?: number): {Width: number, Height: number};
	static GetMousePositionInPercentages(Success?: boolean,X?: number,Y?: number): {Success: boolean, X: number, Y: number};
	static GetMousePosition(Success?: boolean,X?: number,Y?: number): {Success: boolean, X: number, Y: number};
	static GetMaximumVolume(Volume?: number,Success?: boolean): {Volume: number, Success: boolean};
	static GetLocalToAbsoluteScale(Geometry: Geometry): Vector2D;
	static GetKeyboardFocusedWidgetType(): string;
	static GetGenericTeamId(Target: Actor,TeamID?: number): {TeamID: number};
	static GetCurrentVolumePercentage(Percentage?: number,Success?: boolean): {Percentage: number, Success: boolean};
	static GetCurrentVolume(Volume?: number,Success?: boolean): {Volume: number, Success: boolean};
	static GetClassWithName(ClassName: string,Class_?: UnrealEngineClass,Success?: boolean): {Class_: UnrealEngineClass, Success: boolean};
	static GetByteWithBitSet(byte: number,Bit: number,Value: boolean): number;
	static GetBatteryTemperature(Celsius?: number,Success?: boolean): {Celsius: number, Success: boolean};
	static GetBatteryState(State?: ELowEntryBatteryState,Success?: boolean): {State: ELowEntryBatteryState, Success: boolean};
	static GetBatteryCharge(Percentage?: number,Success?: boolean): {Percentage: number, Success: boolean};
	static GetAndroidVolume(Volume?: number): {Volume: number};
	static GetAndroidVersion(): string;
	static GetAndroidOsLanguage(): string;
	static GetAndroidNumberOfCores(): number;
	static GetAndroidGpuFamily(): string;
	static GetAndroidGlVersion(): string;
	static GetAndroidDeviceModel(): string;
	static GetAndroidDeviceMake(): string;
	static GetAndroidDefaultLocale(): string;
	static GetAndroidBuildVersion(): number;
	static GetAbsoluteToLocalScale(Geometry: Geometry): Vector2D;
	static GetAbsoluteSize(Geometry: Geometry): Vector2D;
	static GenerateRandomBytesRandomLength(MinLength: number,MaxLength: number,ByteArray?: number[]): {ByteArray: number[]};
	static GenerateRandomBytes(Length: number,ByteArray?: number[]): {ByteArray: number[]};
	static FloorDecimals(Number: number,Decimals: number): number;
	static FloatToBytes(Value: number): number[];
	static ExecToInteger(Branch: ELowEntryExtendedStandardLibrary0to9,Value?: number): {Value: number};
	static ExecToByte(Branch: ELowEntryExtendedStandardLibrary0to9,Value?: number): {Value: number};
	static ExecToBoolean(Branch: ELowEntryExtendedStandardLibraryTrueOrFalse,Value?: boolean): {Value: boolean};
	static EncapsulateByteArray(ByteArray: number[]): LowEntryByteArray;
	static Double_CreateZero(): LowEntryDouble;
	static Double_Create(ByteArray: number[],index: number,Length: number): LowEntryDouble;
	static Divide_Vector2dVector2d(A: Vector2D,B: Vector2D): Vector2D;
	static DevelopmentBuild(): boolean;
	static DesktopPlatform(): boolean;
	static DelayFrames(WorldContextObject: UObject,Frames: number,LatentInfo: LatentActionInfo): void;
	static DebugBuild(): boolean;
	static DateTime_ToUnixTimestamp(DateTime: DateTime,Timestamp?: LowEntryLong): {Timestamp: LowEntryLong};
	static DateTime_ToString(DateTime: DateTime,string?: string,Format?: string): {string: string};
	static DateTime_ToIso8601(DateTime: DateTime,string?: string): {string: string};
	static DateTime_FromUnixTimestamp(Timestamp: LowEntryLong,DateTime?: DateTime): {DateTime: DateTime};
	static CreateString(Length: number,Filler: string): string;
	static CreateObject(Class: UnrealEngineClass,UObject?: UObject): {Object: UObject};
	static Crash(): void;
	static ConvertUtcDateToLocalDate(Utc: DateTime,Local?: DateTime): {Local: DateTime};
	static ConvertLocalDateToUtcDate(Local: DateTime,Utc?: DateTime): {Utc: DateTime};
	static ClearUserFocus(UserIndex: number): void;
	static ClearKeyboardFocus(): void;
	static ClearAllUserFocus(): void;
	static ChangeMap(WorldContextObject: UObject,Map: string,Args: string,SpecificPlayer: PlayerController): void;
	static CeilDecimals(Number: number,Decimals: number): number;
	static CaseSwitchObject(OnlyCheckFirstX: number,Value: UObject,_1__: UObject,_2__: UObject,_3__: UObject,_4__: UObject,_5__: UObject,_6__: UObject,_7__: UObject,_8__: UObject,_9__: UObject,_10__: UObject,Branch?: ELowEntryExtendedStandardLibrary1to10other): {Branch: ELowEntryExtendedStandardLibrary1to10other};
	static CaseSwitchInteger(OnlyCheckFirstX: number,Value: number,_1__: number,_2__: number,_3__: number,_4__: number,_5__: number,_6__: number,_7__: number,_8__: number,_9__: number,_10__: number,Branch?: ELowEntryExtendedStandardLibrary1to10other): {Branch: ELowEntryExtendedStandardLibrary1to10other};
	static CaseSwitchByte(OnlyCheckFirstX: number,Value: number,_1__: number,_2__: number,_3__: number,_4__: number,_5__: number,_6__: number,_7__: number,_8__: number,_9__: number,_10__: number,Branch?: ELowEntryExtendedStandardLibrary1to10other): {Branch: ELowEntryExtendedStandardLibrary1to10other};
	static CarriageReturnCharacter(): string;
	static ByteToBytes(Value: number): number[];
	static ByteToBoolean(byte: number): boolean;
	static ByteToBits(byte: number,Bit1?: boolean,Bit2?: boolean,Bit3?: boolean,Bit4?: boolean,Bit5?: boolean,Bit6?: boolean,Bit7?: boolean,Bit8?: boolean): {Bit1: boolean, Bit2: boolean, Bit3: boolean, Bit4: boolean, Bit5: boolean, Bit6: boolean, Bit7: boolean, Bit8: boolean};
	static BytesToStringUtf8(ByteArray: number[],index: number,Length: number): string;
	static BytesToPixels(ByteArray: number[],ImageFormat: ELowEntryImageFormat,Width?: number,Height?: number,Pixels?: Color[],index?: number,Length?: number): {Width: number, Height: number, Pixels: Color[]};
	static BytesToLongBytes(ByteArray: number[],index: number,Length: number): LowEntryLong;
	static BytesToInteger(ByteArray: number[],index: number,Length: number): number;
	static BytesToImage(ByteArray: number[],ImageFormat: ELowEntryImageFormat,index: number,Length: number): Texture2D;
	static BytesToHex(ByteArray: number[],AddSpaces: boolean,index: number,Length: number): string;
	static BytesToFloat(ByteArray: number[],index: number,Length: number): number;
	static BytesToExistingImage(ReusedGivenTexture2D?: boolean,Texture2D?: Texture2D,ByteArray?: number[],ImageFormat?: ELowEntryImageFormat,index?: number,Length?: number): {ReusedGivenTexture2D: boolean, $: Texture2D};
	static BytesToDoubleBytes(ByteArray: number[],index: number,Length: number): LowEntryDouble;
	static BytesToByte(ByteArray: number[],index: number,Length: number): number;
	static BytesToBoolean(ByteArray: number[],index: number,Length: number): boolean;
	static BytesToBitString(ByteArray: number[],AddSpaces: boolean,index: number,Length: number): string;
	static BytesToBinary(ByteArray: number[],AddSpaces: boolean,index: number,Length: number): string;
	static BytesToBase64Url(ByteArray: number[],index: number,Length: number): string;
	static BytesToBase64(ByteArray: number[],index: number,Length: number): string;
	static BytesSubArray(ByteArray: number[],index: number,Length: number): number[];
	static ByteDataWriter_GetBytes(ByteDataWriter: LowEntryByteDataWriter): number[];
	static ByteDataWriter_CreateFromEntryArrayPure(Array: LowEntryByteDataEntry[]): LowEntryByteDataWriter;
	static ByteDataWriter_CreateFromEntryArray(Array: LowEntryByteDataEntry[]): LowEntryByteDataWriter;
	static ByteDataReader_Create(Bytes: number[],index: number,Length: number): LowEntryByteDataReader;
	static ByteDataEntry_CreateFromStringUtf8Array(Value: string[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromStringUtf8(Value: string): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromPositiveInteger3Array(Value: number[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromPositiveInteger3(Value: number): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromPositiveInteger2Array(Value: number[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromPositiveInteger2(Value: number): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromPositiveInteger1Array(Value: number[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromPositiveInteger1(Value: number): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromLongBytesArray(Value: LowEntryLong[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromLongBytes(Value: LowEntryLong): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromIntegerArray(Value: number[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromInteger(Value: number): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromFloatArray(Value: number[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromFloat(Value: number): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromDoubleBytesArray(Value: LowEntryDouble[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromDoubleBytes(Value: LowEntryDouble): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromByteArray(Value: number[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromByte(Value: number): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromBooleanArray(Value: boolean[]): LowEntryByteDataEntry;
	static ByteDataEntry_CreateFromBoolean(Value: boolean): LowEntryByteDataEntry;
	static BooleanToBytes(Value: boolean): number[];
	static BooleanToByte(Value: boolean): number;
	static BitStringToBytes(Bits: string): number[];
	static BitsToByte(Bit1: boolean,Bit2: boolean,Bit3: boolean,Bit4: boolean,Bit5: boolean,Bit6: boolean,Bit7: boolean,Bit8: boolean,byte?: number): {byte: number};
	static BitDataWriter_GetBytes(BitDataWriter: LowEntryBitDataWriter): number[];
	static BitDataWriter_CreateFromEntryArrayPure(Array: LowEntryBitDataEntry[]): LowEntryBitDataWriter;
	static BitDataWriter_CreateFromEntryArray(Array: LowEntryBitDataEntry[]): LowEntryBitDataWriter;
	static BitDataReader_Create(Bytes: number[],index: number,Length: number): LowEntryBitDataReader;
	static BitDataEntry_CreateFromStringUtf8Array(Value: string[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromStringUtf8(Value: string): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromPositiveInteger3Array(Value: number[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromPositiveInteger3(Value: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromPositiveInteger2Array(Value: number[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromPositiveInteger2(Value: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromPositiveInteger1Array(Value: number[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromPositiveInteger1(Value: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromLongBytesArray(Value: LowEntryLong[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromLongBytes(Value: LowEntryLong): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromIntegerMostSignificantBits(Value: number,BitCount: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromIntegerLeastSignificantBits(Value: number,BitCount: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromIntegerArrayMostSignificantBits(Value: number[],BitCount: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromIntegerArrayLeastSignificantBits(Value: number[],BitCount: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromIntegerArray(Value: number[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromInteger(Value: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromFloatArray(Value: number[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromFloat(Value: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromDoubleBytesArray(Value: LowEntryDouble[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromDoubleBytes(Value: LowEntryDouble): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromByteMostSignificantBits(Value: number,BitCount: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromByteLeastSignificantBits(Value: number,BitCount: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromByteArrayMostSignificantBits(Value: number[],BitCount: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromByteArrayLeastSignificantBits(Value: number[],BitCount: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromByteArray(Value: number[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromByte(Value: number): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromBooleanArray(Value: boolean[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromBoolean(Value: boolean): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromBitArray(Value: boolean[]): LowEntryBitDataEntry;
	static BitDataEntry_CreateFromBit(Value: boolean): LowEntryBitDataEntry;
	static BinaryToBytes(Binary: string): number[];
	static BCrypt(ByteArray: number[],Salt: number[],Strength: number,index: number,Length: number): number[];
	static Base64UrlToBytes(Base64Url: string): number[];
	static Base64UrlToBase64(Base64Url: string): string;
	static Base64ToBytes(Base64: string): number[];
	static Base64ToBase64Url(Base64: string): string;
	static AreBytesEqual(A: number[],B: number[],IndexA: number,LengthA: number,IndexB: number,LengthB: number): boolean;
	static AreAndroidHeadphonesPluggedIn(): boolean;
	static AndroidPlatform(): boolean;
	static C(Other: UObject | any): LowEntryExtendedStandardLibrary;
}

declare class MutexObject extends UObject { 
	static Load(ResourceName: string): MutexObject;
	static Find(Outer: UObject, ResourceName: string): MutexObject;
	static GetDefaultObject(): MutexObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MutexObject;
	Unlock(): void;
	TryLock(): boolean;
	Lock(): void;
	static C(Other: UObject | any): MutexObject;
}

declare type TaskGraphType = 'RHIThread' | 'AudioThread' | 'GameThread' | 'ActualRenderingThread' | 'AnyThread' | 'GameThread_Local' | 'ActualRenderingThread_Local' | 'AnyHiPriThreadNormalTask' | 'AnyHiPriThreadHiPriTask' | 'AnyNormalThreadNormalTask' | 'AnyNormalThreadHiPriTask' | 'AnyBackgroundThreadNormalTask' | 'AnyBackgroundHiPriTask' | 'TaskGraphType_MAX';
declare var TaskGraphType : { RHIThread:'RHIThread',AudioThread:'AudioThread',GameThread:'GameThread',ActualRenderingThread:'ActualRenderingThread',AnyThread:'AnyThread',GameThread_Local:'GameThread_Local',ActualRenderingThread_Local:'ActualRenderingThread_Local',AnyHiPriThreadNormalTask:'AnyHiPriThreadNormalTask',AnyHiPriThreadHiPriTask:'AnyHiPriThreadHiPriTask',AnyNormalThreadNormalTask:'AnyNormalThreadNormalTask',AnyNormalThreadHiPriTask:'AnyNormalThreadHiPriTask',AnyBackgroundThreadNormalTask:'AnyBackgroundThreadNormalTask',AnyBackgroundHiPriTask:'AnyBackgroundHiPriTask',TaskGraphType_MAX:'TaskGraphType_MAX', };
declare class MultiWorker extends ActorComponent { 
	ThreadEngine: MultiTaskEngine;
	static Load(ResourceName: string): MultiWorker;
	static Find(Outer: UObject, ResourceName: string): MultiWorker;
	static GetDefaultObject(): MultiWorker;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MultiWorker;
	Sleep(Seconds: number): void;
	SetTickInEditor(bShouldTickInEditor: boolean): void;
	RunPayload(): boolean;
	ExecutePayloadOnBackgroundThreadPool(): void;
	ExecutePayloadOnBackgroundThread(): void;
	ExecutePayloadInTaskGraph(Type: TaskGraphType,bWaitUntilTaskCompletes: boolean): void;
	static C(Other: UObject | any): MultiWorker;
}

declare class MultiTaskEngine extends ActorComponent { 
	static Load(ResourceName: string): MultiTaskEngine;
	static Find(Outer: UObject, ResourceName: string): MultiTaskEngine;
	static GetDefaultObject(): MultiTaskEngine;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MultiTaskEngine;
	SetTickInEditor(bShouldTickInEditor: boolean): void;
	GetNumberOfCores(): number;
	CreateWorker(Outer: Actor,ThreadClass: UnrealEngineClass): MultiWorker;
	static C(Other: UObject | any): MultiTaskEngine;
}

declare class PlayFabRuntimeSettings extends UObject { 
	ProductionEnvironmentURL: string;
	TitleId: string;
	DeveloperSecretKey: string;
	static Load(ResourceName: string): PlayFabRuntimeSettings;
	static Find(Outer: UObject, ResourceName: string): PlayFabRuntimeSettings;
	static GetDefaultObject(): PlayFabRuntimeSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabRuntimeSettings;
	static C(Other: UObject | any): PlayFabRuntimeSettings;
}

declare class PlayFabError { 
	HasError: boolean;
	ErrorCode: number;
	ErrorName: string;
	ErrorMessage: string;
	ErrorDetails: string;
	clone() : PlayFabError;
	static C(Other: UObject | any): PlayFabError;
}

declare type EPFJson = 'None' | 'Null' | 'String' | 'Number' | 'Boolean' | 'Array' | 'Object' | 'EPFJson_MAX';
declare var EPFJson : { None:'None',Null:'Null',String:'String',Number:'Number',Boolean:'Boolean',Array:'Array',Object:'Object',EPFJson_MAX:'EPFJson_MAX', };
declare class PlayFabJsonValue extends UObject { 
	static Load(ResourceName: string): PlayFabJsonValue;
	static Find(Outer: UObject, ResourceName: string): PlayFabJsonValue;
	static GetDefaultObject(): PlayFabJsonValue;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabJsonValue;
	IsNull(): boolean;
	GetTypeString(): string;
	GetType(): EPFJson;
	static ConstructJsonValueString(WorldContextObject: UObject,StringValue: string): PlayFabJsonValue;
	static ConstructJsonValueObject(WorldContextObject: UObject,JsonObject: PlayFabJsonObject): PlayFabJsonValue;
	static ConstructJsonValueNumber(WorldContextObject: UObject,Number: number): PlayFabJsonValue;
	static ConstructJsonValueBool(WorldContextObject: UObject,InValue: boolean): PlayFabJsonValue;
	static ConstructJsonValueArray(WorldContextObject: UObject,inArray: PlayFabJsonValue[]): PlayFabJsonValue;
	AsString(): string;
	AsObject(): PlayFabJsonObject;
	AsNumber(): number;
	AsBool(): boolean;
	AsArray(): PlayFabJsonValue[];
	static C(Other: UObject | any): PlayFabJsonValue;
}

declare class ServerAddPlayerTagResult { 
	clone() : ServerAddPlayerTagResult;
	static C(Other: UObject | any): ServerAddPlayerTagResult;
}

declare class ServerAddSharedGroupMembersResult { 
	clone() : ServerAddSharedGroupMembersResult;
	static C(Other: UObject | any): ServerAddSharedGroupMembersResult;
}

declare class ServerAuthenticateSessionTicketResult { 
	UserInfo: PlayFabJsonObject;
	clone() : ServerAuthenticateSessionTicketResult;
	static C(Other: UObject | any): ServerAuthenticateSessionTicketResult;
}

declare class ServerAwardSteamAchievementResult { 
	AchievementResults: PlayFabJsonObject[];
	clone() : ServerAwardSteamAchievementResult;
	static C(Other: UObject | any): ServerAwardSteamAchievementResult;
}

declare class ServerBanUsersResult { 
	BanData: PlayFabJsonObject[];
	clone() : ServerBanUsersResult;
	static C(Other: UObject | any): ServerBanUsersResult;
}

declare class ServerConsumeItemResult { 
	ItemInstanceId: string;
	RemainingUses: number;
	clone() : ServerConsumeItemResult;
	static C(Other: UObject | any): ServerConsumeItemResult;
}

declare class ServerCreateSharedGroupResult { 
	SharedGroupId: string;
	clone() : ServerCreateSharedGroupResult;
	static C(Other: UObject | any): ServerCreateSharedGroupResult;
}

declare class ServerDeleteCharacterFromUserResult { 
	clone() : ServerDeleteCharacterFromUserResult;
	static C(Other: UObject | any): ServerDeleteCharacterFromUserResult;
}

declare class ServerDeletePlayerResult { 
	clone() : ServerDeletePlayerResult;
	static C(Other: UObject | any): ServerDeletePlayerResult;
}

declare class ServerDeregisterGameResponse { 
	clone() : ServerDeregisterGameResponse;
	static C(Other: UObject | any): ServerDeregisterGameResponse;
}

declare class ServerEmptyResponse { 
	clone() : ServerEmptyResponse;
	static C(Other: UObject | any): ServerEmptyResponse;
}

declare class ServerEvaluateRandomResultTableResult { 
	ResultItemId: string;
	clone() : ServerEvaluateRandomResultTableResult;
	static C(Other: UObject | any): ServerEvaluateRandomResultTableResult;
}

declare class ServerExecuteCloudScriptResult { 
	APIRequestsIssued: number;
	Error: PlayFabJsonObject;
	ExecutionTimeSeconds: number;
	FunctionName: string;
	FunctionResult: PlayFabJsonObject;
	FunctionResultTooLarge: boolean;
	HttpRequestsIssued: number;
	Logs: PlayFabJsonObject[];
	LogsTooLarge: boolean;
	MemoryConsumedBytes: number;
	ProcessorTimeSeconds: number;
	Revision: number;
	clone() : ServerExecuteCloudScriptResult;
	static C(Other: UObject | any): ServerExecuteCloudScriptResult;
}

declare class ServerGetAllSegmentsResult { 
	Segments: PlayFabJsonObject[];
	clone() : ServerGetAllSegmentsResult;
	static C(Other: UObject | any): ServerGetAllSegmentsResult;
}

declare class ServerGetCatalogItemsResult { 
	Catalog: PlayFabJsonObject[];
	clone() : ServerGetCatalogItemsResult;
	static C(Other: UObject | any): ServerGetCatalogItemsResult;
}

declare class ServerGetCharacterDataResult { 
	CharacterId: string;
	Data: PlayFabJsonObject;
	DataVersion: number;
	PlayFabId: string;
	clone() : ServerGetCharacterDataResult;
	static C(Other: UObject | any): ServerGetCharacterDataResult;
}

declare class ServerGetCharacterInventoryResult { 
	CharacterId: string;
	Inventory: PlayFabJsonObject[];
	PlayFabId: string;
	VirtualCurrency: PlayFabJsonObject;
	VirtualCurrencyRechargeTimes: PlayFabJsonObject;
	clone() : ServerGetCharacterInventoryResult;
	static C(Other: UObject | any): ServerGetCharacterInventoryResult;
}

declare class ServerGetCharacterLeaderboardResult { 
	Leaderboard: PlayFabJsonObject[];
	clone() : ServerGetCharacterLeaderboardResult;
	static C(Other: UObject | any): ServerGetCharacterLeaderboardResult;
}

declare class ServerGetCharacterStatisticsResult { 
	CharacterId: string;
	CharacterStatistics: PlayFabJsonObject;
	PlayFabId: string;
	clone() : ServerGetCharacterStatisticsResult;
	static C(Other: UObject | any): ServerGetCharacterStatisticsResult;
}

declare class ServerGetContentDownloadUrlResult { 
	URL: string;
	clone() : ServerGetContentDownloadUrlResult;
	static C(Other: UObject | any): ServerGetContentDownloadUrlResult;
}

declare class ServerGetFriendsListResult { 
	Friends: PlayFabJsonObject[];
	clone() : ServerGetFriendsListResult;
	static C(Other: UObject | any): ServerGetFriendsListResult;
}

declare class ServerGetLeaderboardAroundCharacterResult { 
	Leaderboard: PlayFabJsonObject[];
	clone() : ServerGetLeaderboardAroundCharacterResult;
	static C(Other: UObject | any): ServerGetLeaderboardAroundCharacterResult;
}

declare class ServerGetLeaderboardAroundUserResult { 
	Leaderboard: PlayFabJsonObject[];
	NextReset: string;
	Version: number;
	clone() : ServerGetLeaderboardAroundUserResult;
	static C(Other: UObject | any): ServerGetLeaderboardAroundUserResult;
}

declare class ServerGetLeaderboardForUsersCharactersResult { 
	Leaderboard: PlayFabJsonObject[];
	clone() : ServerGetLeaderboardForUsersCharactersResult;
	static C(Other: UObject | any): ServerGetLeaderboardForUsersCharactersResult;
}

declare class ServerGetLeaderboardResult { 
	Leaderboard: PlayFabJsonObject[];
	NextReset: string;
	Version: number;
	clone() : ServerGetLeaderboardResult;
	static C(Other: UObject | any): ServerGetLeaderboardResult;
}

declare class ServerGetPlayerCombinedInfoResult { 
	InfoResultPayload: PlayFabJsonObject;
	PlayFabId: string;
	clone() : ServerGetPlayerCombinedInfoResult;
	static C(Other: UObject | any): ServerGetPlayerCombinedInfoResult;
}

declare class ServerGetPlayerProfileResult { 
	PlayerProfile: PlayFabJsonObject;
	clone() : ServerGetPlayerProfileResult;
	static C(Other: UObject | any): ServerGetPlayerProfileResult;
}

declare class ServerGetPlayerSegmentsResult { 
	Segments: PlayFabJsonObject[];
	clone() : ServerGetPlayerSegmentsResult;
	static C(Other: UObject | any): ServerGetPlayerSegmentsResult;
}

declare class ServerGetPlayersInSegmentResult { 
	ContinuationToken: string;
	PlayerProfiles: PlayFabJsonObject[];
	ProfilesInSegment: number;
	clone() : ServerGetPlayersInSegmentResult;
	static C(Other: UObject | any): ServerGetPlayersInSegmentResult;
}

declare class ServerGetPlayerStatisticsResult { 
	PlayFabId: string;
	Statistics: PlayFabJsonObject[];
	clone() : ServerGetPlayerStatisticsResult;
	static C(Other: UObject | any): ServerGetPlayerStatisticsResult;
}

declare class ServerGetPlayerStatisticVersionsResult { 
	StatisticVersions: PlayFabJsonObject[];
	clone() : ServerGetPlayerStatisticVersionsResult;
	static C(Other: UObject | any): ServerGetPlayerStatisticVersionsResult;
}

declare class ServerGetPlayerTagsResult { 
	PlayFabId: string;
	Tags: string;
	clone() : ServerGetPlayerTagsResult;
	static C(Other: UObject | any): ServerGetPlayerTagsResult;
}

declare class ServerGetPlayFabIDsFromFacebookIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ServerGetPlayFabIDsFromFacebookIDsResult;
	static C(Other: UObject | any): ServerGetPlayFabIDsFromFacebookIDsResult;
}

declare class ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult { 
	Data: PlayFabJsonObject[];
	clone() : ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult;
	static C(Other: UObject | any): ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult;
}

declare class ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult { 
	Data: PlayFabJsonObject[];
	clone() : ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
	static C(Other: UObject | any): ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
}

declare class ServerGetPlayFabIDsFromSteamIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ServerGetPlayFabIDsFromSteamIDsResult;
	static C(Other: UObject | any): ServerGetPlayFabIDsFromSteamIDsResult;
}

declare class ServerGetPlayFabIDsFromXboxLiveIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ServerGetPlayFabIDsFromXboxLiveIDsResult;
	static C(Other: UObject | any): ServerGetPlayFabIDsFromXboxLiveIDsResult;
}

declare class ServerGetPublisherDataResult { 
	Data: PlayFabJsonObject;
	clone() : ServerGetPublisherDataResult;
	static C(Other: UObject | any): ServerGetPublisherDataResult;
}

declare class ServerGetRandomResultTablesResult { 
	Tables: PlayFabJsonObject;
	clone() : ServerGetRandomResultTablesResult;
	static C(Other: UObject | any): ServerGetRandomResultTablesResult;
}

declare class ServerGetServerCustomIDsFromPlayFabIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ServerGetServerCustomIDsFromPlayFabIDsResult;
	static C(Other: UObject | any): ServerGetServerCustomIDsFromPlayFabIDsResult;
}

declare class ServerGetSharedGroupDataResult { 
	Data: PlayFabJsonObject;
	Members: string;
	clone() : ServerGetSharedGroupDataResult;
	static C(Other: UObject | any): ServerGetSharedGroupDataResult;
}

declare class ServerGetTimeResult { 
	Time: string;
	clone() : ServerGetTimeResult;
	static C(Other: UObject | any): ServerGetTimeResult;
}

declare class ServerGetTitleDataResult { 
	Data: PlayFabJsonObject;
	clone() : ServerGetTitleDataResult;
	static C(Other: UObject | any): ServerGetTitleDataResult;
}

declare class ServerGetTitleNewsResult { 
	News: PlayFabJsonObject[];
	clone() : ServerGetTitleNewsResult;
	static C(Other: UObject | any): ServerGetTitleNewsResult;
}

declare class ServerGetUserAccountInfoResult { 
	UserInfo: PlayFabJsonObject;
	clone() : ServerGetUserAccountInfoResult;
	static C(Other: UObject | any): ServerGetUserAccountInfoResult;
}

declare class ServerGetUserBansResult { 
	BanData: PlayFabJsonObject[];
	clone() : ServerGetUserBansResult;
	static C(Other: UObject | any): ServerGetUserBansResult;
}

declare class ServerGetUserDataResult { 
	Data: PlayFabJsonObject;
	DataVersion: number;
	PlayFabId: string;
	clone() : ServerGetUserDataResult;
	static C(Other: UObject | any): ServerGetUserDataResult;
}

declare class ServerGetUserInventoryResult { 
	Inventory: PlayFabJsonObject[];
	PlayFabId: string;
	VirtualCurrency: PlayFabJsonObject;
	VirtualCurrencyRechargeTimes: PlayFabJsonObject;
	clone() : ServerGetUserInventoryResult;
	static C(Other: UObject | any): ServerGetUserInventoryResult;
}

declare class ServerGrantCharacterToUserResult { 
	CharacterId: string;
	clone() : ServerGrantCharacterToUserResult;
	static C(Other: UObject | any): ServerGrantCharacterToUserResult;
}

declare class ServerGrantItemsToCharacterResult { 
	ItemGrantResults: PlayFabJsonObject[];
	clone() : ServerGrantItemsToCharacterResult;
	static C(Other: UObject | any): ServerGrantItemsToCharacterResult;
}

declare class ServerGrantItemsToUserResult { 
	ItemGrantResults: PlayFabJsonObject[];
	clone() : ServerGrantItemsToUserResult;
	static C(Other: UObject | any): ServerGrantItemsToUserResult;
}

declare class ServerGrantItemsToUsersResult { 
	ItemGrantResults: PlayFabJsonObject[];
	clone() : ServerGrantItemsToUsersResult;
	static C(Other: UObject | any): ServerGrantItemsToUsersResult;
}

declare class ServerLinkXboxAccountResult { 
	clone() : ServerLinkXboxAccountResult;
	static C(Other: UObject | any): ServerLinkXboxAccountResult;
}

declare class ServerListUsersCharactersResult { 
	Characters: PlayFabJsonObject[];
	clone() : ServerListUsersCharactersResult;
	static C(Other: UObject | any): ServerListUsersCharactersResult;
}

declare class ServerModifyCharacterVirtualCurrencyResult { 
	Balance: number;
	VirtualCurrency: string;
	clone() : ServerModifyCharacterVirtualCurrencyResult;
	static C(Other: UObject | any): ServerModifyCharacterVirtualCurrencyResult;
}

declare class ServerModifyItemUsesResult { 
	ItemInstanceId: string;
	RemainingUses: number;
	clone() : ServerModifyItemUsesResult;
	static C(Other: UObject | any): ServerModifyItemUsesResult;
}

declare class ServerModifyUserVirtualCurrencyResult { 
	Balance: number;
	BalanceChange: number;
	PlayFabId: string;
	VirtualCurrency: string;
	clone() : ServerModifyUserVirtualCurrencyResult;
	static C(Other: UObject | any): ServerModifyUserVirtualCurrencyResult;
}

declare class ServerMoveItemToCharacterFromCharacterResult { 
	clone() : ServerMoveItemToCharacterFromCharacterResult;
	static C(Other: UObject | any): ServerMoveItemToCharacterFromCharacterResult;
}

declare class ServerMoveItemToCharacterFromUserResult { 
	clone() : ServerMoveItemToCharacterFromUserResult;
	static C(Other: UObject | any): ServerMoveItemToCharacterFromUserResult;
}

declare class ServerMoveItemToUserFromCharacterResult { 
	clone() : ServerMoveItemToUserFromCharacterResult;
	static C(Other: UObject | any): ServerMoveItemToUserFromCharacterResult;
}

declare type EPlayerConnectionState = 'pfenum_Unassigned' | 'pfenum_Connecting' | 'pfenum_Participating' | 'pfenum_Participated' | 'pfenum_MAX';
declare var EPlayerConnectionState : { pfenum_Unassigned:'pfenum_Unassigned',pfenum_Connecting:'pfenum_Connecting',pfenum_Participating:'pfenum_Participating',pfenum_Participated:'pfenum_Participated',pfenum_MAX:'pfenum_MAX', };
declare class ServerNotifyMatchmakerPlayerLeftResult { 
	PlayerState: EPlayerConnectionState;
	clone() : ServerNotifyMatchmakerPlayerLeftResult;
	static C(Other: UObject | any): ServerNotifyMatchmakerPlayerLeftResult;
}

declare class ServerRedeemCouponResult { 
	GrantedItems: PlayFabJsonObject[];
	clone() : ServerRedeemCouponResult;
	static C(Other: UObject | any): ServerRedeemCouponResult;
}

declare class ServerRedeemMatchmakerTicketResult { 
	Error: string;
	TicketIsValid: boolean;
	UserInfo: PlayFabJsonObject;
	clone() : ServerRedeemMatchmakerTicketResult;
	static C(Other: UObject | any): ServerRedeemMatchmakerTicketResult;
}

declare class ServerRefreshGameServerInstanceHeartbeatResult { 
	clone() : ServerRefreshGameServerInstanceHeartbeatResult;
	static C(Other: UObject | any): ServerRefreshGameServerInstanceHeartbeatResult;
}

declare class ServerRegisterGameResponse { 
	LobbyId: string;
	clone() : ServerRegisterGameResponse;
	static C(Other: UObject | any): ServerRegisterGameResponse;
}

declare class ServerRemovePlayerTagResult { 
	clone() : ServerRemovePlayerTagResult;
	static C(Other: UObject | any): ServerRemovePlayerTagResult;
}

declare class ServerRemoveSharedGroupMembersResult { 
	clone() : ServerRemoveSharedGroupMembersResult;
	static C(Other: UObject | any): ServerRemoveSharedGroupMembersResult;
}

declare class ServerReportPlayerServerResult { 
	SubmissionsRemaining: number;
	clone() : ServerReportPlayerServerResult;
	static C(Other: UObject | any): ServerReportPlayerServerResult;
}

declare class ServerRevokeAllBansForUserResult { 
	BanData: PlayFabJsonObject[];
	clone() : ServerRevokeAllBansForUserResult;
	static C(Other: UObject | any): ServerRevokeAllBansForUserResult;
}

declare class ServerRevokeBansResult { 
	BanData: PlayFabJsonObject[];
	clone() : ServerRevokeBansResult;
	static C(Other: UObject | any): ServerRevokeBansResult;
}

declare class ServerRevokeInventoryItemsResult { 
	Errors: PlayFabJsonObject[];
	clone() : ServerRevokeInventoryItemsResult;
	static C(Other: UObject | any): ServerRevokeInventoryItemsResult;
}

declare class ServerRevokeInventoryResult { 
	clone() : ServerRevokeInventoryResult;
	static C(Other: UObject | any): ServerRevokeInventoryResult;
}

declare class ServerSendCustomAccountRecoveryEmailResult { 
	clone() : ServerSendCustomAccountRecoveryEmailResult;
	static C(Other: UObject | any): ServerSendCustomAccountRecoveryEmailResult;
}

declare class ServerSendEmailFromTemplateResult { 
	clone() : ServerSendEmailFromTemplateResult;
	static C(Other: UObject | any): ServerSendEmailFromTemplateResult;
}

declare class ServerSendPushNotificationResult { 
	clone() : ServerSendPushNotificationResult;
	static C(Other: UObject | any): ServerSendPushNotificationResult;
}

declare class ServerServerLoginResult { 
	EntityToken: PlayFabJsonObject;
	InfoResultPayload: PlayFabJsonObject;
	LastLoginTime: string;
	NewlyCreated: boolean;
	PlayFabId: string;
	SessionTicket: string;
	SettingsForUser: PlayFabJsonObject;
	clone() : ServerServerLoginResult;
	static C(Other: UObject | any): ServerServerLoginResult;
}

declare class ServerSetGameServerInstanceDataResult { 
	clone() : ServerSetGameServerInstanceDataResult;
	static C(Other: UObject | any): ServerSetGameServerInstanceDataResult;
}

declare class ServerSetGameServerInstanceStateResult { 
	clone() : ServerSetGameServerInstanceStateResult;
	static C(Other: UObject | any): ServerSetGameServerInstanceStateResult;
}

declare class ServerSetGameServerInstanceTagsResult { 
	clone() : ServerSetGameServerInstanceTagsResult;
	static C(Other: UObject | any): ServerSetGameServerInstanceTagsResult;
}

declare class ServerSetPlayerSecretResult { 
	clone() : ServerSetPlayerSecretResult;
	static C(Other: UObject | any): ServerSetPlayerSecretResult;
}

declare class ServerSetPublisherDataResult { 
	clone() : ServerSetPublisherDataResult;
	static C(Other: UObject | any): ServerSetPublisherDataResult;
}

declare class ServerSetTitleDataResult { 
	clone() : ServerSetTitleDataResult;
	static C(Other: UObject | any): ServerSetTitleDataResult;
}

declare class ServerUnlinkXboxAccountResult { 
	clone() : ServerUnlinkXboxAccountResult;
	static C(Other: UObject | any): ServerUnlinkXboxAccountResult;
}

declare class ServerUnlockContainerItemResult { 
	GrantedItems: PlayFabJsonObject[];
	UnlockedItemInstanceId: string;
	UnlockedWithItemInstanceId: string;
	VirtualCurrency: PlayFabJsonObject;
	clone() : ServerUnlockContainerItemResult;
	static C(Other: UObject | any): ServerUnlockContainerItemResult;
}

declare class ServerUpdateBansResult { 
	BanData: PlayFabJsonObject[];
	clone() : ServerUpdateBansResult;
	static C(Other: UObject | any): ServerUpdateBansResult;
}

declare class ServerUpdateCharacterDataResult { 
	DataVersion: number;
	clone() : ServerUpdateCharacterDataResult;
	static C(Other: UObject | any): ServerUpdateCharacterDataResult;
}

declare class ServerUpdateCharacterStatisticsResult { 
	clone() : ServerUpdateCharacterStatisticsResult;
	static C(Other: UObject | any): ServerUpdateCharacterStatisticsResult;
}

declare class ServerUpdatePlayerStatisticsResult { 
	clone() : ServerUpdatePlayerStatisticsResult;
	static C(Other: UObject | any): ServerUpdatePlayerStatisticsResult;
}

declare class ServerUpdateSharedGroupDataResult { 
	clone() : ServerUpdateSharedGroupDataResult;
	static C(Other: UObject | any): ServerUpdateSharedGroupDataResult;
}

declare class ServerUpdateUserDataResult { 
	DataVersion: number;
	clone() : ServerUpdateUserDataResult;
	static C(Other: UObject | any): ServerUpdateUserDataResult;
}

declare class ServerWriteEventResponse { 
	EventId: string;
	clone() : ServerWriteEventResponse;
	static C(Other: UObject | any): ServerWriteEventResponse;
}

declare class ProfilesGetEntityProfileResponse { 
	Profile: PlayFabJsonObject;
	clone() : ProfilesGetEntityProfileResponse;
	static C(Other: UObject | any): ProfilesGetEntityProfileResponse;
}

declare class ProfilesGetEntityProfilesResponse { 
	Profiles: PlayFabJsonObject[];
	clone() : ProfilesGetEntityProfilesResponse;
	static C(Other: UObject | any): ProfilesGetEntityProfilesResponse;
}

declare class ProfilesGetGlobalPolicyResponse { 
	Permissions: PlayFabJsonObject[];
	clone() : ProfilesGetGlobalPolicyResponse;
	static C(Other: UObject | any): ProfilesGetGlobalPolicyResponse;
}

declare class ProfilesSetEntityProfilePolicyResponse { 
	Permissions: PlayFabJsonObject[];
	clone() : ProfilesSetEntityProfilePolicyResponse;
	static C(Other: UObject | any): ProfilesSetEntityProfilePolicyResponse;
}

declare class ProfilesSetGlobalPolicyResponse { 
	clone() : ProfilesSetGlobalPolicyResponse;
	static C(Other: UObject | any): ProfilesSetGlobalPolicyResponse;
}

declare type EOperationTypes = 'pfenum_Created' | 'pfenum_Updated' | 'pfenum_Deleted' | 'pfenum_None' | 'pfenum_MAX';
declare var EOperationTypes : { pfenum_Created:'pfenum_Created',pfenum_Updated:'pfenum_Updated',pfenum_Deleted:'pfenum_Deleted',pfenum_None:'pfenum_None',pfenum_MAX:'pfenum_MAX', };
declare class ProfilesSetProfileLanguageResponse { 
	OperationResult: EOperationTypes;
	VersionNumber: number;
	clone() : ProfilesSetProfileLanguageResponse;
	static C(Other: UObject | any): ProfilesSetProfileLanguageResponse;
}

declare type EContainerFlavor = 'pfenum_ManagedWindowsServerCore' | 'pfenum_CustomLinux' | 'pfenum_ManagedWindowsServerCorePreview' | 'pfenum_MAX';
declare var EContainerFlavor : { pfenum_ManagedWindowsServerCore:'pfenum_ManagedWindowsServerCore',pfenum_CustomLinux:'pfenum_CustomLinux',pfenum_ManagedWindowsServerCorePreview:'pfenum_ManagedWindowsServerCorePreview',pfenum_MAX:'pfenum_MAX', };
declare type EAzureVmSize = 'pfenum_Standard_D1_v2' | 'pfenum_Standard_D2_v2' | 'pfenum_Standard_D3_v2' | 'pfenum_Standard_D4_v2' | 'pfenum_Standard_D5_v2' | 'pfenum_Standard_A1_v2' | 'pfenum_Standard_A2_v2' | 'pfenum_Standard_A4_v2' | 'pfenum_Standard_A8_v2' | 'pfenum_Standard_F1' | 'pfenum_Standard_F2' | 'pfenum_Standard_F4' | 'pfenum_Standard_F8' | 'pfenum_Standard_F16' | 'pfenum_Standard_F2s_v2' | 'pfenum_Standard_F4s_v2' | 'pfenum_Standard_F8s_v2' | 'pfenum_Standard_F16s_v2' | 'pfenum_Standard_A1' | 'pfenum_Standard_A2' | 'pfenum_Standard_A3' | 'pfenum_Standard_A4' | 'pfenum_Standard_MAX';
declare var EAzureVmSize : { pfenum_Standard_D1_v2:'pfenum_Standard_D1_v2',pfenum_Standard_D2_v2:'pfenum_Standard_D2_v2',pfenum_Standard_D3_v2:'pfenum_Standard_D3_v2',pfenum_Standard_D4_v2:'pfenum_Standard_D4_v2',pfenum_Standard_D5_v2:'pfenum_Standard_D5_v2',pfenum_Standard_A1_v2:'pfenum_Standard_A1_v2',pfenum_Standard_A2_v2:'pfenum_Standard_A2_v2',pfenum_Standard_A4_v2:'pfenum_Standard_A4_v2',pfenum_Standard_A8_v2:'pfenum_Standard_A8_v2',pfenum_Standard_F1:'pfenum_Standard_F1',pfenum_Standard_F2:'pfenum_Standard_F2',pfenum_Standard_F4:'pfenum_Standard_F4',pfenum_Standard_F8:'pfenum_Standard_F8',pfenum_Standard_F16:'pfenum_Standard_F16',pfenum_Standard_F2s_v2:'pfenum_Standard_F2s_v2',pfenum_Standard_F4s_v2:'pfenum_Standard_F4s_v2',pfenum_Standard_F8s_v2:'pfenum_Standard_F8s_v2',pfenum_Standard_F16s_v2:'pfenum_Standard_F16s_v2',pfenum_Standard_A1:'pfenum_Standard_A1',pfenum_Standard_A2:'pfenum_Standard_A2',pfenum_Standard_A3:'pfenum_Standard_A3',pfenum_Standard_A4:'pfenum_Standard_A4',pfenum_Standard_MAX:'pfenum_Standard_MAX', };
declare class MultiplayerCreateBuildWithCustomContainerResponse { 
	BuildId: string;
	BuildName: string;
	ContainerFlavor: EContainerFlavor;
	ContainerRunCommand: string;
	CreationTime: string;
	CustomGameContainerImage: PlayFabJsonObject;
	GameAssetReferences: PlayFabJsonObject[];
	GameCertificateReferences: PlayFabJsonObject[];
	MetaData: PlayFabJsonObject;
	MultiplayerServerCountPerVm: number;
	Ports: PlayFabJsonObject[];
	RegionConfigurations: PlayFabJsonObject[];
	VmSize: EAzureVmSize;
	clone() : MultiplayerCreateBuildWithCustomContainerResponse;
	static C(Other: UObject | any): MultiplayerCreateBuildWithCustomContainerResponse;
}

declare class MultiplayerCreateBuildWithManagedContainerResponse { 
	BuildId: string;
	BuildName: string;
	ContainerFlavor: EContainerFlavor;
	CreationTime: string;
	GameAssetReferences: PlayFabJsonObject[];
	GameCertificateReferences: PlayFabJsonObject[];
	MetaData: PlayFabJsonObject;
	MultiplayerServerCountPerVm: number;
	Ports: PlayFabJsonObject[];
	RegionConfigurations: PlayFabJsonObject[];
	StartMultiplayerServerCommand: string;
	VmSize: EAzureVmSize;
	clone() : MultiplayerCreateBuildWithManagedContainerResponse;
	static C(Other: UObject | any): MultiplayerCreateBuildWithManagedContainerResponse;
}

declare class MultiplayerCreateRemoteUserResponse { 
	ExpirationTime: string;
	Password: string;
	UserName: string;
	clone() : MultiplayerCreateRemoteUserResponse;
	static C(Other: UObject | any): MultiplayerCreateRemoteUserResponse;
}

declare class MultiplayerEmptyResponse { 
	clone() : MultiplayerEmptyResponse;
	static C(Other: UObject | any): MultiplayerEmptyResponse;
}

declare type ETitleMultiplayerServerEnabledStatus = 'pfenum_Initializing' | 'pfenum_Enabled' | 'pfenum_Disabled' | 'pfenum_MAX';
declare var ETitleMultiplayerServerEnabledStatus : { pfenum_Initializing:'pfenum_Initializing',pfenum_Enabled:'pfenum_Enabled',pfenum_Disabled:'pfenum_Disabled',pfenum_MAX:'pfenum_MAX', };
declare class MultiplayerEnableMultiplayerServersForTitleResponse { 
	Status: ETitleMultiplayerServerEnabledStatus;
	clone() : MultiplayerEnableMultiplayerServersForTitleResponse;
	static C(Other: UObject | any): MultiplayerEnableMultiplayerServersForTitleResponse;
}

declare class MultiplayerGetAssetUploadUrlResponse { 
	AssetUploadUrl: string;
	Filename: string;
	clone() : MultiplayerGetAssetUploadUrlResponse;
	static C(Other: UObject | any): MultiplayerGetAssetUploadUrlResponse;
}

declare class MultiplayerGetBuildResponse { 
	BuildId: string;
	BuildName: string;
	BuildStatus: string;
	ContainerFlavor: EContainerFlavor;
	ContainerRunCommand: string;
	CreationTime: string;
	CustomGameContainerImage: PlayFabJsonObject;
	GameAssetReferences: PlayFabJsonObject[];
	GameCertificateReferences: PlayFabJsonObject[];
	MetaData: PlayFabJsonObject;
	MultiplayerServerCountPerVm: number;
	Ports: PlayFabJsonObject[];
	RegionConfigurations: PlayFabJsonObject[];
	StartMultiplayerServerCommand: string;
	VmSize: EAzureVmSize;
	clone() : MultiplayerGetBuildResponse;
	static C(Other: UObject | any): MultiplayerGetBuildResponse;
}

declare class MultiplayerGetContainerRegistryCredentialsResponse { 
	DnsName: string;
	Password: string;
	UserName: string;
	clone() : MultiplayerGetContainerRegistryCredentialsResponse;
	static C(Other: UObject | any): MultiplayerGetContainerRegistryCredentialsResponse;
}

declare type EAzureRegion = 'pfenum_AustraliaEast' | 'pfenum_AustraliaSoutheast' | 'pfenum_BrazilSouth' | 'pfenum_CentralUs' | 'pfenum_EastAsia' | 'pfenum_EastUs' | 'pfenum_EastUs2' | 'pfenum_JapanEast' | 'pfenum_JapanWest' | 'pfenum_NorthCentralUs' | 'pfenum_NorthEurope' | 'pfenum_SouthCentralUs' | 'pfenum_SoutheastAsia' | 'pfenum_WestEurope' | 'pfenum_WestUs' | 'pfenum_MAX';
declare var EAzureRegion : { pfenum_AustraliaEast:'pfenum_AustraliaEast',pfenum_AustraliaSoutheast:'pfenum_AustraliaSoutheast',pfenum_BrazilSouth:'pfenum_BrazilSouth',pfenum_CentralUs:'pfenum_CentralUs',pfenum_EastAsia:'pfenum_EastAsia',pfenum_EastUs:'pfenum_EastUs',pfenum_EastUs2:'pfenum_EastUs2',pfenum_JapanEast:'pfenum_JapanEast',pfenum_JapanWest:'pfenum_JapanWest',pfenum_NorthCentralUs:'pfenum_NorthCentralUs',pfenum_NorthEurope:'pfenum_NorthEurope',pfenum_SouthCentralUs:'pfenum_SouthCentralUs',pfenum_SoutheastAsia:'pfenum_SoutheastAsia',pfenum_WestEurope:'pfenum_WestEurope',pfenum_WestUs:'pfenum_WestUs',pfenum_MAX:'pfenum_MAX', };
declare class MultiplayerGetMultiplayerServerDetailsResponse { 
	ConnectedPlayers: PlayFabJsonObject[];
	FQDN: string;
	IPV4Address: string;
	LastStateTransitionTime: string;
	Ports: PlayFabJsonObject[];
	Region: EAzureRegion;
	ServerId: string;
	SessionId: string;
	State: string;
	VmId: string;
	clone() : MultiplayerGetMultiplayerServerDetailsResponse;
	static C(Other: UObject | any): MultiplayerGetMultiplayerServerDetailsResponse;
}

declare class MultiplayerGetRemoteLoginEndpointResponse { 
	IPV4Address: string;
	Port: number;
	clone() : MultiplayerGetRemoteLoginEndpointResponse;
	static C(Other: UObject | any): MultiplayerGetRemoteLoginEndpointResponse;
}

declare class MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse { 
	Status: ETitleMultiplayerServerEnabledStatus;
	clone() : MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse;
	static C(Other: UObject | any): MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse;
}

declare class MultiplayerListAssetSummariesResponse { 
	AssetSummaries: PlayFabJsonObject[];
	PageSize: number;
	SkipToken: string;
	clone() : MultiplayerListAssetSummariesResponse;
	static C(Other: UObject | any): MultiplayerListAssetSummariesResponse;
}

declare class MultiplayerListBuildSummariesResponse { 
	BuildSummaries: PlayFabJsonObject[];
	PageSize: number;
	SkipToken: string;
	clone() : MultiplayerListBuildSummariesResponse;
	static C(Other: UObject | any): MultiplayerListBuildSummariesResponse;
}

declare class MultiplayerListCertificateSummariesResponse { 
	CertificateSummaries: PlayFabJsonObject[];
	PageSize: number;
	SkipToken: string;
	clone() : MultiplayerListCertificateSummariesResponse;
	static C(Other: UObject | any): MultiplayerListCertificateSummariesResponse;
}

declare class MultiplayerListContainerImagesResponse { 
	Images: string;
	PageSize: number;
	SkipToken: string;
	clone() : MultiplayerListContainerImagesResponse;
	static C(Other: UObject | any): MultiplayerListContainerImagesResponse;
}

declare class MultiplayerListContainerImageTagsResponse { 
	Tags: string;
	clone() : MultiplayerListContainerImageTagsResponse;
	static C(Other: UObject | any): MultiplayerListContainerImageTagsResponse;
}

declare class MultiplayerListMultiplayerServersResponse { 
	MultiplayerServerSummaries: PlayFabJsonObject[];
	PageSize: number;
	SkipToken: string;
	clone() : MultiplayerListMultiplayerServersResponse;
	static C(Other: UObject | any): MultiplayerListMultiplayerServersResponse;
}

declare class MultiplayerListQosServersResponse { 
	PageSize: number;
	QosServers: PlayFabJsonObject[];
	SkipToken: string;
	clone() : MultiplayerListQosServersResponse;
	static C(Other: UObject | any): MultiplayerListQosServersResponse;
}

declare class MultiplayerListVirtualMachineSummariesResponse { 
	PageSize: number;
	SkipToken: string;
	VirtualMachines: PlayFabJsonObject[];
	clone() : MultiplayerListVirtualMachineSummariesResponse;
	static C(Other: UObject | any): MultiplayerListVirtualMachineSummariesResponse;
}

declare class MultiplayerRequestMultiplayerServerResponse { 
	ConnectedPlayers: PlayFabJsonObject[];
	FQDN: string;
	IPV4Address: string;
	LastStateTransitionTime: string;
	Ports: PlayFabJsonObject[];
	Region: EAzureRegion;
	ServerId: string;
	SessionId: string;
	State: string;
	VmId: string;
	clone() : MultiplayerRequestMultiplayerServerResponse;
	static C(Other: UObject | any): MultiplayerRequestMultiplayerServerResponse;
}

declare class MultiplayerRolloverContainerRegistryCredentialsResponse { 
	DnsName: string;
	Password: string;
	UserName: string;
	clone() : MultiplayerRolloverContainerRegistryCredentialsResponse;
	static C(Other: UObject | any): MultiplayerRolloverContainerRegistryCredentialsResponse;
}

declare class MatchmakerAuthUserResponse { 
	Authorized: boolean;
	PlayFabId: string;
	clone() : MatchmakerAuthUserResponse;
	static C(Other: UObject | any): MatchmakerAuthUserResponse;
}

declare class MatchmakerPlayerJoinedResponse { 
	clone() : MatchmakerPlayerJoinedResponse;
	static C(Other: UObject | any): MatchmakerPlayerJoinedResponse;
}

declare class MatchmakerPlayerLeftResponse { 
	clone() : MatchmakerPlayerLeftResponse;
	static C(Other: UObject | any): MatchmakerPlayerLeftResponse;
}

declare class MatchmakerStartGameResponse { 
	GameID: string;
	ServerIPV4Address: string;
	ServerIPV6Address: string;
	ServerPort: number;
	ServerPublicDNSName: string;
	clone() : MatchmakerStartGameResponse;
	static C(Other: UObject | any): MatchmakerStartGameResponse;
}

declare class MatchmakerUserInfoResponse { 
	Inventory: PlayFabJsonObject[];
	IsDeveloper: boolean;
	PlayFabId: string;
	SteamId: string;
	TitleDisplayName: string;
	UserName: string;
	VirtualCurrency: PlayFabJsonObject;
	VirtualCurrencyRechargeTimes: PlayFabJsonObject;
	clone() : MatchmakerUserInfoResponse;
	static C(Other: UObject | any): MatchmakerUserInfoResponse;
}

declare class LocalizationGetLanguageListResponse { 
	LanguageList: string;
	clone() : LocalizationGetLanguageListResponse;
	static C(Other: UObject | any): LocalizationGetLanguageListResponse;
}

declare class GroupsApplyToGroupResponse { 
	Entity: PlayFabJsonObject;
	Expires: string;
	Group: PlayFabJsonObject;
	clone() : GroupsApplyToGroupResponse;
	static C(Other: UObject | any): GroupsApplyToGroupResponse;
}

declare class GroupsCreateGroupResponse { 
	AdminRoleId: string;
	Created: string;
	Group: PlayFabJsonObject;
	GroupName: string;
	MemberRoleId: string;
	ProfileVersion: number;
	Roles: PlayFabJsonObject;
	clone() : GroupsCreateGroupResponse;
	static C(Other: UObject | any): GroupsCreateGroupResponse;
}

declare class GroupsCreateGroupRoleResponse { 
	ProfileVersion: number;
	RoleId: string;
	RoleName: string;
	clone() : GroupsCreateGroupRoleResponse;
	static C(Other: UObject | any): GroupsCreateGroupRoleResponse;
}

declare class GroupsEmptyResponse { 
	clone() : GroupsEmptyResponse;
	static C(Other: UObject | any): GroupsEmptyResponse;
}

declare class GroupsGetGroupResponse { 
	AdminRoleId: string;
	Created: string;
	Group: PlayFabJsonObject;
	GroupName: string;
	MemberRoleId: string;
	ProfileVersion: number;
	Roles: PlayFabJsonObject;
	clone() : GroupsGetGroupResponse;
	static C(Other: UObject | any): GroupsGetGroupResponse;
}

declare class GroupsInviteToGroupResponse { 
	Expires: string;
	Group: PlayFabJsonObject;
	InvitedByEntity: PlayFabJsonObject;
	InvitedEntity: PlayFabJsonObject;
	RoleId: string;
	clone() : GroupsInviteToGroupResponse;
	static C(Other: UObject | any): GroupsInviteToGroupResponse;
}

declare class GroupsIsMemberResponse { 
	IsMember: boolean;
	clone() : GroupsIsMemberResponse;
	static C(Other: UObject | any): GroupsIsMemberResponse;
}

declare class GroupsListGroupApplicationsResponse { 
	Applications: PlayFabJsonObject[];
	clone() : GroupsListGroupApplicationsResponse;
	static C(Other: UObject | any): GroupsListGroupApplicationsResponse;
}

declare class GroupsListGroupBlocksResponse { 
	BlockedEntities: PlayFabJsonObject[];
	clone() : GroupsListGroupBlocksResponse;
	static C(Other: UObject | any): GroupsListGroupBlocksResponse;
}

declare class GroupsListGroupInvitationsResponse { 
	Invitations: PlayFabJsonObject[];
	clone() : GroupsListGroupInvitationsResponse;
	static C(Other: UObject | any): GroupsListGroupInvitationsResponse;
}

declare class GroupsListGroupMembersResponse { 
	Members: PlayFabJsonObject[];
	clone() : GroupsListGroupMembersResponse;
	static C(Other: UObject | any): GroupsListGroupMembersResponse;
}

declare class GroupsListMembershipOpportunitiesResponse { 
	Applications: PlayFabJsonObject[];
	Invitations: PlayFabJsonObject[];
	clone() : GroupsListMembershipOpportunitiesResponse;
	static C(Other: UObject | any): GroupsListMembershipOpportunitiesResponse;
}

declare class GroupsListMembershipResponse { 
	Groups: PlayFabJsonObject[];
	clone() : GroupsListMembershipResponse;
	static C(Other: UObject | any): GroupsListMembershipResponse;
}

declare class GroupsUpdateGroupResponse { 
	OperationReason: string;
	ProfileVersion: number;
	SetResult: EOperationTypes;
	clone() : GroupsUpdateGroupResponse;
	static C(Other: UObject | any): GroupsUpdateGroupResponse;
}

declare class GroupsUpdateGroupRoleResponse { 
	OperationReason: string;
	ProfileVersion: number;
	SetResult: EOperationTypes;
	clone() : GroupsUpdateGroupRoleResponse;
	static C(Other: UObject | any): GroupsUpdateGroupRoleResponse;
}

declare class EventsWriteEventsResponse { 
	AssignedEventIds: string;
	clone() : EventsWriteEventsResponse;
	static C(Other: UObject | any): EventsWriteEventsResponse;
}

declare class DataAbortFileUploadsResponse { 
	Entity: PlayFabJsonObject;
	ProfileVersion: number;
	clone() : DataAbortFileUploadsResponse;
	static C(Other: UObject | any): DataAbortFileUploadsResponse;
}

declare class DataDeleteFilesResponse { 
	Entity: PlayFabJsonObject;
	ProfileVersion: number;
	clone() : DataDeleteFilesResponse;
	static C(Other: UObject | any): DataDeleteFilesResponse;
}

declare class DataFinalizeFileUploadsResponse { 
	Entity: PlayFabJsonObject;
	MetaData: PlayFabJsonObject;
	ProfileVersion: number;
	clone() : DataFinalizeFileUploadsResponse;
	static C(Other: UObject | any): DataFinalizeFileUploadsResponse;
}

declare class DataGetFilesResponse { 
	Entity: PlayFabJsonObject;
	MetaData: PlayFabJsonObject;
	ProfileVersion: number;
	clone() : DataGetFilesResponse;
	static C(Other: UObject | any): DataGetFilesResponse;
}

declare class DataGetObjectsResponse { 
	Entity: PlayFabJsonObject;
	Objects: PlayFabJsonObject;
	ProfileVersion: number;
	clone() : DataGetObjectsResponse;
	static C(Other: UObject | any): DataGetObjectsResponse;
}

declare class DataInitiateFileUploadsResponse { 
	Entity: PlayFabJsonObject;
	ProfileVersion: number;
	UploadDetails: PlayFabJsonObject[];
	clone() : DataInitiateFileUploadsResponse;
	static C(Other: UObject | any): DataInitiateFileUploadsResponse;
}

declare class DataSetObjectsResponse { 
	ProfileVersion: number;
	SetResults: PlayFabJsonObject[];
	clone() : DataSetObjectsResponse;
	static C(Other: UObject | any): DataSetObjectsResponse;
}

declare class CloudScriptExecuteCloudScriptResult { 
	APIRequestsIssued: number;
	Error: PlayFabJsonObject;
	ExecutionTimeSeconds: number;
	FunctionName: string;
	FunctionResult: PlayFabJsonObject;
	FunctionResultTooLarge: boolean;
	HttpRequestsIssued: number;
	Logs: PlayFabJsonObject[];
	LogsTooLarge: boolean;
	MemoryConsumedBytes: number;
	ProcessorTimeSeconds: number;
	Revision: number;
	clone() : CloudScriptExecuteCloudScriptResult;
	static C(Other: UObject | any): CloudScriptExecuteCloudScriptResult;
}

declare class ClientAcceptTradeResponse { 
	Trade: PlayFabJsonObject;
	clone() : ClientAcceptTradeResponse;
	static C(Other: UObject | any): ClientAcceptTradeResponse;
}

declare class ClientAddFriendResult { 
	Created: boolean;
	clone() : ClientAddFriendResult;
	static C(Other: UObject | any): ClientAddFriendResult;
}

declare class ClientAddGenericIDResult { 
	clone() : ClientAddGenericIDResult;
	static C(Other: UObject | any): ClientAddGenericIDResult;
}

declare class ClientAddOrUpdateContactEmailResult { 
	clone() : ClientAddOrUpdateContactEmailResult;
	static C(Other: UObject | any): ClientAddOrUpdateContactEmailResult;
}

declare class ClientAddSharedGroupMembersResult { 
	clone() : ClientAddSharedGroupMembersResult;
	static C(Other: UObject | any): ClientAddSharedGroupMembersResult;
}

declare class ClientAddUsernamePasswordResult { 
	UserName: string;
	clone() : ClientAddUsernamePasswordResult;
	static C(Other: UObject | any): ClientAddUsernamePasswordResult;
}

declare class ClientAndroidDevicePushNotificationRegistrationResult { 
	clone() : ClientAndroidDevicePushNotificationRegistrationResult;
	static C(Other: UObject | any): ClientAndroidDevicePushNotificationRegistrationResult;
}

declare class ClientAttributeInstallResult { 
	clone() : ClientAttributeInstallResult;
	static C(Other: UObject | any): ClientAttributeInstallResult;
}

declare class ClientCancelTradeResponse { 
	Trade: PlayFabJsonObject;
	clone() : ClientCancelTradeResponse;
	static C(Other: UObject | any): ClientCancelTradeResponse;
}

declare class ClientConfirmPurchaseResult { 
	Items: PlayFabJsonObject[];
	OrderId: string;
	PurchaseDate: string;
	clone() : ClientConfirmPurchaseResult;
	static C(Other: UObject | any): ClientConfirmPurchaseResult;
}

declare class ClientConsumeItemResult { 
	ItemInstanceId: string;
	RemainingUses: number;
	clone() : ClientConsumeItemResult;
	static C(Other: UObject | any): ClientConsumeItemResult;
}

declare class ClientConsumePSNEntitlementsResult { 
	ItemsGranted: PlayFabJsonObject[];
	clone() : ClientConsumePSNEntitlementsResult;
	static C(Other: UObject | any): ClientConsumePSNEntitlementsResult;
}

declare class ClientConsumeXboxEntitlementsResult { 
	Items: PlayFabJsonObject[];
	clone() : ClientConsumeXboxEntitlementsResult;
	static C(Other: UObject | any): ClientConsumeXboxEntitlementsResult;
}

declare class ClientCreateSharedGroupResult { 
	SharedGroupId: string;
	clone() : ClientCreateSharedGroupResult;
	static C(Other: UObject | any): ClientCreateSharedGroupResult;
}

declare class ClientCurrentGamesResult { 
	GameCount: number;
	Games: PlayFabJsonObject[];
	PlayerCount: number;
	clone() : ClientCurrentGamesResult;
	static C(Other: UObject | any): ClientCurrentGamesResult;
}

declare class ClientEmptyResponse { 
	clone() : ClientEmptyResponse;
	static C(Other: UObject | any): ClientEmptyResponse;
}

declare class ClientEmptyResult { 
	clone() : ClientEmptyResult;
	static C(Other: UObject | any): ClientEmptyResult;
}

declare class ClientExecuteCloudScriptResult { 
	APIRequestsIssued: number;
	Error: PlayFabJsonObject;
	ExecutionTimeSeconds: number;
	FunctionName: string;
	FunctionResult: PlayFabJsonObject;
	FunctionResultTooLarge: boolean;
	HttpRequestsIssued: number;
	Logs: PlayFabJsonObject[];
	LogsTooLarge: boolean;
	MemoryConsumedBytes: number;
	ProcessorTimeSeconds: number;
	Revision: number;
	clone() : ClientExecuteCloudScriptResult;
	static C(Other: UObject | any): ClientExecuteCloudScriptResult;
}

declare class ClientGameServerRegionsResult { 
	Regions: PlayFabJsonObject[];
	clone() : ClientGameServerRegionsResult;
	static C(Other: UObject | any): ClientGameServerRegionsResult;
}

declare class ClientGetAccountInfoResult { 
	AccountInfo: PlayFabJsonObject;
	clone() : ClientGetAccountInfoResult;
	static C(Other: UObject | any): ClientGetAccountInfoResult;
}

declare class ClientGetCatalogItemsResult { 
	Catalog: PlayFabJsonObject[];
	clone() : ClientGetCatalogItemsResult;
	static C(Other: UObject | any): ClientGetCatalogItemsResult;
}

declare class ClientGetCharacterDataResult { 
	CharacterId: string;
	Data: PlayFabJsonObject;
	DataVersion: number;
	clone() : ClientGetCharacterDataResult;
	static C(Other: UObject | any): ClientGetCharacterDataResult;
}

declare class ClientGetCharacterInventoryResult { 
	CharacterId: string;
	Inventory: PlayFabJsonObject[];
	VirtualCurrency: PlayFabJsonObject;
	VirtualCurrencyRechargeTimes: PlayFabJsonObject;
	clone() : ClientGetCharacterInventoryResult;
	static C(Other: UObject | any): ClientGetCharacterInventoryResult;
}

declare class ClientGetCharacterLeaderboardResult { 
	Leaderboard: PlayFabJsonObject[];
	clone() : ClientGetCharacterLeaderboardResult;
	static C(Other: UObject | any): ClientGetCharacterLeaderboardResult;
}

declare class ClientGetCharacterStatisticsResult { 
	CharacterStatistics: PlayFabJsonObject;
	clone() : ClientGetCharacterStatisticsResult;
	static C(Other: UObject | any): ClientGetCharacterStatisticsResult;
}

declare class ClientGetContentDownloadUrlResult { 
	URL: string;
	clone() : ClientGetContentDownloadUrlResult;
	static C(Other: UObject | any): ClientGetContentDownloadUrlResult;
}

declare class ClientGetFriendLeaderboardAroundPlayerResult { 
	Leaderboard: PlayFabJsonObject[];
	NextReset: string;
	Version: number;
	clone() : ClientGetFriendLeaderboardAroundPlayerResult;
	static C(Other: UObject | any): ClientGetFriendLeaderboardAroundPlayerResult;
}

declare class ClientGetFriendsListResult { 
	Friends: PlayFabJsonObject[];
	clone() : ClientGetFriendsListResult;
	static C(Other: UObject | any): ClientGetFriendsListResult;
}

declare class ClientGetLeaderboardAroundCharacterResult { 
	Leaderboard: PlayFabJsonObject[];
	clone() : ClientGetLeaderboardAroundCharacterResult;
	static C(Other: UObject | any): ClientGetLeaderboardAroundCharacterResult;
}

declare class ClientGetLeaderboardAroundPlayerResult { 
	Leaderboard: PlayFabJsonObject[];
	NextReset: string;
	Version: number;
	clone() : ClientGetLeaderboardAroundPlayerResult;
	static C(Other: UObject | any): ClientGetLeaderboardAroundPlayerResult;
}

declare class ClientGetLeaderboardForUsersCharactersResult { 
	Leaderboard: PlayFabJsonObject[];
	clone() : ClientGetLeaderboardForUsersCharactersResult;
	static C(Other: UObject | any): ClientGetLeaderboardForUsersCharactersResult;
}

declare class ClientGetLeaderboardResult { 
	Leaderboard: PlayFabJsonObject[];
	NextReset: string;
	Version: number;
	clone() : ClientGetLeaderboardResult;
	static C(Other: UObject | any): ClientGetLeaderboardResult;
}

declare class ClientGetPaymentTokenResult { 
	OrderId: string;
	ProviderToken: string;
	clone() : ClientGetPaymentTokenResult;
	static C(Other: UObject | any): ClientGetPaymentTokenResult;
}

declare class ClientGetPhotonAuthenticationTokenResult { 
	PhotonCustomAuthenticationToken: string;
	clone() : ClientGetPhotonAuthenticationTokenResult;
	static C(Other: UObject | any): ClientGetPhotonAuthenticationTokenResult;
}

declare class ClientGetPlayerCombinedInfoResult { 
	InfoResultPayload: PlayFabJsonObject;
	PlayFabId: string;
	clone() : ClientGetPlayerCombinedInfoResult;
	static C(Other: UObject | any): ClientGetPlayerCombinedInfoResult;
}

declare class ClientGetPlayerProfileResult { 
	PlayerProfile: PlayFabJsonObject;
	clone() : ClientGetPlayerProfileResult;
	static C(Other: UObject | any): ClientGetPlayerProfileResult;
}

declare class ClientGetPlayerSegmentsResult { 
	Segments: PlayFabJsonObject[];
	clone() : ClientGetPlayerSegmentsResult;
	static C(Other: UObject | any): ClientGetPlayerSegmentsResult;
}

declare class ClientGetPlayerStatisticsResult { 
	Statistics: PlayFabJsonObject[];
	clone() : ClientGetPlayerStatisticsResult;
	static C(Other: UObject | any): ClientGetPlayerStatisticsResult;
}

declare class ClientGetPlayerStatisticVersionsResult { 
	StatisticVersions: PlayFabJsonObject[];
	clone() : ClientGetPlayerStatisticVersionsResult;
	static C(Other: UObject | any): ClientGetPlayerStatisticVersionsResult;
}

declare class ClientGetPlayerTagsResult { 
	PlayFabId: string;
	Tags: string;
	clone() : ClientGetPlayerTagsResult;
	static C(Other: UObject | any): ClientGetPlayerTagsResult;
}

declare class ClientGetPlayerTradesResponse { 
	AcceptedTrades: PlayFabJsonObject[];
	OpenedTrades: PlayFabJsonObject[];
	clone() : ClientGetPlayerTradesResponse;
	static C(Other: UObject | any): ClientGetPlayerTradesResponse;
}

declare class ClientGetPlayFabIDsFromFacebookIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromFacebookIDsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromFacebookIDsResult;
}

declare class ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult;
}

declare class ClientGetPlayFabIDsFromGameCenterIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromGameCenterIDsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromGameCenterIDsResult;
}

declare class ClientGetPlayFabIDsFromGenericIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromGenericIDsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromGenericIDsResult;
}

declare class ClientGetPlayFabIDsFromGoogleIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromGoogleIDsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromGoogleIDsResult;
}

declare class ClientGetPlayFabIDsFromKongregateIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromKongregateIDsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromKongregateIDsResult;
}

declare class ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
}

declare class ClientGetPlayFabIDsFromPSNAccountIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromPSNAccountIDsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromPSNAccountIDsResult;
}

declare class ClientGetPlayFabIDsFromSteamIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromSteamIDsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromSteamIDsResult;
}

declare class ClientGetPlayFabIDsFromTwitchIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromTwitchIDsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromTwitchIDsResult;
}

declare class ClientGetPlayFabIDsFromXboxLiveIDsResult { 
	Data: PlayFabJsonObject[];
	clone() : ClientGetPlayFabIDsFromXboxLiveIDsResult;
	static C(Other: UObject | any): ClientGetPlayFabIDsFromXboxLiveIDsResult;
}

declare class ClientGetPublisherDataResult { 
	Data: PlayFabJsonObject;
	clone() : ClientGetPublisherDataResult;
	static C(Other: UObject | any): ClientGetPublisherDataResult;
}

declare class ClientGetPurchaseResult { 
	OrderId: string;
	PaymentProvider: string;
	PurchaseDate: string;
	TransactionId: string;
	TransactionStatus: string;
	clone() : ClientGetPurchaseResult;
	static C(Other: UObject | any): ClientGetPurchaseResult;
}

declare class ClientGetSharedGroupDataResult { 
	Data: PlayFabJsonObject;
	Members: string;
	clone() : ClientGetSharedGroupDataResult;
	static C(Other: UObject | any): ClientGetSharedGroupDataResult;
}

declare type EPfSourceType = 'pfenum_Admin' | 'pfenum_BackEnd' | 'pfenum_GameClient' | 'pfenum_GameServer' | 'pfenum_Partner' | 'pfenum_Custom' | 'pfenum_API' | 'pfenum_MAX';
declare var EPfSourceType : { pfenum_Admin:'pfenum_Admin',pfenum_BackEnd:'pfenum_BackEnd',pfenum_GameClient:'pfenum_GameClient',pfenum_GameServer:'pfenum_GameServer',pfenum_Partner:'pfenum_Partner',pfenum_Custom:'pfenum_Custom',pfenum_API:'pfenum_API',pfenum_MAX:'pfenum_MAX', };
declare class ClientGetStoreItemsResult { 
	CatalogVersion: string;
	MarketingData: PlayFabJsonObject;
	Source: EPfSourceType;
	Store: PlayFabJsonObject[];
	StoreId: string;
	clone() : ClientGetStoreItemsResult;
	static C(Other: UObject | any): ClientGetStoreItemsResult;
}

declare class ClientGetTimeResult { 
	Time: string;
	clone() : ClientGetTimeResult;
	static C(Other: UObject | any): ClientGetTimeResult;
}

declare class ClientGetTitleDataResult { 
	Data: PlayFabJsonObject;
	clone() : ClientGetTitleDataResult;
	static C(Other: UObject | any): ClientGetTitleDataResult;
}

declare class ClientGetTitleNewsResult { 
	News: PlayFabJsonObject[];
	clone() : ClientGetTitleNewsResult;
	static C(Other: UObject | any): ClientGetTitleNewsResult;
}

declare class ClientGetTitlePublicKeyResult { 
	RSAPublicKey: string;
	clone() : ClientGetTitlePublicKeyResult;
	static C(Other: UObject | any): ClientGetTitlePublicKeyResult;
}

declare class ClientGetTradeStatusResponse { 
	Trade: PlayFabJsonObject;
	clone() : ClientGetTradeStatusResponse;
	static C(Other: UObject | any): ClientGetTradeStatusResponse;
}

declare class ClientGetUserDataResult { 
	Data: PlayFabJsonObject;
	DataVersion: number;
	clone() : ClientGetUserDataResult;
	static C(Other: UObject | any): ClientGetUserDataResult;
}

declare class ClientGetUserInventoryResult { 
	Inventory: PlayFabJsonObject[];
	VirtualCurrency: PlayFabJsonObject;
	VirtualCurrencyRechargeTimes: PlayFabJsonObject;
	clone() : ClientGetUserInventoryResult;
	static C(Other: UObject | any): ClientGetUserInventoryResult;
}

declare class ClientGetWindowsHelloChallengeResponse { 
	Challenge: string;
	clone() : ClientGetWindowsHelloChallengeResponse;
	static C(Other: UObject | any): ClientGetWindowsHelloChallengeResponse;
}

declare class ClientGrantCharacterToUserResult { 
	CharacterId: string;
	CharacterType: string;
	Result: boolean;
	clone() : ClientGrantCharacterToUserResult;
	static C(Other: UObject | any): ClientGrantCharacterToUserResult;
}

declare class ClientLinkAndroidDeviceIDResult { 
	clone() : ClientLinkAndroidDeviceIDResult;
	static C(Other: UObject | any): ClientLinkAndroidDeviceIDResult;
}

declare class ClientLinkCustomIDResult { 
	clone() : ClientLinkCustomIDResult;
	static C(Other: UObject | any): ClientLinkCustomIDResult;
}

declare class ClientLinkFacebookAccountResult { 
	clone() : ClientLinkFacebookAccountResult;
	static C(Other: UObject | any): ClientLinkFacebookAccountResult;
}

declare class ClientLinkFacebookInstantGamesIdResult { 
	clone() : ClientLinkFacebookInstantGamesIdResult;
	static C(Other: UObject | any): ClientLinkFacebookInstantGamesIdResult;
}

declare class ClientLinkGameCenterAccountResult { 
	clone() : ClientLinkGameCenterAccountResult;
	static C(Other: UObject | any): ClientLinkGameCenterAccountResult;
}

declare class ClientLinkGoogleAccountResult { 
	clone() : ClientLinkGoogleAccountResult;
	static C(Other: UObject | any): ClientLinkGoogleAccountResult;
}

declare class ClientLinkIOSDeviceIDResult { 
	clone() : ClientLinkIOSDeviceIDResult;
	static C(Other: UObject | any): ClientLinkIOSDeviceIDResult;
}

declare class ClientLinkKongregateAccountResult { 
	clone() : ClientLinkKongregateAccountResult;
	static C(Other: UObject | any): ClientLinkKongregateAccountResult;
}

declare class ClientLinkNintendoSwitchDeviceIdResult { 
	clone() : ClientLinkNintendoSwitchDeviceIdResult;
	static C(Other: UObject | any): ClientLinkNintendoSwitchDeviceIdResult;
}

declare class ClientLinkPSNAccountResult { 
	clone() : ClientLinkPSNAccountResult;
	static C(Other: UObject | any): ClientLinkPSNAccountResult;
}

declare class ClientLinkSteamAccountResult { 
	clone() : ClientLinkSteamAccountResult;
	static C(Other: UObject | any): ClientLinkSteamAccountResult;
}

declare class ClientLinkTwitchAccountResult { 
	clone() : ClientLinkTwitchAccountResult;
	static C(Other: UObject | any): ClientLinkTwitchAccountResult;
}

declare class ClientLinkWindowsHelloAccountResponse { 
	clone() : ClientLinkWindowsHelloAccountResponse;
	static C(Other: UObject | any): ClientLinkWindowsHelloAccountResponse;
}

declare class ClientLinkXboxAccountResult { 
	clone() : ClientLinkXboxAccountResult;
	static C(Other: UObject | any): ClientLinkXboxAccountResult;
}

declare class ClientListUsersCharactersResult { 
	Characters: PlayFabJsonObject[];
	clone() : ClientListUsersCharactersResult;
	static C(Other: UObject | any): ClientListUsersCharactersResult;
}

declare class ClientLoginResult { 
	EntityToken: PlayFabJsonObject;
	InfoResultPayload: PlayFabJsonObject;
	LastLoginTime: string;
	NewlyCreated: boolean;
	PlayFabId: string;
	SessionTicket: string;
	SettingsForUser: PlayFabJsonObject;
	clone() : ClientLoginResult;
	static C(Other: UObject | any): ClientLoginResult;
}

declare type EMatchmakeStatus = 'pfenum_Complete' | 'pfenum_Waiting' | 'pfenum_GameNotFound' | 'pfenum_NoAvailableSlots' | 'pfenum_SessionClosed' | 'pfenum_MAX';
declare var EMatchmakeStatus : { pfenum_Complete:'pfenum_Complete',pfenum_Waiting:'pfenum_Waiting',pfenum_GameNotFound:'pfenum_GameNotFound',pfenum_NoAvailableSlots:'pfenum_NoAvailableSlots',pfenum_SessionClosed:'pfenum_SessionClosed',pfenum_MAX:'pfenum_MAX', };
declare class ClientMatchmakeResult { 
	Expires: string;
	LobbyId: string;
	PollWaitTimeMS: number;
	ServerIPV4Address: string;
	ServerIPV6Address: string;
	ServerPort: number;
	ServerPublicDNSName: string;
	Status: EMatchmakeStatus;
	Ticket: string;
	clone() : ClientMatchmakeResult;
	static C(Other: UObject | any): ClientMatchmakeResult;
}

declare class ClientModifyUserVirtualCurrencyResult { 
	Balance: number;
	BalanceChange: number;
	PlayFabId: string;
	VirtualCurrency: string;
	clone() : ClientModifyUserVirtualCurrencyResult;
	static C(Other: UObject | any): ClientModifyUserVirtualCurrencyResult;
}

declare class ClientOpenTradeResponse { 
	Trade: PlayFabJsonObject;
	clone() : ClientOpenTradeResponse;
	static C(Other: UObject | any): ClientOpenTradeResponse;
}

declare type ETransactionStatus = 'pfenum_CreateCart' | 'pfenum_Init' | 'pfenum_Approved' | 'pfenum_Succeeded' | 'pfenum_FailedByProvider' | 'pfenum_DisputePending' | 'pfenum_RefundPending' | 'pfenum_Refunded' | 'pfenum_RefundFailed' | 'pfenum_ChargedBack' | 'pfenum_FailedByUber' | 'pfenum_FailedByPlayFab' | 'pfenum_Revoked' | 'pfenum_TradePending' | 'pfenum_Traded' | 'pfenum_Upgraded' | 'pfenum_StackPending' | 'pfenum_Stacked' | 'pfenum_Other' | 'pfenum_Failed' | 'pfenum_MAX';
declare var ETransactionStatus : { pfenum_CreateCart:'pfenum_CreateCart',pfenum_Init:'pfenum_Init',pfenum_Approved:'pfenum_Approved',pfenum_Succeeded:'pfenum_Succeeded',pfenum_FailedByProvider:'pfenum_FailedByProvider',pfenum_DisputePending:'pfenum_DisputePending',pfenum_RefundPending:'pfenum_RefundPending',pfenum_Refunded:'pfenum_Refunded',pfenum_RefundFailed:'pfenum_RefundFailed',pfenum_ChargedBack:'pfenum_ChargedBack',pfenum_FailedByUber:'pfenum_FailedByUber',pfenum_FailedByPlayFab:'pfenum_FailedByPlayFab',pfenum_Revoked:'pfenum_Revoked',pfenum_TradePending:'pfenum_TradePending',pfenum_Traded:'pfenum_Traded',pfenum_Upgraded:'pfenum_Upgraded',pfenum_StackPending:'pfenum_StackPending',pfenum_Stacked:'pfenum_Stacked',pfenum_Other:'pfenum_Other',pfenum_Failed:'pfenum_Failed',pfenum_MAX:'pfenum_MAX', };
declare class ClientPayForPurchaseResult { 
	CreditApplied: number;
	OrderId: string;
	ProviderData: string;
	ProviderToken: string;
	PurchaseConfirmationPageURL: string;
	PurchaseCurrency: string;
	PurchasePrice: number;
	Status: ETransactionStatus;
	VCAmount: PlayFabJsonObject;
	VirtualCurrency: PlayFabJsonObject;
	clone() : ClientPayForPurchaseResult;
	static C(Other: UObject | any): ClientPayForPurchaseResult;
}

declare class ClientPurchaseItemResult { 
	Items: PlayFabJsonObject[];
	clone() : ClientPurchaseItemResult;
	static C(Other: UObject | any): ClientPurchaseItemResult;
}

declare class ClientRedeemCouponResult { 
	GrantedItems: PlayFabJsonObject[];
	clone() : ClientRedeemCouponResult;
	static C(Other: UObject | any): ClientRedeemCouponResult;
}

declare class ClientRegisterForIOSPushNotificationResult { 
	clone() : ClientRegisterForIOSPushNotificationResult;
	static C(Other: UObject | any): ClientRegisterForIOSPushNotificationResult;
}

declare class ClientRegisterPlayFabUserResult { 
	EntityToken: PlayFabJsonObject;
	PlayFabId: string;
	SessionTicket: string;
	SettingsForUser: PlayFabJsonObject;
	UserName: string;
	clone() : ClientRegisterPlayFabUserResult;
	static C(Other: UObject | any): ClientRegisterPlayFabUserResult;
}

declare class ClientRemoveContactEmailResult { 
	clone() : ClientRemoveContactEmailResult;
	static C(Other: UObject | any): ClientRemoveContactEmailResult;
}

declare class ClientRemoveFriendResult { 
	clone() : ClientRemoveFriendResult;
	static C(Other: UObject | any): ClientRemoveFriendResult;
}

declare class ClientRemoveGenericIDResult { 
	clone() : ClientRemoveGenericIDResult;
	static C(Other: UObject | any): ClientRemoveGenericIDResult;
}

declare class ClientRemoveSharedGroupMembersResult { 
	clone() : ClientRemoveSharedGroupMembersResult;
	static C(Other: UObject | any): ClientRemoveSharedGroupMembersResult;
}

declare class ClientReportPlayerClientResult { 
	SubmissionsRemaining: number;
	clone() : ClientReportPlayerClientResult;
	static C(Other: UObject | any): ClientReportPlayerClientResult;
}

declare class ClientRestoreIOSPurchasesResult { 
	clone() : ClientRestoreIOSPurchasesResult;
	static C(Other: UObject | any): ClientRestoreIOSPurchasesResult;
}

declare class ClientSendAccountRecoveryEmailResult { 
	clone() : ClientSendAccountRecoveryEmailResult;
	static C(Other: UObject | any): ClientSendAccountRecoveryEmailResult;
}

declare class ClientSetFriendTagsResult { 
	clone() : ClientSetFriendTagsResult;
	static C(Other: UObject | any): ClientSetFriendTagsResult;
}

declare class ClientSetPlayerSecretResult { 
	clone() : ClientSetPlayerSecretResult;
	static C(Other: UObject | any): ClientSetPlayerSecretResult;
}

declare class ClientStartGameResult { 
	Expires: string;
	LobbyId: string;
	Password: string;
	ServerIPV4Address: string;
	ServerIPV6Address: string;
	ServerPort: number;
	ServerPublicDNSName: string;
	Ticket: string;
	clone() : ClientStartGameResult;
	static C(Other: UObject | any): ClientStartGameResult;
}

declare class ClientStartPurchaseResult { 
	Contents: PlayFabJsonObject[];
	OrderId: string;
	PaymentOptions: PlayFabJsonObject[];
	VirtualCurrencyBalances: PlayFabJsonObject;
	clone() : ClientStartPurchaseResult;
	static C(Other: UObject | any): ClientStartPurchaseResult;
}

declare class ClientUnlinkAndroidDeviceIDResult { 
	clone() : ClientUnlinkAndroidDeviceIDResult;
	static C(Other: UObject | any): ClientUnlinkAndroidDeviceIDResult;
}

declare class ClientUnlinkCustomIDResult { 
	clone() : ClientUnlinkCustomIDResult;
	static C(Other: UObject | any): ClientUnlinkCustomIDResult;
}

declare class ClientUnlinkFacebookAccountResult { 
	clone() : ClientUnlinkFacebookAccountResult;
	static C(Other: UObject | any): ClientUnlinkFacebookAccountResult;
}

declare class ClientUnlinkFacebookInstantGamesIdResult { 
	clone() : ClientUnlinkFacebookInstantGamesIdResult;
	static C(Other: UObject | any): ClientUnlinkFacebookInstantGamesIdResult;
}

declare class ClientUnlinkGameCenterAccountResult { 
	clone() : ClientUnlinkGameCenterAccountResult;
	static C(Other: UObject | any): ClientUnlinkGameCenterAccountResult;
}

declare class ClientUnlinkGoogleAccountResult { 
	clone() : ClientUnlinkGoogleAccountResult;
	static C(Other: UObject | any): ClientUnlinkGoogleAccountResult;
}

declare class ClientUnlinkIOSDeviceIDResult { 
	clone() : ClientUnlinkIOSDeviceIDResult;
	static C(Other: UObject | any): ClientUnlinkIOSDeviceIDResult;
}

declare class ClientUnlinkKongregateAccountResult { 
	clone() : ClientUnlinkKongregateAccountResult;
	static C(Other: UObject | any): ClientUnlinkKongregateAccountResult;
}

declare class ClientUnlinkNintendoSwitchDeviceIdResult { 
	clone() : ClientUnlinkNintendoSwitchDeviceIdResult;
	static C(Other: UObject | any): ClientUnlinkNintendoSwitchDeviceIdResult;
}

declare class ClientUnlinkPSNAccountResult { 
	clone() : ClientUnlinkPSNAccountResult;
	static C(Other: UObject | any): ClientUnlinkPSNAccountResult;
}

declare class ClientUnlinkSteamAccountResult { 
	clone() : ClientUnlinkSteamAccountResult;
	static C(Other: UObject | any): ClientUnlinkSteamAccountResult;
}

declare class ClientUnlinkTwitchAccountResult { 
	clone() : ClientUnlinkTwitchAccountResult;
	static C(Other: UObject | any): ClientUnlinkTwitchAccountResult;
}

declare class ClientUnlinkWindowsHelloAccountResponse { 
	clone() : ClientUnlinkWindowsHelloAccountResponse;
	static C(Other: UObject | any): ClientUnlinkWindowsHelloAccountResponse;
}

declare class ClientUnlinkXboxAccountResult { 
	clone() : ClientUnlinkXboxAccountResult;
	static C(Other: UObject | any): ClientUnlinkXboxAccountResult;
}

declare class ClientUnlockContainerItemResult { 
	GrantedItems: PlayFabJsonObject[];
	UnlockedItemInstanceId: string;
	UnlockedWithItemInstanceId: string;
	VirtualCurrency: PlayFabJsonObject;
	clone() : ClientUnlockContainerItemResult;
	static C(Other: UObject | any): ClientUnlockContainerItemResult;
}

declare class ClientUpdateCharacterDataResult { 
	DataVersion: number;
	clone() : ClientUpdateCharacterDataResult;
	static C(Other: UObject | any): ClientUpdateCharacterDataResult;
}

declare class ClientUpdateCharacterStatisticsResult { 
	clone() : ClientUpdateCharacterStatisticsResult;
	static C(Other: UObject | any): ClientUpdateCharacterStatisticsResult;
}

declare class ClientUpdatePlayerStatisticsResult { 
	clone() : ClientUpdatePlayerStatisticsResult;
	static C(Other: UObject | any): ClientUpdatePlayerStatisticsResult;
}

declare class ClientUpdateSharedGroupDataResult { 
	clone() : ClientUpdateSharedGroupDataResult;
	static C(Other: UObject | any): ClientUpdateSharedGroupDataResult;
}

declare class ClientUpdateUserDataResult { 
	DataVersion: number;
	clone() : ClientUpdateUserDataResult;
	static C(Other: UObject | any): ClientUpdateUserDataResult;
}

declare class ClientUpdateUserTitleDisplayNameResult { 
	DisplayName: string;
	clone() : ClientUpdateUserTitleDisplayNameResult;
	static C(Other: UObject | any): ClientUpdateUserTitleDisplayNameResult;
}

declare class ClientValidateAmazonReceiptResult { 
	clone() : ClientValidateAmazonReceiptResult;
	static C(Other: UObject | any): ClientValidateAmazonReceiptResult;
}

declare class ClientValidateGooglePlayPurchaseResult { 
	clone() : ClientValidateGooglePlayPurchaseResult;
	static C(Other: UObject | any): ClientValidateGooglePlayPurchaseResult;
}

declare class ClientValidateIOSReceiptResult { 
	clone() : ClientValidateIOSReceiptResult;
	static C(Other: UObject | any): ClientValidateIOSReceiptResult;
}

declare class ClientValidateWindowsReceiptResult { 
	clone() : ClientValidateWindowsReceiptResult;
	static C(Other: UObject | any): ClientValidateWindowsReceiptResult;
}

declare class ClientWriteEventResponse { 
	EventId: string;
	clone() : ClientWriteEventResponse;
	static C(Other: UObject | any): ClientWriteEventResponse;
}

declare class AuthenticationGetEntityTokenResponse { 
	Entity: PlayFabJsonObject;
	EntityToken: string;
	TokenExpiration: string;
	clone() : AuthenticationGetEntityTokenResponse;
	static C(Other: UObject | any): AuthenticationGetEntityTokenResponse;
}

declare class AdminAddNewsResult { 
	NewsId: string;
	clone() : AdminAddNewsResult;
	static C(Other: UObject | any): AdminAddNewsResult;
}

declare class AdminAddPlayerTagResult { 
	clone() : AdminAddPlayerTagResult;
	static C(Other: UObject | any): AdminAddPlayerTagResult;
}

declare type EGameBuildStatus = 'pfenum_Available' | 'pfenum_Validating' | 'pfenum_InvalidBuildPackage' | 'pfenum_Processing' | 'pfenum_FailedToProcess' | 'pfenum_MAX';
declare var EGameBuildStatus : { pfenum_Available:'pfenum_Available',pfenum_Validating:'pfenum_Validating',pfenum_InvalidBuildPackage:'pfenum_InvalidBuildPackage',pfenum_Processing:'pfenum_Processing',pfenum_FailedToProcess:'pfenum_FailedToProcess',pfenum_MAX:'pfenum_MAX', };
declare class AdminAddServerBuildResult { 
	ActiveRegions: string;
	BuildId: string;
	CommandLineTemplate: string;
	Comment: string;
	ExecutablePath: string;
	MaxGamesPerHost: number;
	MinFreeGameSlots: number;
	Status: EGameBuildStatus;
	Timestamp: string;
	TitleId: string;
	clone() : AdminAddServerBuildResult;
	static C(Other: UObject | any): AdminAddServerBuildResult;
}

declare class AdminBanUsersResult { 
	BanData: PlayFabJsonObject[];
	clone() : AdminBanUsersResult;
	static C(Other: UObject | any): AdminBanUsersResult;
}

declare class AdminBlankResult { 
	clone() : AdminBlankResult;
	static C(Other: UObject | any): AdminBlankResult;
}

declare class AdminCheckLimitedEditionItemAvailabilityResult { 
	Amount: number;
	clone() : AdminCheckLimitedEditionItemAvailabilityResult;
	static C(Other: UObject | any): AdminCheckLimitedEditionItemAvailabilityResult;
}

declare class AdminCreatePlayerSharedSecretResult { 
	SecretKey: string;
	clone() : AdminCreatePlayerSharedSecretResult;
	static C(Other: UObject | any): AdminCreatePlayerSharedSecretResult;
}

declare class AdminCreatePlayerStatisticDefinitionResult { 
	Statistic: PlayFabJsonObject;
	clone() : AdminCreatePlayerStatisticDefinitionResult;
	static C(Other: UObject | any): AdminCreatePlayerStatisticDefinitionResult;
}

declare class AdminCreateTaskResult { 
	TaskId: string;
	clone() : AdminCreateTaskResult;
	static C(Other: UObject | any): AdminCreateTaskResult;
}

declare class AdminDeleteMasterPlayerAccountResult { 
	JobReceiptId: string;
	TitleIds: string;
	clone() : AdminDeleteMasterPlayerAccountResult;
	static C(Other: UObject | any): AdminDeleteMasterPlayerAccountResult;
}

declare class AdminDeletePlayerResult { 
	clone() : AdminDeletePlayerResult;
	static C(Other: UObject | any): AdminDeletePlayerResult;
}

declare class AdminDeletePlayerSharedSecretResult { 
	clone() : AdminDeletePlayerSharedSecretResult;
	static C(Other: UObject | any): AdminDeletePlayerSharedSecretResult;
}

declare class AdminDeleteStoreResult { 
	clone() : AdminDeleteStoreResult;
	static C(Other: UObject | any): AdminDeleteStoreResult;
}

declare class AdminDeleteTitleResult { 
	clone() : AdminDeleteTitleResult;
	static C(Other: UObject | any): AdminDeleteTitleResult;
}

declare class AdminEmptyResponse { 
	clone() : AdminEmptyResponse;
	static C(Other: UObject | any): AdminEmptyResponse;
}

declare class AdminExportMasterPlayerDataResult { 
	JobReceiptId: string;
	clone() : AdminExportMasterPlayerDataResult;
	static C(Other: UObject | any): AdminExportMasterPlayerDataResult;
}

declare class AdminGetActionsOnPlayersInSegmentTaskInstanceResult { 
	Parameter: PlayFabJsonObject;
	Summary: PlayFabJsonObject;
	clone() : AdminGetActionsOnPlayersInSegmentTaskInstanceResult;
	static C(Other: UObject | any): AdminGetActionsOnPlayersInSegmentTaskInstanceResult;
}

declare class AdminGetAllSegmentsResult { 
	Segments: PlayFabJsonObject[];
	clone() : AdminGetAllSegmentsResult;
	static C(Other: UObject | any): AdminGetAllSegmentsResult;
}

declare class AdminGetCatalogItemsResult { 
	Catalog: PlayFabJsonObject[];
	clone() : AdminGetCatalogItemsResult;
	static C(Other: UObject | any): AdminGetCatalogItemsResult;
}

declare class AdminGetCloudScriptRevisionResult { 
	CreatedAt: string;
	Files: PlayFabJsonObject[];
	IsPublished: boolean;
	Revision: number;
	Version: number;
	clone() : AdminGetCloudScriptRevisionResult;
	static C(Other: UObject | any): AdminGetCloudScriptRevisionResult;
}

declare class AdminGetCloudScriptTaskInstanceResult { 
	Parameter: PlayFabJsonObject;
	Summary: PlayFabJsonObject;
	clone() : AdminGetCloudScriptTaskInstanceResult;
	static C(Other: UObject | any): AdminGetCloudScriptTaskInstanceResult;
}

declare class AdminGetCloudScriptVersionsResult { 
	Versions: PlayFabJsonObject[];
	clone() : AdminGetCloudScriptVersionsResult;
	static C(Other: UObject | any): AdminGetCloudScriptVersionsResult;
}

declare class AdminGetContentListResult { 
	Contents: PlayFabJsonObject[];
	ItemCount: number;
	TotalSize: number;
	clone() : AdminGetContentListResult;
	static C(Other: UObject | any): AdminGetContentListResult;
}

declare class AdminGetContentUploadUrlResult { 
	URL: string;
	clone() : AdminGetContentUploadUrlResult;
	static C(Other: UObject | any): AdminGetContentUploadUrlResult;
}

declare class AdminGetDataReportResult { 
	DownloadUrl: string;
	clone() : AdminGetDataReportResult;
	static C(Other: UObject | any): AdminGetDataReportResult;
}

declare type ERegion = 'pfenum_USCentral' | 'pfenum_USEast' | 'pfenum_EUWest' | 'pfenum_Singapore' | 'pfenum_Japan' | 'pfenum_Brazil' | 'pfenum_Australia' | 'pfenum_MAX';
declare var ERegion : { pfenum_USCentral:'pfenum_USCentral',pfenum_USEast:'pfenum_USEast',pfenum_EUWest:'pfenum_EUWest',pfenum_Singapore:'pfenum_Singapore',pfenum_Japan:'pfenum_Japan',pfenum_Brazil:'pfenum_Brazil',pfenum_Australia:'pfenum_Australia',pfenum_MAX:'pfenum_MAX', };
declare class AdminGetMatchmakerGameInfoResult { 
	BuildVersion: string;
	EndTime: string;
	LobbyId: string;
	Mode: string;
	Players: string;
	Region: ERegion;
	ServerIPV4Address: string;
	ServerIPV6Address: string;
	ServerPort: number;
	ServerPublicDNSName: string;
	StartTime: string;
	TitleId: string;
	clone() : AdminGetMatchmakerGameInfoResult;
	static C(Other: UObject | any): AdminGetMatchmakerGameInfoResult;
}

declare class AdminGetMatchmakerGameModesResult { 
	GameModes: PlayFabJsonObject[];
	clone() : AdminGetMatchmakerGameModesResult;
	static C(Other: UObject | any): AdminGetMatchmakerGameModesResult;
}

declare class AdminGetPlayedTitleListResult { 
	TitleIds: string;
	clone() : AdminGetPlayedTitleListResult;
	static C(Other: UObject | any): AdminGetPlayedTitleListResult;
}

declare class AdminGetPlayerIdFromAuthTokenResult { 
	PlayFabId: string;
	clone() : AdminGetPlayerIdFromAuthTokenResult;
	static C(Other: UObject | any): AdminGetPlayerIdFromAuthTokenResult;
}

declare class AdminGetPlayerProfileResult { 
	PlayerProfile: PlayFabJsonObject;
	clone() : AdminGetPlayerProfileResult;
	static C(Other: UObject | any): AdminGetPlayerProfileResult;
}

declare class AdminGetPlayerSegmentsResult { 
	Segments: PlayFabJsonObject[];
	clone() : AdminGetPlayerSegmentsResult;
	static C(Other: UObject | any): AdminGetPlayerSegmentsResult;
}

declare class AdminGetPlayerSharedSecretsResult { 
	SharedSecrets: PlayFabJsonObject[];
	clone() : AdminGetPlayerSharedSecretsResult;
	static C(Other: UObject | any): AdminGetPlayerSharedSecretsResult;
}

declare class AdminGetPlayersInSegmentResult { 
	ContinuationToken: string;
	PlayerProfiles: PlayFabJsonObject[];
	ProfilesInSegment: number;
	clone() : AdminGetPlayersInSegmentResult;
	static C(Other: UObject | any): AdminGetPlayersInSegmentResult;
}

declare class AdminGetPlayerStatisticDefinitionsResult { 
	Statistics: PlayFabJsonObject[];
	clone() : AdminGetPlayerStatisticDefinitionsResult;
	static C(Other: UObject | any): AdminGetPlayerStatisticDefinitionsResult;
}

declare class AdminGetPlayerStatisticVersionsResult { 
	StatisticVersions: PlayFabJsonObject[];
	clone() : AdminGetPlayerStatisticVersionsResult;
	static C(Other: UObject | any): AdminGetPlayerStatisticVersionsResult;
}

declare class AdminGetPlayerTagsResult { 
	PlayFabId: string;
	Tags: string;
	clone() : AdminGetPlayerTagsResult;
	static C(Other: UObject | any): AdminGetPlayerTagsResult;
}

declare class AdminGetPolicyResponse { 
	PolicyName: string;
	Statements: PlayFabJsonObject[];
	clone() : AdminGetPolicyResponse;
	static C(Other: UObject | any): AdminGetPolicyResponse;
}

declare class AdminGetPublisherDataResult { 
	Data: PlayFabJsonObject;
	clone() : AdminGetPublisherDataResult;
	static C(Other: UObject | any): AdminGetPublisherDataResult;
}

declare class AdminGetRandomResultTablesResult { 
	Tables: PlayFabJsonObject;
	clone() : AdminGetRandomResultTablesResult;
	static C(Other: UObject | any): AdminGetRandomResultTablesResult;
}

declare class AdminGetServerBuildInfoResult { 
	ActiveRegions: string;
	BuildId: string;
	Comment: string;
	ErrorMessage: string;
	MaxGamesPerHost: number;
	MinFreeGameSlots: number;
	Status: EGameBuildStatus;
	Timestamp: string;
	TitleId: string;
	clone() : AdminGetServerBuildInfoResult;
	static C(Other: UObject | any): AdminGetServerBuildInfoResult;
}

declare class AdminGetServerBuildUploadURLResult { 
	URL: string;
	clone() : AdminGetServerBuildUploadURLResult;
	static C(Other: UObject | any): AdminGetServerBuildUploadURLResult;
}

declare class AdminGetStoreItemsResult { 
	CatalogVersion: string;
	MarketingData: PlayFabJsonObject;
	Source: EPfSourceType;
	Store: PlayFabJsonObject[];
	StoreId: string;
	clone() : AdminGetStoreItemsResult;
	static C(Other: UObject | any): AdminGetStoreItemsResult;
}

declare class AdminGetTaskInstancesResult { 
	Summaries: PlayFabJsonObject[];
	clone() : AdminGetTaskInstancesResult;
	static C(Other: UObject | any): AdminGetTaskInstancesResult;
}

declare class AdminGetTasksResult { 
	Tasks: PlayFabJsonObject[];
	clone() : AdminGetTasksResult;
	static C(Other: UObject | any): AdminGetTasksResult;
}

declare class AdminGetTitleDataResult { 
	Data: PlayFabJsonObject;
	clone() : AdminGetTitleDataResult;
	static C(Other: UObject | any): AdminGetTitleDataResult;
}

declare class AdminGetUserBansResult { 
	BanData: PlayFabJsonObject[];
	clone() : AdminGetUserBansResult;
	static C(Other: UObject | any): AdminGetUserBansResult;
}

declare class AdminGetUserDataResult { 
	Data: PlayFabJsonObject;
	DataVersion: number;
	PlayFabId: string;
	clone() : AdminGetUserDataResult;
	static C(Other: UObject | any): AdminGetUserDataResult;
}

declare class AdminGetUserInventoryResult { 
	Inventory: PlayFabJsonObject[];
	PlayFabId: string;
	VirtualCurrency: PlayFabJsonObject;
	VirtualCurrencyRechargeTimes: PlayFabJsonObject;
	clone() : AdminGetUserInventoryResult;
	static C(Other: UObject | any): AdminGetUserInventoryResult;
}

declare class AdminGrantItemsToUsersResult { 
	ItemGrantResults: PlayFabJsonObject[];
	clone() : AdminGrantItemsToUsersResult;
	static C(Other: UObject | any): AdminGrantItemsToUsersResult;
}

declare class AdminIncrementLimitedEditionItemAvailabilityResult { 
	clone() : AdminIncrementLimitedEditionItemAvailabilityResult;
	static C(Other: UObject | any): AdminIncrementLimitedEditionItemAvailabilityResult;
}

declare class AdminIncrementPlayerStatisticVersionResult { 
	StatisticVersion: PlayFabJsonObject;
	clone() : AdminIncrementPlayerStatisticVersionResult;
	static C(Other: UObject | any): AdminIncrementPlayerStatisticVersionResult;
}

declare class AdminListBuildsResult { 
	Builds: PlayFabJsonObject[];
	clone() : AdminListBuildsResult;
	static C(Other: UObject | any): AdminListBuildsResult;
}

declare class AdminListVirtualCurrencyTypesResult { 
	VirtualCurrencies: PlayFabJsonObject[];
	clone() : AdminListVirtualCurrencyTypesResult;
	static C(Other: UObject | any): AdminListVirtualCurrencyTypesResult;
}

declare class AdminLookupUserAccountInfoResult { 
	UserInfo: PlayFabJsonObject;
	clone() : AdminLookupUserAccountInfoResult;
	static C(Other: UObject | any): AdminLookupUserAccountInfoResult;
}

declare class AdminModifyMatchmakerGameModesResult { 
	clone() : AdminModifyMatchmakerGameModesResult;
	static C(Other: UObject | any): AdminModifyMatchmakerGameModesResult;
}

declare class AdminModifyServerBuildResult { 
	ActiveRegions: string;
	BuildId: string;
	CommandLineTemplate: string;
	Comment: string;
	ExecutablePath: string;
	MaxGamesPerHost: number;
	MinFreeGameSlots: number;
	Status: EGameBuildStatus;
	Timestamp: string;
	TitleId: string;
	clone() : AdminModifyServerBuildResult;
	static C(Other: UObject | any): AdminModifyServerBuildResult;
}

declare class AdminModifyUserVirtualCurrencyResult { 
	Balance: number;
	BalanceChange: number;
	PlayFabId: string;
	VirtualCurrency: string;
	clone() : AdminModifyUserVirtualCurrencyResult;
	static C(Other: UObject | any): AdminModifyUserVirtualCurrencyResult;
}

declare class AdminRefundPurchaseResponse { 
	PurchaseStatus: string;
	clone() : AdminRefundPurchaseResponse;
	static C(Other: UObject | any): AdminRefundPurchaseResponse;
}

declare class AdminRemovePlayerTagResult { 
	clone() : AdminRemovePlayerTagResult;
	static C(Other: UObject | any): AdminRemovePlayerTagResult;
}

declare class AdminRemoveServerBuildResult { 
	clone() : AdminRemoveServerBuildResult;
	static C(Other: UObject | any): AdminRemoveServerBuildResult;
}

declare class AdminResetCharacterStatisticsResult { 
	clone() : AdminResetCharacterStatisticsResult;
	static C(Other: UObject | any): AdminResetCharacterStatisticsResult;
}

declare class AdminResetPasswordResult { 
	clone() : AdminResetPasswordResult;
	static C(Other: UObject | any): AdminResetPasswordResult;
}

declare class AdminResetUserStatisticsResult { 
	clone() : AdminResetUserStatisticsResult;
	static C(Other: UObject | any): AdminResetUserStatisticsResult;
}

declare class AdminResolvePurchaseDisputeResponse { 
	PurchaseStatus: string;
	clone() : AdminResolvePurchaseDisputeResponse;
	static C(Other: UObject | any): AdminResolvePurchaseDisputeResponse;
}

declare class AdminRevokeAllBansForUserResult { 
	BanData: PlayFabJsonObject[];
	clone() : AdminRevokeAllBansForUserResult;
	static C(Other: UObject | any): AdminRevokeAllBansForUserResult;
}

declare class AdminRevokeBansResult { 
	BanData: PlayFabJsonObject[];
	clone() : AdminRevokeBansResult;
	static C(Other: UObject | any): AdminRevokeBansResult;
}

declare class AdminRevokeInventoryItemsResult { 
	Errors: PlayFabJsonObject[];
	clone() : AdminRevokeInventoryItemsResult;
	static C(Other: UObject | any): AdminRevokeInventoryItemsResult;
}

declare class AdminRevokeInventoryResult { 
	clone() : AdminRevokeInventoryResult;
	static C(Other: UObject | any): AdminRevokeInventoryResult;
}

declare class AdminRunTaskResult { 
	TaskInstanceId: string;
	clone() : AdminRunTaskResult;
	static C(Other: UObject | any): AdminRunTaskResult;
}

declare class AdminSendAccountRecoveryEmailResult { 
	clone() : AdminSendAccountRecoveryEmailResult;
	static C(Other: UObject | any): AdminSendAccountRecoveryEmailResult;
}

declare class AdminSetPlayerSecretResult { 
	clone() : AdminSetPlayerSecretResult;
	static C(Other: UObject | any): AdminSetPlayerSecretResult;
}

declare class AdminSetPublishedRevisionResult { 
	clone() : AdminSetPublishedRevisionResult;
	static C(Other: UObject | any): AdminSetPublishedRevisionResult;
}

declare class AdminSetPublisherDataResult { 
	clone() : AdminSetPublisherDataResult;
	static C(Other: UObject | any): AdminSetPublisherDataResult;
}

declare class AdminSetTitleDataResult { 
	clone() : AdminSetTitleDataResult;
	static C(Other: UObject | any): AdminSetTitleDataResult;
}

declare class AdminSetupPushNotificationResult { 
	ARN: string;
	clone() : AdminSetupPushNotificationResult;
	static C(Other: UObject | any): AdminSetupPushNotificationResult;
}

declare class AdminUpdateBansResult { 
	BanData: PlayFabJsonObject[];
	clone() : AdminUpdateBansResult;
	static C(Other: UObject | any): AdminUpdateBansResult;
}

declare class AdminUpdateCatalogItemsResult { 
	clone() : AdminUpdateCatalogItemsResult;
	static C(Other: UObject | any): AdminUpdateCatalogItemsResult;
}

declare class AdminUpdateCloudScriptResult { 
	Revision: number;
	Version: number;
	clone() : AdminUpdateCloudScriptResult;
	static C(Other: UObject | any): AdminUpdateCloudScriptResult;
}

declare class AdminUpdatePlayerSharedSecretResult { 
	clone() : AdminUpdatePlayerSharedSecretResult;
	static C(Other: UObject | any): AdminUpdatePlayerSharedSecretResult;
}

declare class AdminUpdatePlayerStatisticDefinitionResult { 
	Statistic: PlayFabJsonObject;
	clone() : AdminUpdatePlayerStatisticDefinitionResult;
	static C(Other: UObject | any): AdminUpdatePlayerStatisticDefinitionResult;
}

declare class AdminUpdatePolicyResponse { 
	PolicyName: string;
	Statements: PlayFabJsonObject[];
	clone() : AdminUpdatePolicyResponse;
	static C(Other: UObject | any): AdminUpdatePolicyResponse;
}

declare class AdminUpdateRandomResultTablesResult { 
	clone() : AdminUpdateRandomResultTablesResult;
	static C(Other: UObject | any): AdminUpdateRandomResultTablesResult;
}

declare class AdminUpdateStoreItemsResult { 
	clone() : AdminUpdateStoreItemsResult;
	static C(Other: UObject | any): AdminUpdateStoreItemsResult;
}

declare class AdminUpdateUserDataResult { 
	DataVersion: number;
	clone() : AdminUpdateUserDataResult;
	static C(Other: UObject | any): AdminUpdateUserDataResult;
}

declare class AdminUpdateUserTitleDisplayNameResult { 
	DisplayName: string;
	clone() : AdminUpdateUserTitleDisplayNameResult;
	static C(Other: UObject | any): AdminUpdateUserTitleDisplayNameResult;
}

declare class PlayFabJsonObject extends UObject { 
	static Load(ResourceName: string): PlayFabJsonObject;
	static Find(Outer: UObject, ResourceName: string): PlayFabJsonObject;
	static GetDefaultObject(): PlayFabJsonObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabJsonObject;
	SetStringField(FieldName: string,StringValue: string): void;
	SetStringArrayField(FieldName: string,StringArray: string[]): void;
	SetObjectField(FieldName: string,JsonObject: PlayFabJsonObject): void;
	SetObjectArrayField(FieldName: string,ObjectArray: PlayFabJsonObject[]): void;
	SetNumberField(FieldName: string,Number: number): void;
	SetNumberArrayField(FieldName: string,NumberArray: number[]): void;
	SetFieldNull(FieldName: string): void;
	SetField(FieldName: string,JsonValue: PlayFabJsonValue): void;
	SetBoolField(FieldName: string,InValue: boolean): void;
	SetBoolArrayField(FieldName: string,BoolArray: boolean[]): void;
	SetArrayField(FieldName: string,inArray: PlayFabJsonValue[]): void;
	Reset(): void;
	RemoveField(FieldName: string): void;
	MergeJsonObject(InJsonObject: PlayFabJsonObject,Overwrite: boolean): void;
	HasField(FieldName: string): boolean;
	GetStringField(FieldName: string): string;
	GetStringArrayField(FieldName: string): string[];
	GetObjectField(FieldName: string): PlayFabJsonObject;
	GetObjectArrayField(FieldName: string): PlayFabJsonObject[];
	GetNumberField(FieldName: string): number;
	GetNumberArrayField(FieldName: string): number[];
	GetFieldNames(): string[];
	GetField(FieldName: string): PlayFabJsonValue;
	GetBoolField(FieldName: string): boolean;
	GetBoolArrayField(FieldName: string): boolean[];
	GetArrayField(FieldName: string): PlayFabJsonValue[];
	EncodeJson(): string;
	DecodeJson(JsonString: string): boolean;
	static ConstructJsonObject(WorldContextObject: UObject): PlayFabJsonObject;
	static C(Other: UObject | any): PlayFabJsonObject;
	decodeAddPlayerTagResultResponse(): ServerAddPlayerTagResult;
	decodeAddSharedGroupMembersResultResponse(): ServerAddSharedGroupMembersResult;
	decodeAuthenticateSessionTicketResultResponse(): ServerAuthenticateSessionTicketResult;
	decodeAwardSteamAchievementResultResponse(): ServerAwardSteamAchievementResult;
	decodeBanUsersResultResponse(): ServerBanUsersResult;
	decodeConsumeItemResultResponse(): ServerConsumeItemResult;
	decodeCreateSharedGroupResultResponse(): ServerCreateSharedGroupResult;
	decodeDeleteCharacterFromUserResultResponse(): ServerDeleteCharacterFromUserResult;
	decodeDeletePlayerResultResponse(): ServerDeletePlayerResult;
	decodeDeregisterGameResponseResponse(): ServerDeregisterGameResponse;
	decodeEmptyResponseResponse(): ServerEmptyResponse;
	decodeEvaluateRandomResultTableResultResponse(): ServerEvaluateRandomResultTableResult;
	decodeExecuteCloudScriptResultResponse(): ServerExecuteCloudScriptResult;
	decodeGetAllSegmentsResultResponse(): ServerGetAllSegmentsResult;
	decodeGetCatalogItemsResultResponse(): ServerGetCatalogItemsResult;
	decodeGetCharacterDataResultResponse(): ServerGetCharacterDataResult;
	decodeGetCharacterInventoryResultResponse(): ServerGetCharacterInventoryResult;
	decodeGetCharacterLeaderboardResultResponse(): ServerGetCharacterLeaderboardResult;
	decodeGetCharacterStatisticsResultResponse(): ServerGetCharacterStatisticsResult;
	decodeGetContentDownloadUrlResultResponse(): ServerGetContentDownloadUrlResult;
	decodeGetFriendsListResultResponse(): ServerGetFriendsListResult;
	decodeGetLeaderboardAroundCharacterResultResponse(): ServerGetLeaderboardAroundCharacterResult;
	decodeGetLeaderboardAroundUserResultResponse(): ServerGetLeaderboardAroundUserResult;
	decodeGetLeaderboardForUsersCharactersResultResponse(): ServerGetLeaderboardForUsersCharactersResult;
	decodeGetLeaderboardResultResponse(): ServerGetLeaderboardResult;
	decodeGetPlayerCombinedInfoResultResponse(): ServerGetPlayerCombinedInfoResult;
	decodeGetPlayerProfileResultResponse(): ServerGetPlayerProfileResult;
	decodeGetPlayerSegmentsResultResponse(): ServerGetPlayerSegmentsResult;
	decodeGetPlayersInSegmentResultResponse(): ServerGetPlayersInSegmentResult;
	decodeGetPlayerStatisticsResultResponse(): ServerGetPlayerStatisticsResult;
	decodeGetPlayerStatisticVersionsResultResponse(): ServerGetPlayerStatisticVersionsResult;
	decodeGetPlayerTagsResultResponse(): ServerGetPlayerTagsResult;
	decodeGetPlayFabIDsFromFacebookIDsResultResponse(): ServerGetPlayFabIDsFromFacebookIDsResult;
	decodeGetPlayFabIDsFromFacebookInstantGamesIdsResultResponse(): ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult;
	decodeGetPlayFabIDsFromNintendoSwitchDeviceIdsResultResponse(): ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
	decodeGetPlayFabIDsFromSteamIDsResultResponse(): ServerGetPlayFabIDsFromSteamIDsResult;
	decodeGetPlayFabIDsFromXboxLiveIDsResultResponse(): ServerGetPlayFabIDsFromXboxLiveIDsResult;
	decodeGetPublisherDataResultResponse(): ServerGetPublisherDataResult;
	decodeGetRandomResultTablesResultResponse(): ServerGetRandomResultTablesResult;
	decodeGetServerCustomIDsFromPlayFabIDsResultResponse(): ServerGetServerCustomIDsFromPlayFabIDsResult;
	decodeGetSharedGroupDataResultResponse(): ServerGetSharedGroupDataResult;
	decodeGetTimeResultResponse(): ServerGetTimeResult;
	decodeGetTitleDataResultResponse(): ServerGetTitleDataResult;
	decodeGetTitleNewsResultResponse(): ServerGetTitleNewsResult;
	decodeGetUserAccountInfoResultResponse(): ServerGetUserAccountInfoResult;
	decodeGetUserBansResultResponse(): ServerGetUserBansResult;
	decodeGetUserDataResultResponse(): ServerGetUserDataResult;
	decodeGetUserInventoryResultResponse(): ServerGetUserInventoryResult;
	decodeGrantCharacterToUserResultResponse(): ServerGrantCharacterToUserResult;
	decodeGrantItemsToCharacterResultResponse(): ServerGrantItemsToCharacterResult;
	decodeGrantItemsToUserResultResponse(): ServerGrantItemsToUserResult;
	decodeGrantItemsToUsersResultResponse(): ServerGrantItemsToUsersResult;
	decodeLinkXboxAccountResultResponse(): ServerLinkXboxAccountResult;
	decodeListUsersCharactersResultResponse(): ServerListUsersCharactersResult;
	decodeModifyCharacterVirtualCurrencyResultResponse(): ServerModifyCharacterVirtualCurrencyResult;
	decodeModifyItemUsesResultResponse(): ServerModifyItemUsesResult;
	decodeModifyUserVirtualCurrencyResultResponse(): ServerModifyUserVirtualCurrencyResult;
	decodeMoveItemToCharacterFromCharacterResultResponse(): ServerMoveItemToCharacterFromCharacterResult;
	decodeMoveItemToCharacterFromUserResultResponse(): ServerMoveItemToCharacterFromUserResult;
	decodeMoveItemToUserFromCharacterResultResponse(): ServerMoveItemToUserFromCharacterResult;
	decodeNotifyMatchmakerPlayerLeftResultResponse(): ServerNotifyMatchmakerPlayerLeftResult;
	decodeRedeemCouponResultResponse(): ServerRedeemCouponResult;
	decodeRedeemMatchmakerTicketResultResponse(): ServerRedeemMatchmakerTicketResult;
	decodeRefreshGameServerInstanceHeartbeatResultResponse(): ServerRefreshGameServerInstanceHeartbeatResult;
	decodeRegisterGameResponseResponse(): ServerRegisterGameResponse;
	decodeRemovePlayerTagResultResponse(): ServerRemovePlayerTagResult;
	decodeRemoveSharedGroupMembersResultResponse(): ServerRemoveSharedGroupMembersResult;
	decodeReportPlayerServerResultResponse(): ServerReportPlayerServerResult;
	decodeRevokeAllBansForUserResultResponse(): ServerRevokeAllBansForUserResult;
	decodeRevokeBansResultResponse(): ServerRevokeBansResult;
	decodeRevokeInventoryItemsResultResponse(): ServerRevokeInventoryItemsResult;
	decodeRevokeInventoryResultResponse(): ServerRevokeInventoryResult;
	decodeSendCustomAccountRecoveryEmailResultResponse(): ServerSendCustomAccountRecoveryEmailResult;
	decodeSendEmailFromTemplateResultResponse(): ServerSendEmailFromTemplateResult;
	decodeSendPushNotificationResultResponse(): ServerSendPushNotificationResult;
	decodeServerLoginResultResponse(): ServerServerLoginResult;
	decodeSetGameServerInstanceDataResultResponse(): ServerSetGameServerInstanceDataResult;
	decodeSetGameServerInstanceStateResultResponse(): ServerSetGameServerInstanceStateResult;
	decodeSetGameServerInstanceTagsResultResponse(): ServerSetGameServerInstanceTagsResult;
	decodeSetPlayerSecretResultResponse(): ServerSetPlayerSecretResult;
	decodeSetPublisherDataResultResponse(): ServerSetPublisherDataResult;
	decodeSetTitleDataResultResponse(): ServerSetTitleDataResult;
	decodeUnlinkXboxAccountResultResponse(): ServerUnlinkXboxAccountResult;
	decodeUnlockContainerItemResultResponse(): ServerUnlockContainerItemResult;
	decodeUpdateBansResultResponse(): ServerUpdateBansResult;
	decodeUpdateCharacterDataResultResponse(): ServerUpdateCharacterDataResult;
	decodeUpdateCharacterStatisticsResultResponse(): ServerUpdateCharacterStatisticsResult;
	decodeUpdatePlayerStatisticsResultResponse(): ServerUpdatePlayerStatisticsResult;
	decodeUpdateSharedGroupDataResultResponse(): ServerUpdateSharedGroupDataResult;
	decodeUpdateUserDataResultResponse(): ServerUpdateUserDataResult;
	decodeWriteEventResponseResponse(): ServerWriteEventResponse;
	decodeGetEntityProfileResponseResponse(): ProfilesGetEntityProfileResponse;
	decodeGetEntityProfilesResponseResponse(): ProfilesGetEntityProfilesResponse;
	decodeGetGlobalPolicyResponseResponse(): ProfilesGetGlobalPolicyResponse;
	decodeSetEntityProfilePolicyResponseResponse(): ProfilesSetEntityProfilePolicyResponse;
	decodeSetGlobalPolicyResponseResponse(): ProfilesSetGlobalPolicyResponse;
	decodeSetProfileLanguageResponseResponse(): ProfilesSetProfileLanguageResponse;
	decodeCreateBuildWithCustomContainerResponseResponse(): MultiplayerCreateBuildWithCustomContainerResponse;
	decodeCreateBuildWithManagedContainerResponseResponse(): MultiplayerCreateBuildWithManagedContainerResponse;
	decodeCreateRemoteUserResponseResponse(): MultiplayerCreateRemoteUserResponse;
	decodeEmptyResponseResponse(): MultiplayerEmptyResponse;
	decodeEnableMultiplayerServersForTitleResponseResponse(): MultiplayerEnableMultiplayerServersForTitleResponse;
	decodeGetAssetUploadUrlResponseResponse(): MultiplayerGetAssetUploadUrlResponse;
	decodeGetBuildResponseResponse(): MultiplayerGetBuildResponse;
	decodeGetContainerRegistryCredentialsResponseResponse(): MultiplayerGetContainerRegistryCredentialsResponse;
	decodeGetMultiplayerServerDetailsResponseResponse(): MultiplayerGetMultiplayerServerDetailsResponse;
	decodeGetRemoteLoginEndpointResponseResponse(): MultiplayerGetRemoteLoginEndpointResponse;
	decodeGetTitleEnabledForMultiplayerServersStatusResponseResponse(): MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse;
	decodeListAssetSummariesResponseResponse(): MultiplayerListAssetSummariesResponse;
	decodeListBuildSummariesResponseResponse(): MultiplayerListBuildSummariesResponse;
	decodeListCertificateSummariesResponseResponse(): MultiplayerListCertificateSummariesResponse;
	decodeListContainerImagesResponseResponse(): MultiplayerListContainerImagesResponse;
	decodeListContainerImageTagsResponseResponse(): MultiplayerListContainerImageTagsResponse;
	decodeListMultiplayerServersResponseResponse(): MultiplayerListMultiplayerServersResponse;
	decodeListQosServersResponseResponse(): MultiplayerListQosServersResponse;
	decodeListVirtualMachineSummariesResponseResponse(): MultiplayerListVirtualMachineSummariesResponse;
	decodeRequestMultiplayerServerResponseResponse(): MultiplayerRequestMultiplayerServerResponse;
	decodeRolloverContainerRegistryCredentialsResponseResponse(): MultiplayerRolloverContainerRegistryCredentialsResponse;
	decodeAuthUserResponseResponse(): MatchmakerAuthUserResponse;
	decodePlayerJoinedResponseResponse(): MatchmakerPlayerJoinedResponse;
	decodePlayerLeftResponseResponse(): MatchmakerPlayerLeftResponse;
	decodeStartGameResponseResponse(): MatchmakerStartGameResponse;
	decodeUserInfoResponseResponse(): MatchmakerUserInfoResponse;
	decodeGetLanguageListResponseResponse(): LocalizationGetLanguageListResponse;
	decodeApplyToGroupResponseResponse(): GroupsApplyToGroupResponse;
	decodeCreateGroupResponseResponse(): GroupsCreateGroupResponse;
	decodeCreateGroupRoleResponseResponse(): GroupsCreateGroupRoleResponse;
	decodeEmptyResponseResponse(): GroupsEmptyResponse;
	decodeGetGroupResponseResponse(): GroupsGetGroupResponse;
	decodeInviteToGroupResponseResponse(): GroupsInviteToGroupResponse;
	decodeIsMemberResponseResponse(): GroupsIsMemberResponse;
	decodeListGroupApplicationsResponseResponse(): GroupsListGroupApplicationsResponse;
	decodeListGroupBlocksResponseResponse(): GroupsListGroupBlocksResponse;
	decodeListGroupInvitationsResponseResponse(): GroupsListGroupInvitationsResponse;
	decodeListGroupMembersResponseResponse(): GroupsListGroupMembersResponse;
	decodeListMembershipOpportunitiesResponseResponse(): GroupsListMembershipOpportunitiesResponse;
	decodeListMembershipResponseResponse(): GroupsListMembershipResponse;
	decodeUpdateGroupResponseResponse(): GroupsUpdateGroupResponse;
	decodeUpdateGroupRoleResponseResponse(): GroupsUpdateGroupRoleResponse;
	decodeWriteEventsResponseResponse(): EventsWriteEventsResponse;
	decodeAbortFileUploadsResponseResponse(): DataAbortFileUploadsResponse;
	decodeDeleteFilesResponseResponse(): DataDeleteFilesResponse;
	decodeFinalizeFileUploadsResponseResponse(): DataFinalizeFileUploadsResponse;
	decodeGetFilesResponseResponse(): DataGetFilesResponse;
	decodeGetObjectsResponseResponse(): DataGetObjectsResponse;
	decodeInitiateFileUploadsResponseResponse(): DataInitiateFileUploadsResponse;
	decodeSetObjectsResponseResponse(): DataSetObjectsResponse;
	decodeExecuteCloudScriptResultResponse(): CloudScriptExecuteCloudScriptResult;
	decodeAcceptTradeResponseResponse(): ClientAcceptTradeResponse;
	decodeAddFriendResultResponse(): ClientAddFriendResult;
	decodeAddGenericIDResultResponse(): ClientAddGenericIDResult;
	decodeAddOrUpdateContactEmailResultResponse(): ClientAddOrUpdateContactEmailResult;
	decodeAddSharedGroupMembersResultResponse(): ClientAddSharedGroupMembersResult;
	decodeAddUsernamePasswordResultResponse(): ClientAddUsernamePasswordResult;
	decodeAndroidDevicePushNotificationRegistrationResultResponse(): ClientAndroidDevicePushNotificationRegistrationResult;
	decodeAttributeInstallResultResponse(): ClientAttributeInstallResult;
	decodeCancelTradeResponseResponse(): ClientCancelTradeResponse;
	decodeConfirmPurchaseResultResponse(): ClientConfirmPurchaseResult;
	decodeConsumeItemResultResponse(): ClientConsumeItemResult;
	decodeConsumePSNEntitlementsResultResponse(): ClientConsumePSNEntitlementsResult;
	decodeConsumeXboxEntitlementsResultResponse(): ClientConsumeXboxEntitlementsResult;
	decodeCreateSharedGroupResultResponse(): ClientCreateSharedGroupResult;
	decodeCurrentGamesResultResponse(): ClientCurrentGamesResult;
	decodeEmptyResponseResponse(): ClientEmptyResponse;
	decodeEmptyResultResponse(): ClientEmptyResult;
	decodeExecuteCloudScriptResultResponse(): ClientExecuteCloudScriptResult;
	decodeGameServerRegionsResultResponse(): ClientGameServerRegionsResult;
	decodeGetAccountInfoResultResponse(): ClientGetAccountInfoResult;
	decodeGetCatalogItemsResultResponse(): ClientGetCatalogItemsResult;
	decodeGetCharacterDataResultResponse(): ClientGetCharacterDataResult;
	decodeGetCharacterInventoryResultResponse(): ClientGetCharacterInventoryResult;
	decodeGetCharacterLeaderboardResultResponse(): ClientGetCharacterLeaderboardResult;
	decodeGetCharacterStatisticsResultResponse(): ClientGetCharacterStatisticsResult;
	decodeGetContentDownloadUrlResultResponse(): ClientGetContentDownloadUrlResult;
	decodeGetFriendLeaderboardAroundPlayerResultResponse(): ClientGetFriendLeaderboardAroundPlayerResult;
	decodeGetFriendsListResultResponse(): ClientGetFriendsListResult;
	decodeGetLeaderboardAroundCharacterResultResponse(): ClientGetLeaderboardAroundCharacterResult;
	decodeGetLeaderboardAroundPlayerResultResponse(): ClientGetLeaderboardAroundPlayerResult;
	decodeGetLeaderboardForUsersCharactersResultResponse(): ClientGetLeaderboardForUsersCharactersResult;
	decodeGetLeaderboardResultResponse(): ClientGetLeaderboardResult;
	decodeGetPaymentTokenResultResponse(): ClientGetPaymentTokenResult;
	decodeGetPhotonAuthenticationTokenResultResponse(): ClientGetPhotonAuthenticationTokenResult;
	decodeGetPlayerCombinedInfoResultResponse(): ClientGetPlayerCombinedInfoResult;
	decodeGetPlayerProfileResultResponse(): ClientGetPlayerProfileResult;
	decodeGetPlayerSegmentsResultResponse(): ClientGetPlayerSegmentsResult;
	decodeGetPlayerStatisticsResultResponse(): ClientGetPlayerStatisticsResult;
	decodeGetPlayerStatisticVersionsResultResponse(): ClientGetPlayerStatisticVersionsResult;
	decodeGetPlayerTagsResultResponse(): ClientGetPlayerTagsResult;
	decodeGetPlayerTradesResponseResponse(): ClientGetPlayerTradesResponse;
	decodeGetPlayFabIDsFromFacebookIDsResultResponse(): ClientGetPlayFabIDsFromFacebookIDsResult;
	decodeGetPlayFabIDsFromFacebookInstantGamesIdsResultResponse(): ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult;
	decodeGetPlayFabIDsFromGameCenterIDsResultResponse(): ClientGetPlayFabIDsFromGameCenterIDsResult;
	decodeGetPlayFabIDsFromGenericIDsResultResponse(): ClientGetPlayFabIDsFromGenericIDsResult;
	decodeGetPlayFabIDsFromGoogleIDsResultResponse(): ClientGetPlayFabIDsFromGoogleIDsResult;
	decodeGetPlayFabIDsFromKongregateIDsResultResponse(): ClientGetPlayFabIDsFromKongregateIDsResult;
	decodeGetPlayFabIDsFromNintendoSwitchDeviceIdsResultResponse(): ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
	decodeGetPlayFabIDsFromPSNAccountIDsResultResponse(): ClientGetPlayFabIDsFromPSNAccountIDsResult;
	decodeGetPlayFabIDsFromSteamIDsResultResponse(): ClientGetPlayFabIDsFromSteamIDsResult;
	decodeGetPlayFabIDsFromTwitchIDsResultResponse(): ClientGetPlayFabIDsFromTwitchIDsResult;
	decodeGetPlayFabIDsFromXboxLiveIDsResultResponse(): ClientGetPlayFabIDsFromXboxLiveIDsResult;
	decodeGetPublisherDataResultResponse(): ClientGetPublisherDataResult;
	decodeGetPurchaseResultResponse(): ClientGetPurchaseResult;
	decodeGetSharedGroupDataResultResponse(): ClientGetSharedGroupDataResult;
	decodeGetStoreItemsResultResponse(): ClientGetStoreItemsResult;
	decodeGetTimeResultResponse(): ClientGetTimeResult;
	decodeGetTitleDataResultResponse(): ClientGetTitleDataResult;
	decodeGetTitleNewsResultResponse(): ClientGetTitleNewsResult;
	decodeGetTitlePublicKeyResultResponse(): ClientGetTitlePublicKeyResult;
	decodeGetTradeStatusResponseResponse(): ClientGetTradeStatusResponse;
	decodeGetUserDataResultResponse(): ClientGetUserDataResult;
	decodeGetUserInventoryResultResponse(): ClientGetUserInventoryResult;
	decodeGetWindowsHelloChallengeResponseResponse(): ClientGetWindowsHelloChallengeResponse;
	decodeGrantCharacterToUserResultResponse(): ClientGrantCharacterToUserResult;
	decodeLinkAndroidDeviceIDResultResponse(): ClientLinkAndroidDeviceIDResult;
	decodeLinkCustomIDResultResponse(): ClientLinkCustomIDResult;
	decodeLinkFacebookAccountResultResponse(): ClientLinkFacebookAccountResult;
	decodeLinkFacebookInstantGamesIdResultResponse(): ClientLinkFacebookInstantGamesIdResult;
	decodeLinkGameCenterAccountResultResponse(): ClientLinkGameCenterAccountResult;
	decodeLinkGoogleAccountResultResponse(): ClientLinkGoogleAccountResult;
	decodeLinkIOSDeviceIDResultResponse(): ClientLinkIOSDeviceIDResult;
	decodeLinkKongregateAccountResultResponse(): ClientLinkKongregateAccountResult;
	decodeLinkNintendoSwitchDeviceIdResultResponse(): ClientLinkNintendoSwitchDeviceIdResult;
	decodeLinkPSNAccountResultResponse(): ClientLinkPSNAccountResult;
	decodeLinkSteamAccountResultResponse(): ClientLinkSteamAccountResult;
	decodeLinkTwitchAccountResultResponse(): ClientLinkTwitchAccountResult;
	decodeLinkWindowsHelloAccountResponseResponse(): ClientLinkWindowsHelloAccountResponse;
	decodeLinkXboxAccountResultResponse(): ClientLinkXboxAccountResult;
	decodeListUsersCharactersResultResponse(): ClientListUsersCharactersResult;
	decodeLoginResultResponse(): ClientLoginResult;
	decodeMatchmakeResultResponse(): ClientMatchmakeResult;
	decodeModifyUserVirtualCurrencyResultResponse(): ClientModifyUserVirtualCurrencyResult;
	decodeOpenTradeResponseResponse(): ClientOpenTradeResponse;
	decodePayForPurchaseResultResponse(): ClientPayForPurchaseResult;
	decodePurchaseItemResultResponse(): ClientPurchaseItemResult;
	decodeRedeemCouponResultResponse(): ClientRedeemCouponResult;
	decodeRegisterForIOSPushNotificationResultResponse(): ClientRegisterForIOSPushNotificationResult;
	decodeRegisterPlayFabUserResultResponse(): ClientRegisterPlayFabUserResult;
	decodeRemoveContactEmailResultResponse(): ClientRemoveContactEmailResult;
	decodeRemoveFriendResultResponse(): ClientRemoveFriendResult;
	decodeRemoveGenericIDResultResponse(): ClientRemoveGenericIDResult;
	decodeRemoveSharedGroupMembersResultResponse(): ClientRemoveSharedGroupMembersResult;
	decodeReportPlayerClientResultResponse(): ClientReportPlayerClientResult;
	decodeRestoreIOSPurchasesResultResponse(): ClientRestoreIOSPurchasesResult;
	decodeSendAccountRecoveryEmailResultResponse(): ClientSendAccountRecoveryEmailResult;
	decodeSetFriendTagsResultResponse(): ClientSetFriendTagsResult;
	decodeSetPlayerSecretResultResponse(): ClientSetPlayerSecretResult;
	decodeStartGameResultResponse(): ClientStartGameResult;
	decodeStartPurchaseResultResponse(): ClientStartPurchaseResult;
	decodeUnlinkAndroidDeviceIDResultResponse(): ClientUnlinkAndroidDeviceIDResult;
	decodeUnlinkCustomIDResultResponse(): ClientUnlinkCustomIDResult;
	decodeUnlinkFacebookAccountResultResponse(): ClientUnlinkFacebookAccountResult;
	decodeUnlinkFacebookInstantGamesIdResultResponse(): ClientUnlinkFacebookInstantGamesIdResult;
	decodeUnlinkGameCenterAccountResultResponse(): ClientUnlinkGameCenterAccountResult;
	decodeUnlinkGoogleAccountResultResponse(): ClientUnlinkGoogleAccountResult;
	decodeUnlinkIOSDeviceIDResultResponse(): ClientUnlinkIOSDeviceIDResult;
	decodeUnlinkKongregateAccountResultResponse(): ClientUnlinkKongregateAccountResult;
	decodeUnlinkNintendoSwitchDeviceIdResultResponse(): ClientUnlinkNintendoSwitchDeviceIdResult;
	decodeUnlinkPSNAccountResultResponse(): ClientUnlinkPSNAccountResult;
	decodeUnlinkSteamAccountResultResponse(): ClientUnlinkSteamAccountResult;
	decodeUnlinkTwitchAccountResultResponse(): ClientUnlinkTwitchAccountResult;
	decodeUnlinkWindowsHelloAccountResponseResponse(): ClientUnlinkWindowsHelloAccountResponse;
	decodeUnlinkXboxAccountResultResponse(): ClientUnlinkXboxAccountResult;
	decodeUnlockContainerItemResultResponse(): ClientUnlockContainerItemResult;
	decodeUpdateCharacterDataResultResponse(): ClientUpdateCharacterDataResult;
	decodeUpdateCharacterStatisticsResultResponse(): ClientUpdateCharacterStatisticsResult;
	decodeUpdatePlayerStatisticsResultResponse(): ClientUpdatePlayerStatisticsResult;
	decodeUpdateSharedGroupDataResultResponse(): ClientUpdateSharedGroupDataResult;
	decodeUpdateUserDataResultResponse(): ClientUpdateUserDataResult;
	decodeUpdateUserTitleDisplayNameResultResponse(): ClientUpdateUserTitleDisplayNameResult;
	decodeValidateAmazonReceiptResultResponse(): ClientValidateAmazonReceiptResult;
	decodeValidateGooglePlayPurchaseResultResponse(): ClientValidateGooglePlayPurchaseResult;
	decodeValidateIOSReceiptResultResponse(): ClientValidateIOSReceiptResult;
	decodeValidateWindowsReceiptResultResponse(): ClientValidateWindowsReceiptResult;
	decodeWriteEventResponseResponse(): ClientWriteEventResponse;
	decodeGetEntityTokenResponseResponse(): AuthenticationGetEntityTokenResponse;
	decodeAddNewsResultResponse(): AdminAddNewsResult;
	decodeAddPlayerTagResultResponse(): AdminAddPlayerTagResult;
	decodeAddServerBuildResultResponse(): AdminAddServerBuildResult;
	decodeBanUsersResultResponse(): AdminBanUsersResult;
	decodeBlankResultResponse(): AdminBlankResult;
	decodeCheckLimitedEditionItemAvailabilityResultResponse(): AdminCheckLimitedEditionItemAvailabilityResult;
	decodeCreatePlayerSharedSecretResultResponse(): AdminCreatePlayerSharedSecretResult;
	decodeCreatePlayerStatisticDefinitionResultResponse(): AdminCreatePlayerStatisticDefinitionResult;
	decodeCreateTaskResultResponse(): AdminCreateTaskResult;
	decodeDeleteMasterPlayerAccountResultResponse(): AdminDeleteMasterPlayerAccountResult;
	decodeDeletePlayerResultResponse(): AdminDeletePlayerResult;
	decodeDeletePlayerSharedSecretResultResponse(): AdminDeletePlayerSharedSecretResult;
	decodeDeleteStoreResultResponse(): AdminDeleteStoreResult;
	decodeDeleteTitleResultResponse(): AdminDeleteTitleResult;
	decodeEmptyResponseResponse(): AdminEmptyResponse;
	decodeExportMasterPlayerDataResultResponse(): AdminExportMasterPlayerDataResult;
	decodeGetActionsOnPlayersInSegmentTaskInstanceResultResponse(): AdminGetActionsOnPlayersInSegmentTaskInstanceResult;
	decodeGetAllSegmentsResultResponse(): AdminGetAllSegmentsResult;
	decodeGetCatalogItemsResultResponse(): AdminGetCatalogItemsResult;
	decodeGetCloudScriptRevisionResultResponse(): AdminGetCloudScriptRevisionResult;
	decodeGetCloudScriptTaskInstanceResultResponse(): AdminGetCloudScriptTaskInstanceResult;
	decodeGetCloudScriptVersionsResultResponse(): AdminGetCloudScriptVersionsResult;
	decodeGetContentListResultResponse(): AdminGetContentListResult;
	decodeGetContentUploadUrlResultResponse(): AdminGetContentUploadUrlResult;
	decodeGetDataReportResultResponse(): AdminGetDataReportResult;
	decodeGetMatchmakerGameInfoResultResponse(): AdminGetMatchmakerGameInfoResult;
	decodeGetMatchmakerGameModesResultResponse(): AdminGetMatchmakerGameModesResult;
	decodeGetPlayedTitleListResultResponse(): AdminGetPlayedTitleListResult;
	decodeGetPlayerIdFromAuthTokenResultResponse(): AdminGetPlayerIdFromAuthTokenResult;
	decodeGetPlayerProfileResultResponse(): AdminGetPlayerProfileResult;
	decodeGetPlayerSegmentsResultResponse(): AdminGetPlayerSegmentsResult;
	decodeGetPlayerSharedSecretsResultResponse(): AdminGetPlayerSharedSecretsResult;
	decodeGetPlayersInSegmentResultResponse(): AdminGetPlayersInSegmentResult;
	decodeGetPlayerStatisticDefinitionsResultResponse(): AdminGetPlayerStatisticDefinitionsResult;
	decodeGetPlayerStatisticVersionsResultResponse(): AdminGetPlayerStatisticVersionsResult;
	decodeGetPlayerTagsResultResponse(): AdminGetPlayerTagsResult;
	decodeGetPolicyResponseResponse(): AdminGetPolicyResponse;
	decodeGetPublisherDataResultResponse(): AdminGetPublisherDataResult;
	decodeGetRandomResultTablesResultResponse(): AdminGetRandomResultTablesResult;
	decodeGetServerBuildInfoResultResponse(): AdminGetServerBuildInfoResult;
	decodeGetServerBuildUploadURLResultResponse(): AdminGetServerBuildUploadURLResult;
	decodeGetStoreItemsResultResponse(): AdminGetStoreItemsResult;
	decodeGetTaskInstancesResultResponse(): AdminGetTaskInstancesResult;
	decodeGetTasksResultResponse(): AdminGetTasksResult;
	decodeGetTitleDataResultResponse(): AdminGetTitleDataResult;
	decodeGetUserBansResultResponse(): AdminGetUserBansResult;
	decodeGetUserDataResultResponse(): AdminGetUserDataResult;
	decodeGetUserInventoryResultResponse(): AdminGetUserInventoryResult;
	decodeGrantItemsToUsersResultResponse(): AdminGrantItemsToUsersResult;
	decodeIncrementLimitedEditionItemAvailabilityResultResponse(): AdminIncrementLimitedEditionItemAvailabilityResult;
	decodeIncrementPlayerStatisticVersionResultResponse(): AdminIncrementPlayerStatisticVersionResult;
	decodeListBuildsResultResponse(): AdminListBuildsResult;
	decodeListVirtualCurrencyTypesResultResponse(): AdminListVirtualCurrencyTypesResult;
	decodeLookupUserAccountInfoResultResponse(): AdminLookupUserAccountInfoResult;
	decodeModifyMatchmakerGameModesResultResponse(): AdminModifyMatchmakerGameModesResult;
	decodeModifyServerBuildResultResponse(): AdminModifyServerBuildResult;
	decodeModifyUserVirtualCurrencyResultResponse(): AdminModifyUserVirtualCurrencyResult;
	decodeRefundPurchaseResponseResponse(): AdminRefundPurchaseResponse;
	decodeRemovePlayerTagResultResponse(): AdminRemovePlayerTagResult;
	decodeRemoveServerBuildResultResponse(): AdminRemoveServerBuildResult;
	decodeResetCharacterStatisticsResultResponse(): AdminResetCharacterStatisticsResult;
	decodeResetPasswordResultResponse(): AdminResetPasswordResult;
	decodeResetUserStatisticsResultResponse(): AdminResetUserStatisticsResult;
	decodeResolvePurchaseDisputeResponseResponse(): AdminResolvePurchaseDisputeResponse;
	decodeRevokeAllBansForUserResultResponse(): AdminRevokeAllBansForUserResult;
	decodeRevokeBansResultResponse(): AdminRevokeBansResult;
	decodeRevokeInventoryItemsResultResponse(): AdminRevokeInventoryItemsResult;
	decodeRevokeInventoryResultResponse(): AdminRevokeInventoryResult;
	decodeRunTaskResultResponse(): AdminRunTaskResult;
	decodeSendAccountRecoveryEmailResultResponse(): AdminSendAccountRecoveryEmailResult;
	decodeSetPlayerSecretResultResponse(): AdminSetPlayerSecretResult;
	decodeSetPublishedRevisionResultResponse(): AdminSetPublishedRevisionResult;
	decodeSetPublisherDataResultResponse(): AdminSetPublisherDataResult;
	decodeSetTitleDataResultResponse(): AdminSetTitleDataResult;
	decodeSetupPushNotificationResultResponse(): AdminSetupPushNotificationResult;
	decodeUpdateBansResultResponse(): AdminUpdateBansResult;
	decodeUpdateCatalogItemsResultResponse(): AdminUpdateCatalogItemsResult;
	decodeUpdateCloudScriptResultResponse(): AdminUpdateCloudScriptResult;
	decodeUpdatePlayerSharedSecretResultResponse(): AdminUpdatePlayerSharedSecretResult;
	decodeUpdatePlayerStatisticDefinitionResultResponse(): AdminUpdatePlayerStatisticDefinitionResult;
	decodeUpdatePolicyResponseResponse(): AdminUpdatePolicyResponse;
	decodeUpdateRandomResultTablesResultResponse(): AdminUpdateRandomResultTablesResult;
	decodeUpdateStoreItemsResultResponse(): AdminUpdateStoreItemsResult;
	decodeUpdateUserDataResultResponse(): AdminUpdateUserDataResult;
	decodeUpdateUserTitleDisplayNameResultResponse(): AdminUpdateUserTitleDisplayNameResult;
	static decodeAddPlayerTagResultResponse(Response: PlayFabJsonObject): ServerAddPlayerTagResult;
	static decodeAddSharedGroupMembersResultResponse(Response: PlayFabJsonObject): ServerAddSharedGroupMembersResult;
	static decodeAuthenticateSessionTicketResultResponse(Response: PlayFabJsonObject): ServerAuthenticateSessionTicketResult;
	static decodeAwardSteamAchievementResultResponse(Response: PlayFabJsonObject): ServerAwardSteamAchievementResult;
	static decodeBanUsersResultResponse(Response: PlayFabJsonObject): ServerBanUsersResult;
	static decodeConsumeItemResultResponse(Response: PlayFabJsonObject): ServerConsumeItemResult;
	static decodeCreateSharedGroupResultResponse(Response: PlayFabJsonObject): ServerCreateSharedGroupResult;
	static decodeDeleteCharacterFromUserResultResponse(Response: PlayFabJsonObject): ServerDeleteCharacterFromUserResult;
	static decodeDeletePlayerResultResponse(Response: PlayFabJsonObject): ServerDeletePlayerResult;
	static decodeDeregisterGameResponseResponse(Response: PlayFabJsonObject): ServerDeregisterGameResponse;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): ServerEmptyResponse;
	static decodeEvaluateRandomResultTableResultResponse(Response: PlayFabJsonObject): ServerEvaluateRandomResultTableResult;
	static decodeExecuteCloudScriptResultResponse(Response: PlayFabJsonObject): ServerExecuteCloudScriptResult;
	static decodeGetAllSegmentsResultResponse(Response: PlayFabJsonObject): ServerGetAllSegmentsResult;
	static decodeGetCatalogItemsResultResponse(Response: PlayFabJsonObject): ServerGetCatalogItemsResult;
	static decodeGetCharacterDataResultResponse(Response: PlayFabJsonObject): ServerGetCharacterDataResult;
	static decodeGetCharacterInventoryResultResponse(Response: PlayFabJsonObject): ServerGetCharacterInventoryResult;
	static decodeGetCharacterLeaderboardResultResponse(Response: PlayFabJsonObject): ServerGetCharacterLeaderboardResult;
	static decodeGetCharacterStatisticsResultResponse(Response: PlayFabJsonObject): ServerGetCharacterStatisticsResult;
	static decodeGetContentDownloadUrlResultResponse(Response: PlayFabJsonObject): ServerGetContentDownloadUrlResult;
	static decodeGetFriendsListResultResponse(Response: PlayFabJsonObject): ServerGetFriendsListResult;
	static decodeGetLeaderboardAroundCharacterResultResponse(Response: PlayFabJsonObject): ServerGetLeaderboardAroundCharacterResult;
	static decodeGetLeaderboardAroundUserResultResponse(Response: PlayFabJsonObject): ServerGetLeaderboardAroundUserResult;
	static decodeGetLeaderboardForUsersCharactersResultResponse(Response: PlayFabJsonObject): ServerGetLeaderboardForUsersCharactersResult;
	static decodeGetLeaderboardResultResponse(Response: PlayFabJsonObject): ServerGetLeaderboardResult;
	static decodeGetPlayerCombinedInfoResultResponse(Response: PlayFabJsonObject): ServerGetPlayerCombinedInfoResult;
	static decodeGetPlayerProfileResultResponse(Response: PlayFabJsonObject): ServerGetPlayerProfileResult;
	static decodeGetPlayerSegmentsResultResponse(Response: PlayFabJsonObject): ServerGetPlayerSegmentsResult;
	static decodeGetPlayersInSegmentResultResponse(Response: PlayFabJsonObject): ServerGetPlayersInSegmentResult;
	static decodeGetPlayerStatisticsResultResponse(Response: PlayFabJsonObject): ServerGetPlayerStatisticsResult;
	static decodeGetPlayerStatisticVersionsResultResponse(Response: PlayFabJsonObject): ServerGetPlayerStatisticVersionsResult;
	static decodeGetPlayerTagsResultResponse(Response: PlayFabJsonObject): ServerGetPlayerTagsResult;
	static decodeGetPlayFabIDsFromFacebookIDsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromFacebookIDsResult;
	static decodeGetPlayFabIDsFromFacebookInstantGamesIdsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult;
	static decodeGetPlayFabIDsFromNintendoSwitchDeviceIdsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
	static decodeGetPlayFabIDsFromSteamIDsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromSteamIDsResult;
	static decodeGetPlayFabIDsFromXboxLiveIDsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromXboxLiveIDsResult;
	static decodeGetPublisherDataResultResponse(Response: PlayFabJsonObject): ServerGetPublisherDataResult;
	static decodeGetRandomResultTablesResultResponse(Response: PlayFabJsonObject): ServerGetRandomResultTablesResult;
	static decodeGetServerCustomIDsFromPlayFabIDsResultResponse(Response: PlayFabJsonObject): ServerGetServerCustomIDsFromPlayFabIDsResult;
	static decodeGetSharedGroupDataResultResponse(Response: PlayFabJsonObject): ServerGetSharedGroupDataResult;
	static decodeGetTimeResultResponse(Response: PlayFabJsonObject): ServerGetTimeResult;
	static decodeGetTitleDataResultResponse(Response: PlayFabJsonObject): ServerGetTitleDataResult;
	static decodeGetTitleNewsResultResponse(Response: PlayFabJsonObject): ServerGetTitleNewsResult;
	static decodeGetUserAccountInfoResultResponse(Response: PlayFabJsonObject): ServerGetUserAccountInfoResult;
	static decodeGetUserBansResultResponse(Response: PlayFabJsonObject): ServerGetUserBansResult;
	static decodeGetUserDataResultResponse(Response: PlayFabJsonObject): ServerGetUserDataResult;
	static decodeGetUserInventoryResultResponse(Response: PlayFabJsonObject): ServerGetUserInventoryResult;
	static decodeGrantCharacterToUserResultResponse(Response: PlayFabJsonObject): ServerGrantCharacterToUserResult;
	static decodeGrantItemsToCharacterResultResponse(Response: PlayFabJsonObject): ServerGrantItemsToCharacterResult;
	static decodeGrantItemsToUserResultResponse(Response: PlayFabJsonObject): ServerGrantItemsToUserResult;
	static decodeGrantItemsToUsersResultResponse(Response: PlayFabJsonObject): ServerGrantItemsToUsersResult;
	static decodeLinkXboxAccountResultResponse(Response: PlayFabJsonObject): ServerLinkXboxAccountResult;
	static decodeListUsersCharactersResultResponse(Response: PlayFabJsonObject): ServerListUsersCharactersResult;
	static decodeModifyCharacterVirtualCurrencyResultResponse(Response: PlayFabJsonObject): ServerModifyCharacterVirtualCurrencyResult;
	static decodeModifyItemUsesResultResponse(Response: PlayFabJsonObject): ServerModifyItemUsesResult;
	static decodeModifyUserVirtualCurrencyResultResponse(Response: PlayFabJsonObject): ServerModifyUserVirtualCurrencyResult;
	static decodeMoveItemToCharacterFromCharacterResultResponse(Response: PlayFabJsonObject): ServerMoveItemToCharacterFromCharacterResult;
	static decodeMoveItemToCharacterFromUserResultResponse(Response: PlayFabJsonObject): ServerMoveItemToCharacterFromUserResult;
	static decodeMoveItemToUserFromCharacterResultResponse(Response: PlayFabJsonObject): ServerMoveItemToUserFromCharacterResult;
	static decodeNotifyMatchmakerPlayerLeftResultResponse(Response: PlayFabJsonObject): ServerNotifyMatchmakerPlayerLeftResult;
	static decodeRedeemCouponResultResponse(Response: PlayFabJsonObject): ServerRedeemCouponResult;
	static decodeRedeemMatchmakerTicketResultResponse(Response: PlayFabJsonObject): ServerRedeemMatchmakerTicketResult;
	static decodeRefreshGameServerInstanceHeartbeatResultResponse(Response: PlayFabJsonObject): ServerRefreshGameServerInstanceHeartbeatResult;
	static decodeRegisterGameResponseResponse(Response: PlayFabJsonObject): ServerRegisterGameResponse;
	static decodeRemovePlayerTagResultResponse(Response: PlayFabJsonObject): ServerRemovePlayerTagResult;
	static decodeRemoveSharedGroupMembersResultResponse(Response: PlayFabJsonObject): ServerRemoveSharedGroupMembersResult;
	static decodeReportPlayerServerResultResponse(Response: PlayFabJsonObject): ServerReportPlayerServerResult;
	static decodeRevokeAllBansForUserResultResponse(Response: PlayFabJsonObject): ServerRevokeAllBansForUserResult;
	static decodeRevokeBansResultResponse(Response: PlayFabJsonObject): ServerRevokeBansResult;
	static decodeRevokeInventoryItemsResultResponse(Response: PlayFabJsonObject): ServerRevokeInventoryItemsResult;
	static decodeRevokeInventoryResultResponse(Response: PlayFabJsonObject): ServerRevokeInventoryResult;
	static decodeSendCustomAccountRecoveryEmailResultResponse(Response: PlayFabJsonObject): ServerSendCustomAccountRecoveryEmailResult;
	static decodeSendEmailFromTemplateResultResponse(Response: PlayFabJsonObject): ServerSendEmailFromTemplateResult;
	static decodeSendPushNotificationResultResponse(Response: PlayFabJsonObject): ServerSendPushNotificationResult;
	static decodeServerLoginResultResponse(Response: PlayFabJsonObject): ServerServerLoginResult;
	static decodeSetGameServerInstanceDataResultResponse(Response: PlayFabJsonObject): ServerSetGameServerInstanceDataResult;
	static decodeSetGameServerInstanceStateResultResponse(Response: PlayFabJsonObject): ServerSetGameServerInstanceStateResult;
	static decodeSetGameServerInstanceTagsResultResponse(Response: PlayFabJsonObject): ServerSetGameServerInstanceTagsResult;
	static decodeSetPlayerSecretResultResponse(Response: PlayFabJsonObject): ServerSetPlayerSecretResult;
	static decodeSetPublisherDataResultResponse(Response: PlayFabJsonObject): ServerSetPublisherDataResult;
	static decodeSetTitleDataResultResponse(Response: PlayFabJsonObject): ServerSetTitleDataResult;
	static decodeUnlinkXboxAccountResultResponse(Response: PlayFabJsonObject): ServerUnlinkXboxAccountResult;
	static decodeUnlockContainerItemResultResponse(Response: PlayFabJsonObject): ServerUnlockContainerItemResult;
	static decodeUpdateBansResultResponse(Response: PlayFabJsonObject): ServerUpdateBansResult;
	static decodeUpdateCharacterDataResultResponse(Response: PlayFabJsonObject): ServerUpdateCharacterDataResult;
	static decodeUpdateCharacterStatisticsResultResponse(Response: PlayFabJsonObject): ServerUpdateCharacterStatisticsResult;
	static decodeUpdatePlayerStatisticsResultResponse(Response: PlayFabJsonObject): ServerUpdatePlayerStatisticsResult;
	static decodeUpdateSharedGroupDataResultResponse(Response: PlayFabJsonObject): ServerUpdateSharedGroupDataResult;
	static decodeUpdateUserDataResultResponse(Response: PlayFabJsonObject): ServerUpdateUserDataResult;
	static decodeWriteEventResponseResponse(Response: PlayFabJsonObject): ServerWriteEventResponse;
	static decodeGetEntityProfileResponseResponse(Response: PlayFabJsonObject): ProfilesGetEntityProfileResponse;
	static decodeGetEntityProfilesResponseResponse(Response: PlayFabJsonObject): ProfilesGetEntityProfilesResponse;
	static decodeGetGlobalPolicyResponseResponse(Response: PlayFabJsonObject): ProfilesGetGlobalPolicyResponse;
	static decodeSetEntityProfilePolicyResponseResponse(Response: PlayFabJsonObject): ProfilesSetEntityProfilePolicyResponse;
	static decodeSetGlobalPolicyResponseResponse(Response: PlayFabJsonObject): ProfilesSetGlobalPolicyResponse;
	static decodeSetProfileLanguageResponseResponse(Response: PlayFabJsonObject): ProfilesSetProfileLanguageResponse;
	static decodeCreateBuildWithCustomContainerResponseResponse(Response: PlayFabJsonObject): MultiplayerCreateBuildWithCustomContainerResponse;
	static decodeCreateBuildWithManagedContainerResponseResponse(Response: PlayFabJsonObject): MultiplayerCreateBuildWithManagedContainerResponse;
	static decodeCreateRemoteUserResponseResponse(Response: PlayFabJsonObject): MultiplayerCreateRemoteUserResponse;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): MultiplayerEmptyResponse;
	static decodeEnableMultiplayerServersForTitleResponseResponse(Response: PlayFabJsonObject): MultiplayerEnableMultiplayerServersForTitleResponse;
	static decodeGetAssetUploadUrlResponseResponse(Response: PlayFabJsonObject): MultiplayerGetAssetUploadUrlResponse;
	static decodeGetBuildResponseResponse(Response: PlayFabJsonObject): MultiplayerGetBuildResponse;
	static decodeGetContainerRegistryCredentialsResponseResponse(Response: PlayFabJsonObject): MultiplayerGetContainerRegistryCredentialsResponse;
	static decodeGetMultiplayerServerDetailsResponseResponse(Response: PlayFabJsonObject): MultiplayerGetMultiplayerServerDetailsResponse;
	static decodeGetRemoteLoginEndpointResponseResponse(Response: PlayFabJsonObject): MultiplayerGetRemoteLoginEndpointResponse;
	static decodeGetTitleEnabledForMultiplayerServersStatusResponseResponse(Response: PlayFabJsonObject): MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse;
	static decodeListAssetSummariesResponseResponse(Response: PlayFabJsonObject): MultiplayerListAssetSummariesResponse;
	static decodeListBuildSummariesResponseResponse(Response: PlayFabJsonObject): MultiplayerListBuildSummariesResponse;
	static decodeListCertificateSummariesResponseResponse(Response: PlayFabJsonObject): MultiplayerListCertificateSummariesResponse;
	static decodeListContainerImagesResponseResponse(Response: PlayFabJsonObject): MultiplayerListContainerImagesResponse;
	static decodeListContainerImageTagsResponseResponse(Response: PlayFabJsonObject): MultiplayerListContainerImageTagsResponse;
	static decodeListMultiplayerServersResponseResponse(Response: PlayFabJsonObject): MultiplayerListMultiplayerServersResponse;
	static decodeListQosServersResponseResponse(Response: PlayFabJsonObject): MultiplayerListQosServersResponse;
	static decodeListVirtualMachineSummariesResponseResponse(Response: PlayFabJsonObject): MultiplayerListVirtualMachineSummariesResponse;
	static decodeRequestMultiplayerServerResponseResponse(Response: PlayFabJsonObject): MultiplayerRequestMultiplayerServerResponse;
	static decodeRolloverContainerRegistryCredentialsResponseResponse(Response: PlayFabJsonObject): MultiplayerRolloverContainerRegistryCredentialsResponse;
	static decodeAuthUserResponseResponse(Response: PlayFabJsonObject): MatchmakerAuthUserResponse;
	static decodePlayerJoinedResponseResponse(Response: PlayFabJsonObject): MatchmakerPlayerJoinedResponse;
	static decodePlayerLeftResponseResponse(Response: PlayFabJsonObject): MatchmakerPlayerLeftResponse;
	static decodeStartGameResponseResponse(Response: PlayFabJsonObject): MatchmakerStartGameResponse;
	static decodeUserInfoResponseResponse(Response: PlayFabJsonObject): MatchmakerUserInfoResponse;
	static decodeGetLanguageListResponseResponse(Response: PlayFabJsonObject): LocalizationGetLanguageListResponse;
	static decodeApplyToGroupResponseResponse(Response: PlayFabJsonObject): GroupsApplyToGroupResponse;
	static decodeCreateGroupResponseResponse(Response: PlayFabJsonObject): GroupsCreateGroupResponse;
	static decodeCreateGroupRoleResponseResponse(Response: PlayFabJsonObject): GroupsCreateGroupRoleResponse;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): GroupsEmptyResponse;
	static decodeGetGroupResponseResponse(Response: PlayFabJsonObject): GroupsGetGroupResponse;
	static decodeInviteToGroupResponseResponse(Response: PlayFabJsonObject): GroupsInviteToGroupResponse;
	static decodeIsMemberResponseResponse(Response: PlayFabJsonObject): GroupsIsMemberResponse;
	static decodeListGroupApplicationsResponseResponse(Response: PlayFabJsonObject): GroupsListGroupApplicationsResponse;
	static decodeListGroupBlocksResponseResponse(Response: PlayFabJsonObject): GroupsListGroupBlocksResponse;
	static decodeListGroupInvitationsResponseResponse(Response: PlayFabJsonObject): GroupsListGroupInvitationsResponse;
	static decodeListGroupMembersResponseResponse(Response: PlayFabJsonObject): GroupsListGroupMembersResponse;
	static decodeListMembershipOpportunitiesResponseResponse(Response: PlayFabJsonObject): GroupsListMembershipOpportunitiesResponse;
	static decodeListMembershipResponseResponse(Response: PlayFabJsonObject): GroupsListMembershipResponse;
	static decodeUpdateGroupResponseResponse(Response: PlayFabJsonObject): GroupsUpdateGroupResponse;
	static decodeUpdateGroupRoleResponseResponse(Response: PlayFabJsonObject): GroupsUpdateGroupRoleResponse;
	static decodeWriteEventsResponseResponse(Response: PlayFabJsonObject): EventsWriteEventsResponse;
	static decodeAbortFileUploadsResponseResponse(Response: PlayFabJsonObject): DataAbortFileUploadsResponse;
	static decodeDeleteFilesResponseResponse(Response: PlayFabJsonObject): DataDeleteFilesResponse;
	static decodeFinalizeFileUploadsResponseResponse(Response: PlayFabJsonObject): DataFinalizeFileUploadsResponse;
	static decodeGetFilesResponseResponse(Response: PlayFabJsonObject): DataGetFilesResponse;
	static decodeGetObjectsResponseResponse(Response: PlayFabJsonObject): DataGetObjectsResponse;
	static decodeInitiateFileUploadsResponseResponse(Response: PlayFabJsonObject): DataInitiateFileUploadsResponse;
	static decodeSetObjectsResponseResponse(Response: PlayFabJsonObject): DataSetObjectsResponse;
	static decodeExecuteCloudScriptResultResponse(Response: PlayFabJsonObject): CloudScriptExecuteCloudScriptResult;
	static decodeAcceptTradeResponseResponse(Response: PlayFabJsonObject): ClientAcceptTradeResponse;
	static decodeAddFriendResultResponse(Response: PlayFabJsonObject): ClientAddFriendResult;
	static decodeAddGenericIDResultResponse(Response: PlayFabJsonObject): ClientAddGenericIDResult;
	static decodeAddOrUpdateContactEmailResultResponse(Response: PlayFabJsonObject): ClientAddOrUpdateContactEmailResult;
	static decodeAddSharedGroupMembersResultResponse(Response: PlayFabJsonObject): ClientAddSharedGroupMembersResult;
	static decodeAddUsernamePasswordResultResponse(Response: PlayFabJsonObject): ClientAddUsernamePasswordResult;
	static decodeAndroidDevicePushNotificationRegistrationResultResponse(Response: PlayFabJsonObject): ClientAndroidDevicePushNotificationRegistrationResult;
	static decodeAttributeInstallResultResponse(Response: PlayFabJsonObject): ClientAttributeInstallResult;
	static decodeCancelTradeResponseResponse(Response: PlayFabJsonObject): ClientCancelTradeResponse;
	static decodeConfirmPurchaseResultResponse(Response: PlayFabJsonObject): ClientConfirmPurchaseResult;
	static decodeConsumeItemResultResponse(Response: PlayFabJsonObject): ClientConsumeItemResult;
	static decodeConsumePSNEntitlementsResultResponse(Response: PlayFabJsonObject): ClientConsumePSNEntitlementsResult;
	static decodeConsumeXboxEntitlementsResultResponse(Response: PlayFabJsonObject): ClientConsumeXboxEntitlementsResult;
	static decodeCreateSharedGroupResultResponse(Response: PlayFabJsonObject): ClientCreateSharedGroupResult;
	static decodeCurrentGamesResultResponse(Response: PlayFabJsonObject): ClientCurrentGamesResult;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): ClientEmptyResponse;
	static decodeEmptyResultResponse(Response: PlayFabJsonObject): ClientEmptyResult;
	static decodeExecuteCloudScriptResultResponse(Response: PlayFabJsonObject): ClientExecuteCloudScriptResult;
	static decodeGameServerRegionsResultResponse(Response: PlayFabJsonObject): ClientGameServerRegionsResult;
	static decodeGetAccountInfoResultResponse(Response: PlayFabJsonObject): ClientGetAccountInfoResult;
	static decodeGetCatalogItemsResultResponse(Response: PlayFabJsonObject): ClientGetCatalogItemsResult;
	static decodeGetCharacterDataResultResponse(Response: PlayFabJsonObject): ClientGetCharacterDataResult;
	static decodeGetCharacterInventoryResultResponse(Response: PlayFabJsonObject): ClientGetCharacterInventoryResult;
	static decodeGetCharacterLeaderboardResultResponse(Response: PlayFabJsonObject): ClientGetCharacterLeaderboardResult;
	static decodeGetCharacterStatisticsResultResponse(Response: PlayFabJsonObject): ClientGetCharacterStatisticsResult;
	static decodeGetContentDownloadUrlResultResponse(Response: PlayFabJsonObject): ClientGetContentDownloadUrlResult;
	static decodeGetFriendLeaderboardAroundPlayerResultResponse(Response: PlayFabJsonObject): ClientGetFriendLeaderboardAroundPlayerResult;
	static decodeGetFriendsListResultResponse(Response: PlayFabJsonObject): ClientGetFriendsListResult;
	static decodeGetLeaderboardAroundCharacterResultResponse(Response: PlayFabJsonObject): ClientGetLeaderboardAroundCharacterResult;
	static decodeGetLeaderboardAroundPlayerResultResponse(Response: PlayFabJsonObject): ClientGetLeaderboardAroundPlayerResult;
	static decodeGetLeaderboardForUsersCharactersResultResponse(Response: PlayFabJsonObject): ClientGetLeaderboardForUsersCharactersResult;
	static decodeGetLeaderboardResultResponse(Response: PlayFabJsonObject): ClientGetLeaderboardResult;
	static decodeGetPaymentTokenResultResponse(Response: PlayFabJsonObject): ClientGetPaymentTokenResult;
	static decodeGetPhotonAuthenticationTokenResultResponse(Response: PlayFabJsonObject): ClientGetPhotonAuthenticationTokenResult;
	static decodeGetPlayerCombinedInfoResultResponse(Response: PlayFabJsonObject): ClientGetPlayerCombinedInfoResult;
	static decodeGetPlayerProfileResultResponse(Response: PlayFabJsonObject): ClientGetPlayerProfileResult;
	static decodeGetPlayerSegmentsResultResponse(Response: PlayFabJsonObject): ClientGetPlayerSegmentsResult;
	static decodeGetPlayerStatisticsResultResponse(Response: PlayFabJsonObject): ClientGetPlayerStatisticsResult;
	static decodeGetPlayerStatisticVersionsResultResponse(Response: PlayFabJsonObject): ClientGetPlayerStatisticVersionsResult;
	static decodeGetPlayerTagsResultResponse(Response: PlayFabJsonObject): ClientGetPlayerTagsResult;
	static decodeGetPlayerTradesResponseResponse(Response: PlayFabJsonObject): ClientGetPlayerTradesResponse;
	static decodeGetPlayFabIDsFromFacebookIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromFacebookIDsResult;
	static decodeGetPlayFabIDsFromFacebookInstantGamesIdsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult;
	static decodeGetPlayFabIDsFromGameCenterIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromGameCenterIDsResult;
	static decodeGetPlayFabIDsFromGenericIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromGenericIDsResult;
	static decodeGetPlayFabIDsFromGoogleIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromGoogleIDsResult;
	static decodeGetPlayFabIDsFromKongregateIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromKongregateIDsResult;
	static decodeGetPlayFabIDsFromNintendoSwitchDeviceIdsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
	static decodeGetPlayFabIDsFromPSNAccountIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromPSNAccountIDsResult;
	static decodeGetPlayFabIDsFromSteamIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromSteamIDsResult;
	static decodeGetPlayFabIDsFromTwitchIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromTwitchIDsResult;
	static decodeGetPlayFabIDsFromXboxLiveIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromXboxLiveIDsResult;
	static decodeGetPublisherDataResultResponse(Response: PlayFabJsonObject): ClientGetPublisherDataResult;
	static decodeGetPurchaseResultResponse(Response: PlayFabJsonObject): ClientGetPurchaseResult;
	static decodeGetSharedGroupDataResultResponse(Response: PlayFabJsonObject): ClientGetSharedGroupDataResult;
	static decodeGetStoreItemsResultResponse(Response: PlayFabJsonObject): ClientGetStoreItemsResult;
	static decodeGetTimeResultResponse(Response: PlayFabJsonObject): ClientGetTimeResult;
	static decodeGetTitleDataResultResponse(Response: PlayFabJsonObject): ClientGetTitleDataResult;
	static decodeGetTitleNewsResultResponse(Response: PlayFabJsonObject): ClientGetTitleNewsResult;
	static decodeGetTitlePublicKeyResultResponse(Response: PlayFabJsonObject): ClientGetTitlePublicKeyResult;
	static decodeGetTradeStatusResponseResponse(Response: PlayFabJsonObject): ClientGetTradeStatusResponse;
	static decodeGetUserDataResultResponse(Response: PlayFabJsonObject): ClientGetUserDataResult;
	static decodeGetUserInventoryResultResponse(Response: PlayFabJsonObject): ClientGetUserInventoryResult;
	static decodeGetWindowsHelloChallengeResponseResponse(Response: PlayFabJsonObject): ClientGetWindowsHelloChallengeResponse;
	static decodeGrantCharacterToUserResultResponse(Response: PlayFabJsonObject): ClientGrantCharacterToUserResult;
	static decodeLinkAndroidDeviceIDResultResponse(Response: PlayFabJsonObject): ClientLinkAndroidDeviceIDResult;
	static decodeLinkCustomIDResultResponse(Response: PlayFabJsonObject): ClientLinkCustomIDResult;
	static decodeLinkFacebookAccountResultResponse(Response: PlayFabJsonObject): ClientLinkFacebookAccountResult;
	static decodeLinkFacebookInstantGamesIdResultResponse(Response: PlayFabJsonObject): ClientLinkFacebookInstantGamesIdResult;
	static decodeLinkGameCenterAccountResultResponse(Response: PlayFabJsonObject): ClientLinkGameCenterAccountResult;
	static decodeLinkGoogleAccountResultResponse(Response: PlayFabJsonObject): ClientLinkGoogleAccountResult;
	static decodeLinkIOSDeviceIDResultResponse(Response: PlayFabJsonObject): ClientLinkIOSDeviceIDResult;
	static decodeLinkKongregateAccountResultResponse(Response: PlayFabJsonObject): ClientLinkKongregateAccountResult;
	static decodeLinkNintendoSwitchDeviceIdResultResponse(Response: PlayFabJsonObject): ClientLinkNintendoSwitchDeviceIdResult;
	static decodeLinkPSNAccountResultResponse(Response: PlayFabJsonObject): ClientLinkPSNAccountResult;
	static decodeLinkSteamAccountResultResponse(Response: PlayFabJsonObject): ClientLinkSteamAccountResult;
	static decodeLinkTwitchAccountResultResponse(Response: PlayFabJsonObject): ClientLinkTwitchAccountResult;
	static decodeLinkWindowsHelloAccountResponseResponse(Response: PlayFabJsonObject): ClientLinkWindowsHelloAccountResponse;
	static decodeLinkXboxAccountResultResponse(Response: PlayFabJsonObject): ClientLinkXboxAccountResult;
	static decodeListUsersCharactersResultResponse(Response: PlayFabJsonObject): ClientListUsersCharactersResult;
	static decodeLoginResultResponse(Response: PlayFabJsonObject): ClientLoginResult;
	static decodeMatchmakeResultResponse(Response: PlayFabJsonObject): ClientMatchmakeResult;
	static decodeModifyUserVirtualCurrencyResultResponse(Response: PlayFabJsonObject): ClientModifyUserVirtualCurrencyResult;
	static decodeOpenTradeResponseResponse(Response: PlayFabJsonObject): ClientOpenTradeResponse;
	static decodePayForPurchaseResultResponse(Response: PlayFabJsonObject): ClientPayForPurchaseResult;
	static decodePurchaseItemResultResponse(Response: PlayFabJsonObject): ClientPurchaseItemResult;
	static decodeRedeemCouponResultResponse(Response: PlayFabJsonObject): ClientRedeemCouponResult;
	static decodeRegisterForIOSPushNotificationResultResponse(Response: PlayFabJsonObject): ClientRegisterForIOSPushNotificationResult;
	static decodeRegisterPlayFabUserResultResponse(Response: PlayFabJsonObject): ClientRegisterPlayFabUserResult;
	static decodeRemoveContactEmailResultResponse(Response: PlayFabJsonObject): ClientRemoveContactEmailResult;
	static decodeRemoveFriendResultResponse(Response: PlayFabJsonObject): ClientRemoveFriendResult;
	static decodeRemoveGenericIDResultResponse(Response: PlayFabJsonObject): ClientRemoveGenericIDResult;
	static decodeRemoveSharedGroupMembersResultResponse(Response: PlayFabJsonObject): ClientRemoveSharedGroupMembersResult;
	static decodeReportPlayerClientResultResponse(Response: PlayFabJsonObject): ClientReportPlayerClientResult;
	static decodeRestoreIOSPurchasesResultResponse(Response: PlayFabJsonObject): ClientRestoreIOSPurchasesResult;
	static decodeSendAccountRecoveryEmailResultResponse(Response: PlayFabJsonObject): ClientSendAccountRecoveryEmailResult;
	static decodeSetFriendTagsResultResponse(Response: PlayFabJsonObject): ClientSetFriendTagsResult;
	static decodeSetPlayerSecretResultResponse(Response: PlayFabJsonObject): ClientSetPlayerSecretResult;
	static decodeStartGameResultResponse(Response: PlayFabJsonObject): ClientStartGameResult;
	static decodeStartPurchaseResultResponse(Response: PlayFabJsonObject): ClientStartPurchaseResult;
	static decodeUnlinkAndroidDeviceIDResultResponse(Response: PlayFabJsonObject): ClientUnlinkAndroidDeviceIDResult;
	static decodeUnlinkCustomIDResultResponse(Response: PlayFabJsonObject): ClientUnlinkCustomIDResult;
	static decodeUnlinkFacebookAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkFacebookAccountResult;
	static decodeUnlinkFacebookInstantGamesIdResultResponse(Response: PlayFabJsonObject): ClientUnlinkFacebookInstantGamesIdResult;
	static decodeUnlinkGameCenterAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkGameCenterAccountResult;
	static decodeUnlinkGoogleAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkGoogleAccountResult;
	static decodeUnlinkIOSDeviceIDResultResponse(Response: PlayFabJsonObject): ClientUnlinkIOSDeviceIDResult;
	static decodeUnlinkKongregateAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkKongregateAccountResult;
	static decodeUnlinkNintendoSwitchDeviceIdResultResponse(Response: PlayFabJsonObject): ClientUnlinkNintendoSwitchDeviceIdResult;
	static decodeUnlinkPSNAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkPSNAccountResult;
	static decodeUnlinkSteamAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkSteamAccountResult;
	static decodeUnlinkTwitchAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkTwitchAccountResult;
	static decodeUnlinkWindowsHelloAccountResponseResponse(Response: PlayFabJsonObject): ClientUnlinkWindowsHelloAccountResponse;
	static decodeUnlinkXboxAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkXboxAccountResult;
	static decodeUnlockContainerItemResultResponse(Response: PlayFabJsonObject): ClientUnlockContainerItemResult;
	static decodeUpdateCharacterDataResultResponse(Response: PlayFabJsonObject): ClientUpdateCharacterDataResult;
	static decodeUpdateCharacterStatisticsResultResponse(Response: PlayFabJsonObject): ClientUpdateCharacterStatisticsResult;
	static decodeUpdatePlayerStatisticsResultResponse(Response: PlayFabJsonObject): ClientUpdatePlayerStatisticsResult;
	static decodeUpdateSharedGroupDataResultResponse(Response: PlayFabJsonObject): ClientUpdateSharedGroupDataResult;
	static decodeUpdateUserDataResultResponse(Response: PlayFabJsonObject): ClientUpdateUserDataResult;
	static decodeUpdateUserTitleDisplayNameResultResponse(Response: PlayFabJsonObject): ClientUpdateUserTitleDisplayNameResult;
	static decodeValidateAmazonReceiptResultResponse(Response: PlayFabJsonObject): ClientValidateAmazonReceiptResult;
	static decodeValidateGooglePlayPurchaseResultResponse(Response: PlayFabJsonObject): ClientValidateGooglePlayPurchaseResult;
	static decodeValidateIOSReceiptResultResponse(Response: PlayFabJsonObject): ClientValidateIOSReceiptResult;
	static decodeValidateWindowsReceiptResultResponse(Response: PlayFabJsonObject): ClientValidateWindowsReceiptResult;
	static decodeWriteEventResponseResponse(Response: PlayFabJsonObject): ClientWriteEventResponse;
	static decodeGetEntityTokenResponseResponse(Response: PlayFabJsonObject): AuthenticationGetEntityTokenResponse;
	static decodeAddNewsResultResponse(Response: PlayFabJsonObject): AdminAddNewsResult;
	static decodeAddPlayerTagResultResponse(Response: PlayFabJsonObject): AdminAddPlayerTagResult;
	static decodeAddServerBuildResultResponse(Response: PlayFabJsonObject): AdminAddServerBuildResult;
	static decodeBanUsersResultResponse(Response: PlayFabJsonObject): AdminBanUsersResult;
	static decodeBlankResultResponse(Response: PlayFabJsonObject): AdminBlankResult;
	static decodeCheckLimitedEditionItemAvailabilityResultResponse(Response: PlayFabJsonObject): AdminCheckLimitedEditionItemAvailabilityResult;
	static decodeCreatePlayerSharedSecretResultResponse(Response: PlayFabJsonObject): AdminCreatePlayerSharedSecretResult;
	static decodeCreatePlayerStatisticDefinitionResultResponse(Response: PlayFabJsonObject): AdminCreatePlayerStatisticDefinitionResult;
	static decodeCreateTaskResultResponse(Response: PlayFabJsonObject): AdminCreateTaskResult;
	static decodeDeleteMasterPlayerAccountResultResponse(Response: PlayFabJsonObject): AdminDeleteMasterPlayerAccountResult;
	static decodeDeletePlayerResultResponse(Response: PlayFabJsonObject): AdminDeletePlayerResult;
	static decodeDeletePlayerSharedSecretResultResponse(Response: PlayFabJsonObject): AdminDeletePlayerSharedSecretResult;
	static decodeDeleteStoreResultResponse(Response: PlayFabJsonObject): AdminDeleteStoreResult;
	static decodeDeleteTitleResultResponse(Response: PlayFabJsonObject): AdminDeleteTitleResult;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): AdminEmptyResponse;
	static decodeExportMasterPlayerDataResultResponse(Response: PlayFabJsonObject): AdminExportMasterPlayerDataResult;
	static decodeGetActionsOnPlayersInSegmentTaskInstanceResultResponse(Response: PlayFabJsonObject): AdminGetActionsOnPlayersInSegmentTaskInstanceResult;
	static decodeGetAllSegmentsResultResponse(Response: PlayFabJsonObject): AdminGetAllSegmentsResult;
	static decodeGetCatalogItemsResultResponse(Response: PlayFabJsonObject): AdminGetCatalogItemsResult;
	static decodeGetCloudScriptRevisionResultResponse(Response: PlayFabJsonObject): AdminGetCloudScriptRevisionResult;
	static decodeGetCloudScriptTaskInstanceResultResponse(Response: PlayFabJsonObject): AdminGetCloudScriptTaskInstanceResult;
	static decodeGetCloudScriptVersionsResultResponse(Response: PlayFabJsonObject): AdminGetCloudScriptVersionsResult;
	static decodeGetContentListResultResponse(Response: PlayFabJsonObject): AdminGetContentListResult;
	static decodeGetContentUploadUrlResultResponse(Response: PlayFabJsonObject): AdminGetContentUploadUrlResult;
	static decodeGetDataReportResultResponse(Response: PlayFabJsonObject): AdminGetDataReportResult;
	static decodeGetMatchmakerGameInfoResultResponse(Response: PlayFabJsonObject): AdminGetMatchmakerGameInfoResult;
	static decodeGetMatchmakerGameModesResultResponse(Response: PlayFabJsonObject): AdminGetMatchmakerGameModesResult;
	static decodeGetPlayedTitleListResultResponse(Response: PlayFabJsonObject): AdminGetPlayedTitleListResult;
	static decodeGetPlayerIdFromAuthTokenResultResponse(Response: PlayFabJsonObject): AdminGetPlayerIdFromAuthTokenResult;
	static decodeGetPlayerProfileResultResponse(Response: PlayFabJsonObject): AdminGetPlayerProfileResult;
	static decodeGetPlayerSegmentsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerSegmentsResult;
	static decodeGetPlayerSharedSecretsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerSharedSecretsResult;
	static decodeGetPlayersInSegmentResultResponse(Response: PlayFabJsonObject): AdminGetPlayersInSegmentResult;
	static decodeGetPlayerStatisticDefinitionsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerStatisticDefinitionsResult;
	static decodeGetPlayerStatisticVersionsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerStatisticVersionsResult;
	static decodeGetPlayerTagsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerTagsResult;
	static decodeGetPolicyResponseResponse(Response: PlayFabJsonObject): AdminGetPolicyResponse;
	static decodeGetPublisherDataResultResponse(Response: PlayFabJsonObject): AdminGetPublisherDataResult;
	static decodeGetRandomResultTablesResultResponse(Response: PlayFabJsonObject): AdminGetRandomResultTablesResult;
	static decodeGetServerBuildInfoResultResponse(Response: PlayFabJsonObject): AdminGetServerBuildInfoResult;
	static decodeGetServerBuildUploadURLResultResponse(Response: PlayFabJsonObject): AdminGetServerBuildUploadURLResult;
	static decodeGetStoreItemsResultResponse(Response: PlayFabJsonObject): AdminGetStoreItemsResult;
	static decodeGetTaskInstancesResultResponse(Response: PlayFabJsonObject): AdminGetTaskInstancesResult;
	static decodeGetTasksResultResponse(Response: PlayFabJsonObject): AdminGetTasksResult;
	static decodeGetTitleDataResultResponse(Response: PlayFabJsonObject): AdminGetTitleDataResult;
	static decodeGetUserBansResultResponse(Response: PlayFabJsonObject): AdminGetUserBansResult;
	static decodeGetUserDataResultResponse(Response: PlayFabJsonObject): AdminGetUserDataResult;
	static decodeGetUserInventoryResultResponse(Response: PlayFabJsonObject): AdminGetUserInventoryResult;
	static decodeGrantItemsToUsersResultResponse(Response: PlayFabJsonObject): AdminGrantItemsToUsersResult;
	static decodeIncrementLimitedEditionItemAvailabilityResultResponse(Response: PlayFabJsonObject): AdminIncrementLimitedEditionItemAvailabilityResult;
	static decodeIncrementPlayerStatisticVersionResultResponse(Response: PlayFabJsonObject): AdminIncrementPlayerStatisticVersionResult;
	static decodeListBuildsResultResponse(Response: PlayFabJsonObject): AdminListBuildsResult;
	static decodeListVirtualCurrencyTypesResultResponse(Response: PlayFabJsonObject): AdminListVirtualCurrencyTypesResult;
	static decodeLookupUserAccountInfoResultResponse(Response: PlayFabJsonObject): AdminLookupUserAccountInfoResult;
	static decodeModifyMatchmakerGameModesResultResponse(Response: PlayFabJsonObject): AdminModifyMatchmakerGameModesResult;
	static decodeModifyServerBuildResultResponse(Response: PlayFabJsonObject): AdminModifyServerBuildResult;
	static decodeModifyUserVirtualCurrencyResultResponse(Response: PlayFabJsonObject): AdminModifyUserVirtualCurrencyResult;
	static decodeRefundPurchaseResponseResponse(Response: PlayFabJsonObject): AdminRefundPurchaseResponse;
	static decodeRemovePlayerTagResultResponse(Response: PlayFabJsonObject): AdminRemovePlayerTagResult;
	static decodeRemoveServerBuildResultResponse(Response: PlayFabJsonObject): AdminRemoveServerBuildResult;
	static decodeResetCharacterStatisticsResultResponse(Response: PlayFabJsonObject): AdminResetCharacterStatisticsResult;
	static decodeResetPasswordResultResponse(Response: PlayFabJsonObject): AdminResetPasswordResult;
	static decodeResetUserStatisticsResultResponse(Response: PlayFabJsonObject): AdminResetUserStatisticsResult;
	static decodeResolvePurchaseDisputeResponseResponse(Response: PlayFabJsonObject): AdminResolvePurchaseDisputeResponse;
	static decodeRevokeAllBansForUserResultResponse(Response: PlayFabJsonObject): AdminRevokeAllBansForUserResult;
	static decodeRevokeBansResultResponse(Response: PlayFabJsonObject): AdminRevokeBansResult;
	static decodeRevokeInventoryItemsResultResponse(Response: PlayFabJsonObject): AdminRevokeInventoryItemsResult;
	static decodeRevokeInventoryResultResponse(Response: PlayFabJsonObject): AdminRevokeInventoryResult;
	static decodeRunTaskResultResponse(Response: PlayFabJsonObject): AdminRunTaskResult;
	static decodeSendAccountRecoveryEmailResultResponse(Response: PlayFabJsonObject): AdminSendAccountRecoveryEmailResult;
	static decodeSetPlayerSecretResultResponse(Response: PlayFabJsonObject): AdminSetPlayerSecretResult;
	static decodeSetPublishedRevisionResultResponse(Response: PlayFabJsonObject): AdminSetPublishedRevisionResult;
	static decodeSetPublisherDataResultResponse(Response: PlayFabJsonObject): AdminSetPublisherDataResult;
	static decodeSetTitleDataResultResponse(Response: PlayFabJsonObject): AdminSetTitleDataResult;
	static decodeSetupPushNotificationResultResponse(Response: PlayFabJsonObject): AdminSetupPushNotificationResult;
	static decodeUpdateBansResultResponse(Response: PlayFabJsonObject): AdminUpdateBansResult;
	static decodeUpdateCatalogItemsResultResponse(Response: PlayFabJsonObject): AdminUpdateCatalogItemsResult;
	static decodeUpdateCloudScriptResultResponse(Response: PlayFabJsonObject): AdminUpdateCloudScriptResult;
	static decodeUpdatePlayerSharedSecretResultResponse(Response: PlayFabJsonObject): AdminUpdatePlayerSharedSecretResult;
	static decodeUpdatePlayerStatisticDefinitionResultResponse(Response: PlayFabJsonObject): AdminUpdatePlayerStatisticDefinitionResult;
	static decodeUpdatePolicyResponseResponse(Response: PlayFabJsonObject): AdminUpdatePolicyResponse;
	static decodeUpdateRandomResultTablesResultResponse(Response: PlayFabJsonObject): AdminUpdateRandomResultTablesResult;
	static decodeUpdateStoreItemsResultResponse(Response: PlayFabJsonObject): AdminUpdateStoreItemsResult;
	static decodeUpdateUserDataResultResponse(Response: PlayFabJsonObject): AdminUpdateUserDataResult;
	static decodeUpdateUserTitleDisplayNameResultResponse(Response: PlayFabJsonObject): AdminUpdateUserTitleDisplayNameResult;
}

declare class PlayFabBaseModel { 
	responseError: PlayFabError;
	responseData: PlayFabJsonObject;
	clone() : PlayFabBaseModel;
	static C(Other: UObject | any): PlayFabBaseModel;
}

declare class PlayFabAdminAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabAdminAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabAdminAPI;
	static GetDefaultObject(): PlayFabAdminAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabAdminAPI;
	HelperUpdateUserTitleDisplayName(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserPublisherReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserPublisherInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateTask(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateStoreItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateRandomResultTables(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdatePolicy(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdatePlayerStatisticDefinition(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdatePlayerSharedSecret(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateCloudScript(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateCatalogItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateBans(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSubtractUserVirtualCurrency(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetupPushNotification(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetTitleInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetTitleData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetStoreItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetPublishedRevision(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetPlayerSecret(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetCatalogItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSendAccountRecoveryEmail(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRunTask(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRevokeInventoryItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRevokeInventoryItem(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRevokeBans(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRevokeAllBansForUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperResolvePurchaseDispute(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperResetUserStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperResetPassword(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperResetCharacterStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveVirtualCurrencyTypes(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveServerBuild(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemovePlayerTag(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRefundPurchase(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperModifyServerBuild(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperModifyMatchmakerGameModes(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListVirtualCurrencyTypes(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListServerBuilds(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperIncrementPlayerStatisticVersion(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperIncrementLimitedEditionItemAvailability(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGrantItemsToUsers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserPublisherReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserPublisherInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserInventory(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserBans(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserAccountInfo(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTitleInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTitleData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTasks(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTaskInstances(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetStoreItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetServerBuildUploadUrl(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetServerBuildInfo(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetRandomResultTables(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPolicy(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerTags(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerStatisticVersions(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerStatisticDefinitions(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayersInSegment(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerSharedSecrets(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerSegments(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerProfile(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerIdFromAuthToken(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayedTitleList(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetMatchmakerGameModes(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetMatchmakerGameInfo(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetDataReport(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetContentUploadUrl(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetContentList(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCloudScriptVersions(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCloudScriptTaskInstance(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCloudScriptRevision(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCatalogItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetAllSegments(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetActionsOnPlayersInSegmentTaskInstance(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperExportMasterPlayerData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteTitle(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteTask(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteStore(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeletePlayerSharedSecret(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeletePlayer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteMasterPlayerAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteContent(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreatePlayerStatisticDefinition(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreatePlayerSharedSecret(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreateCloudScriptTask(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreateActionsOnPlayersInSegmentTask(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCheckLimitedEditionItemAvailability(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperBanUsers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddVirtualCurrencyTypes(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddUserVirtualCurrency(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddServerBuild(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddPlayerTag(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddNews(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAbortTaskInstance(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabAdminAPI;
}

declare class PlayFabAdminModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabAdminModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabAdminModelDecoder;
	static GetDefaultObject(): PlayFabAdminModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabAdminModelDecoder;
	static decodeUpdateUserTitleDisplayNameResultResponse(Response: PlayFabJsonObject): AdminUpdateUserTitleDisplayNameResult;
	static decodeUpdateUserDataResultResponse(Response: PlayFabJsonObject): AdminUpdateUserDataResult;
	static decodeUpdateStoreItemsResultResponse(Response: PlayFabJsonObject): AdminUpdateStoreItemsResult;
	static decodeUpdateRandomResultTablesResultResponse(Response: PlayFabJsonObject): AdminUpdateRandomResultTablesResult;
	static decodeUpdatePolicyResponseResponse(Response: PlayFabJsonObject): AdminUpdatePolicyResponse;
	static decodeUpdatePlayerStatisticDefinitionResultResponse(Response: PlayFabJsonObject): AdminUpdatePlayerStatisticDefinitionResult;
	static decodeUpdatePlayerSharedSecretResultResponse(Response: PlayFabJsonObject): AdminUpdatePlayerSharedSecretResult;
	static decodeUpdateCloudScriptResultResponse(Response: PlayFabJsonObject): AdminUpdateCloudScriptResult;
	static decodeUpdateCatalogItemsResultResponse(Response: PlayFabJsonObject): AdminUpdateCatalogItemsResult;
	static decodeUpdateBansResultResponse(Response: PlayFabJsonObject): AdminUpdateBansResult;
	static decodeSetupPushNotificationResultResponse(Response: PlayFabJsonObject): AdminSetupPushNotificationResult;
	static decodeSetTitleDataResultResponse(Response: PlayFabJsonObject): AdminSetTitleDataResult;
	static decodeSetPublisherDataResultResponse(Response: PlayFabJsonObject): AdminSetPublisherDataResult;
	static decodeSetPublishedRevisionResultResponse(Response: PlayFabJsonObject): AdminSetPublishedRevisionResult;
	static decodeSetPlayerSecretResultResponse(Response: PlayFabJsonObject): AdminSetPlayerSecretResult;
	static decodeSendAccountRecoveryEmailResultResponse(Response: PlayFabJsonObject): AdminSendAccountRecoveryEmailResult;
	static decodeRunTaskResultResponse(Response: PlayFabJsonObject): AdminRunTaskResult;
	static decodeRevokeInventoryResultResponse(Response: PlayFabJsonObject): AdminRevokeInventoryResult;
	static decodeRevokeInventoryItemsResultResponse(Response: PlayFabJsonObject): AdminRevokeInventoryItemsResult;
	static decodeRevokeBansResultResponse(Response: PlayFabJsonObject): AdminRevokeBansResult;
	static decodeRevokeAllBansForUserResultResponse(Response: PlayFabJsonObject): AdminRevokeAllBansForUserResult;
	static decodeResolvePurchaseDisputeResponseResponse(Response: PlayFabJsonObject): AdminResolvePurchaseDisputeResponse;
	static decodeResetUserStatisticsResultResponse(Response: PlayFabJsonObject): AdminResetUserStatisticsResult;
	static decodeResetPasswordResultResponse(Response: PlayFabJsonObject): AdminResetPasswordResult;
	static decodeResetCharacterStatisticsResultResponse(Response: PlayFabJsonObject): AdminResetCharacterStatisticsResult;
	static decodeRemoveServerBuildResultResponse(Response: PlayFabJsonObject): AdminRemoveServerBuildResult;
	static decodeRemovePlayerTagResultResponse(Response: PlayFabJsonObject): AdminRemovePlayerTagResult;
	static decodeRefundPurchaseResponseResponse(Response: PlayFabJsonObject): AdminRefundPurchaseResponse;
	static decodeModifyUserVirtualCurrencyResultResponse(Response: PlayFabJsonObject): AdminModifyUserVirtualCurrencyResult;
	static decodeModifyServerBuildResultResponse(Response: PlayFabJsonObject): AdminModifyServerBuildResult;
	static decodeModifyMatchmakerGameModesResultResponse(Response: PlayFabJsonObject): AdminModifyMatchmakerGameModesResult;
	static decodeLookupUserAccountInfoResultResponse(Response: PlayFabJsonObject): AdminLookupUserAccountInfoResult;
	static decodeListVirtualCurrencyTypesResultResponse(Response: PlayFabJsonObject): AdminListVirtualCurrencyTypesResult;
	static decodeListBuildsResultResponse(Response: PlayFabJsonObject): AdminListBuildsResult;
	static decodeIncrementPlayerStatisticVersionResultResponse(Response: PlayFabJsonObject): AdminIncrementPlayerStatisticVersionResult;
	static decodeIncrementLimitedEditionItemAvailabilityResultResponse(Response: PlayFabJsonObject): AdminIncrementLimitedEditionItemAvailabilityResult;
	static decodeGrantItemsToUsersResultResponse(Response: PlayFabJsonObject): AdminGrantItemsToUsersResult;
	static decodeGetUserInventoryResultResponse(Response: PlayFabJsonObject): AdminGetUserInventoryResult;
	static decodeGetUserDataResultResponse(Response: PlayFabJsonObject): AdminGetUserDataResult;
	static decodeGetUserBansResultResponse(Response: PlayFabJsonObject): AdminGetUserBansResult;
	static decodeGetTitleDataResultResponse(Response: PlayFabJsonObject): AdminGetTitleDataResult;
	static decodeGetTasksResultResponse(Response: PlayFabJsonObject): AdminGetTasksResult;
	static decodeGetTaskInstancesResultResponse(Response: PlayFabJsonObject): AdminGetTaskInstancesResult;
	static decodeGetStoreItemsResultResponse(Response: PlayFabJsonObject): AdminGetStoreItemsResult;
	static decodeGetServerBuildUploadURLResultResponse(Response: PlayFabJsonObject): AdminGetServerBuildUploadURLResult;
	static decodeGetServerBuildInfoResultResponse(Response: PlayFabJsonObject): AdminGetServerBuildInfoResult;
	static decodeGetRandomResultTablesResultResponse(Response: PlayFabJsonObject): AdminGetRandomResultTablesResult;
	static decodeGetPublisherDataResultResponse(Response: PlayFabJsonObject): AdminGetPublisherDataResult;
	static decodeGetPolicyResponseResponse(Response: PlayFabJsonObject): AdminGetPolicyResponse;
	static decodeGetPlayerTagsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerTagsResult;
	static decodeGetPlayerStatisticVersionsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerStatisticVersionsResult;
	static decodeGetPlayerStatisticDefinitionsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerStatisticDefinitionsResult;
	static decodeGetPlayersInSegmentResultResponse(Response: PlayFabJsonObject): AdminGetPlayersInSegmentResult;
	static decodeGetPlayerSharedSecretsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerSharedSecretsResult;
	static decodeGetPlayerSegmentsResultResponse(Response: PlayFabJsonObject): AdminGetPlayerSegmentsResult;
	static decodeGetPlayerProfileResultResponse(Response: PlayFabJsonObject): AdminGetPlayerProfileResult;
	static decodeGetPlayerIdFromAuthTokenResultResponse(Response: PlayFabJsonObject): AdminGetPlayerIdFromAuthTokenResult;
	static decodeGetPlayedTitleListResultResponse(Response: PlayFabJsonObject): AdminGetPlayedTitleListResult;
	static decodeGetMatchmakerGameModesResultResponse(Response: PlayFabJsonObject): AdminGetMatchmakerGameModesResult;
	static decodeGetMatchmakerGameInfoResultResponse(Response: PlayFabJsonObject): AdminGetMatchmakerGameInfoResult;
	static decodeGetDataReportResultResponse(Response: PlayFabJsonObject): AdminGetDataReportResult;
	static decodeGetContentUploadUrlResultResponse(Response: PlayFabJsonObject): AdminGetContentUploadUrlResult;
	static decodeGetContentListResultResponse(Response: PlayFabJsonObject): AdminGetContentListResult;
	static decodeGetCloudScriptVersionsResultResponse(Response: PlayFabJsonObject): AdminGetCloudScriptVersionsResult;
	static decodeGetCloudScriptTaskInstanceResultResponse(Response: PlayFabJsonObject): AdminGetCloudScriptTaskInstanceResult;
	static decodeGetCloudScriptRevisionResultResponse(Response: PlayFabJsonObject): AdminGetCloudScriptRevisionResult;
	static decodeGetCatalogItemsResultResponse(Response: PlayFabJsonObject): AdminGetCatalogItemsResult;
	static decodeGetAllSegmentsResultResponse(Response: PlayFabJsonObject): AdminGetAllSegmentsResult;
	static decodeGetActionsOnPlayersInSegmentTaskInstanceResultResponse(Response: PlayFabJsonObject): AdminGetActionsOnPlayersInSegmentTaskInstanceResult;
	static decodeExportMasterPlayerDataResultResponse(Response: PlayFabJsonObject): AdminExportMasterPlayerDataResult;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): AdminEmptyResponse;
	static decodeDeleteTitleResultResponse(Response: PlayFabJsonObject): AdminDeleteTitleResult;
	static decodeDeleteStoreResultResponse(Response: PlayFabJsonObject): AdminDeleteStoreResult;
	static decodeDeletePlayerSharedSecretResultResponse(Response: PlayFabJsonObject): AdminDeletePlayerSharedSecretResult;
	static decodeDeletePlayerResultResponse(Response: PlayFabJsonObject): AdminDeletePlayerResult;
	static decodeDeleteMasterPlayerAccountResultResponse(Response: PlayFabJsonObject): AdminDeleteMasterPlayerAccountResult;
	static decodeCreateTaskResultResponse(Response: PlayFabJsonObject): AdminCreateTaskResult;
	static decodeCreatePlayerStatisticDefinitionResultResponse(Response: PlayFabJsonObject): AdminCreatePlayerStatisticDefinitionResult;
	static decodeCreatePlayerSharedSecretResultResponse(Response: PlayFabJsonObject): AdminCreatePlayerSharedSecretResult;
	static decodeCheckLimitedEditionItemAvailabilityResultResponse(Response: PlayFabJsonObject): AdminCheckLimitedEditionItemAvailabilityResult;
	static decodeBlankResultResponse(Response: PlayFabJsonObject): AdminBlankResult;
	static decodeBanUsersResultResponse(Response: PlayFabJsonObject): AdminBanUsersResult;
	static decodeAddServerBuildResultResponse(Response: PlayFabJsonObject): AdminAddServerBuildResult;
	static decodeAddPlayerTagResultResponse(Response: PlayFabJsonObject): AdminAddPlayerTagResult;
	static decodeAddNewsResultResponse(Response: PlayFabJsonObject): AdminAddNewsResult;
	static C(Other: UObject | any): PlayFabAdminModelDecoder;
}

declare class PlayFabAuthenticationAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabAuthenticationAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabAuthenticationAPI;
	static GetDefaultObject(): PlayFabAuthenticationAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabAuthenticationAPI;
	HelperGetEntityToken(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabAuthenticationAPI;
}

declare class PlayFabAuthenticationModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabAuthenticationModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabAuthenticationModelDecoder;
	static GetDefaultObject(): PlayFabAuthenticationModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabAuthenticationModelDecoder;
	static decodeGetEntityTokenResponseResponse(Response: PlayFabJsonObject): AuthenticationGetEntityTokenResponse;
	static C(Other: UObject | any): PlayFabAuthenticationModelDecoder;
}

declare class PlayFabClientAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabClientAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabClientAPI;
	static GetDefaultObject(): PlayFabClientAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabClientAPI;
	HelperWriteTitleEvent(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperWritePlayerEvent(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperWriteCharacterEvent(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperValidateWindowsStoreReceipt(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperValidateIOSReceipt(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperValidateGooglePlayPurchase(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperValidateAmazonIAPReceipt(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserTitleDisplayName(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateSharedGroupData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdatePlayerStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateCharacterStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateCharacterData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateAvatarUrl(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlockContainerItem(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlockContainerInstance(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkXboxAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkWindowsHello(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkTwitch(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkSteamAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkPSNAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkOpenIdConnect(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkNintendoSwitchDeviceId(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkKongregate(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkIOSDeviceID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkGoogleAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkGameCenterAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkFacebookInstantGamesId(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkFacebookAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkCustomID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkAndroidDeviceID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSubtractUserVirtualCurrency(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperStartPurchase(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperStartGame(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetPlayerSecret(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetFriendTags(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSendAccountRecoveryEmail(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRestoreIOSPurchases(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperReportPlayer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperReportDeviceInfo(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveSharedGroupMembers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveGenericID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveFriend(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveContactEmail(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRegisterWithWindowsHello(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRegisterPlayFabUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRegisterForIOSPushNotification(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRefreshPSNAuthToken(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRedeemCoupon(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperPurchaseItem(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperPayForPurchase(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperOpenTrade(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperMatchmake(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithXbox(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithWindowsHello(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithTwitch(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithSteam(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithPSN(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithPlayFab(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithOpenIdConnect(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithNintendoSwitchDeviceId(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithKongregate(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithIOSDeviceID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithGoogleAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithGameCenter(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithFacebookInstantGamesId(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithFacebook(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithEmailAddress(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithCustomID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithAndroidDeviceID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkXboxAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkWindowsHello(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkTwitch(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkSteamAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkPSNAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkOpenIdConnect(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkNintendoSwitchDeviceId(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkKongregate(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkIOSDeviceID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkGoogleAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkGameCenterAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkFacebookInstantGamesId(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkFacebookAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkCustomID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkAndroidDeviceID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGrantCharacterToUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetWindowsHelloChallenge(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserPublisherReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserInventory(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTradeStatus(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTitlePublicKey(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTitleNews(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTitleData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTime(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetStoreItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetSharedGroupData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPurchase(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromXboxLiveIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromTwitchIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromSteamIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromPSNAccountIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromNintendoSwitchDeviceIds(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromKongregateIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromGoogleIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromGenericIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromGameCenterIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromFacebookInstantGamesIds(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromFacebookIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerTrades(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerTags(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerStatisticVersions(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerSegments(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerProfile(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerCombinedInfo(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPhotonAuthenticationToken(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPaymentToken(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetLeaderboardForUserCharacters(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetLeaderboardAroundPlayer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetLeaderboardAroundCharacter(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetLeaderboard(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetGameServerRegions(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetFriendsList(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetFriendLeaderboardAroundPlayer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetFriendLeaderboard(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCurrentGames(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetContentDownloadUrl(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterLeaderboard(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterInventory(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCatalogItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetAllUsersCharacters(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetAccountInfo(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperExecuteCloudScript(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreateSharedGroup(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperConsumeXboxEntitlements(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperConsumePSNEntitlements(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperConsumeItem(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperConfirmPurchase(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCancelTrade(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAttributeInstall(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAndroidDevicePushNotificationRegistration(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddUserVirtualCurrency(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddUsernamePassword(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddSharedGroupMembers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddOrUpdateContactEmail(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddGenericID(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddFriend(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAcceptTrade(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabClientAPI;
}

declare class PlayFabClientModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabClientModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabClientModelDecoder;
	static GetDefaultObject(): PlayFabClientModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabClientModelDecoder;
	static decodeWriteEventResponseResponse(Response: PlayFabJsonObject): ClientWriteEventResponse;
	static decodeValidateWindowsReceiptResultResponse(Response: PlayFabJsonObject): ClientValidateWindowsReceiptResult;
	static decodeValidateIOSReceiptResultResponse(Response: PlayFabJsonObject): ClientValidateIOSReceiptResult;
	static decodeValidateGooglePlayPurchaseResultResponse(Response: PlayFabJsonObject): ClientValidateGooglePlayPurchaseResult;
	static decodeValidateAmazonReceiptResultResponse(Response: PlayFabJsonObject): ClientValidateAmazonReceiptResult;
	static decodeUpdateUserTitleDisplayNameResultResponse(Response: PlayFabJsonObject): ClientUpdateUserTitleDisplayNameResult;
	static decodeUpdateUserDataResultResponse(Response: PlayFabJsonObject): ClientUpdateUserDataResult;
	static decodeUpdateSharedGroupDataResultResponse(Response: PlayFabJsonObject): ClientUpdateSharedGroupDataResult;
	static decodeUpdatePlayerStatisticsResultResponse(Response: PlayFabJsonObject): ClientUpdatePlayerStatisticsResult;
	static decodeUpdateCharacterStatisticsResultResponse(Response: PlayFabJsonObject): ClientUpdateCharacterStatisticsResult;
	static decodeUpdateCharacterDataResultResponse(Response: PlayFabJsonObject): ClientUpdateCharacterDataResult;
	static decodeUnlockContainerItemResultResponse(Response: PlayFabJsonObject): ClientUnlockContainerItemResult;
	static decodeUnlinkXboxAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkXboxAccountResult;
	static decodeUnlinkWindowsHelloAccountResponseResponse(Response: PlayFabJsonObject): ClientUnlinkWindowsHelloAccountResponse;
	static decodeUnlinkTwitchAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkTwitchAccountResult;
	static decodeUnlinkSteamAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkSteamAccountResult;
	static decodeUnlinkPSNAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkPSNAccountResult;
	static decodeUnlinkNintendoSwitchDeviceIdResultResponse(Response: PlayFabJsonObject): ClientUnlinkNintendoSwitchDeviceIdResult;
	static decodeUnlinkKongregateAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkKongregateAccountResult;
	static decodeUnlinkIOSDeviceIDResultResponse(Response: PlayFabJsonObject): ClientUnlinkIOSDeviceIDResult;
	static decodeUnlinkGoogleAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkGoogleAccountResult;
	static decodeUnlinkGameCenterAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkGameCenterAccountResult;
	static decodeUnlinkFacebookInstantGamesIdResultResponse(Response: PlayFabJsonObject): ClientUnlinkFacebookInstantGamesIdResult;
	static decodeUnlinkFacebookAccountResultResponse(Response: PlayFabJsonObject): ClientUnlinkFacebookAccountResult;
	static decodeUnlinkCustomIDResultResponse(Response: PlayFabJsonObject): ClientUnlinkCustomIDResult;
	static decodeUnlinkAndroidDeviceIDResultResponse(Response: PlayFabJsonObject): ClientUnlinkAndroidDeviceIDResult;
	static decodeStartPurchaseResultResponse(Response: PlayFabJsonObject): ClientStartPurchaseResult;
	static decodeStartGameResultResponse(Response: PlayFabJsonObject): ClientStartGameResult;
	static decodeSetPlayerSecretResultResponse(Response: PlayFabJsonObject): ClientSetPlayerSecretResult;
	static decodeSetFriendTagsResultResponse(Response: PlayFabJsonObject): ClientSetFriendTagsResult;
	static decodeSendAccountRecoveryEmailResultResponse(Response: PlayFabJsonObject): ClientSendAccountRecoveryEmailResult;
	static decodeRestoreIOSPurchasesResultResponse(Response: PlayFabJsonObject): ClientRestoreIOSPurchasesResult;
	static decodeReportPlayerClientResultResponse(Response: PlayFabJsonObject): ClientReportPlayerClientResult;
	static decodeRemoveSharedGroupMembersResultResponse(Response: PlayFabJsonObject): ClientRemoveSharedGroupMembersResult;
	static decodeRemoveGenericIDResultResponse(Response: PlayFabJsonObject): ClientRemoveGenericIDResult;
	static decodeRemoveFriendResultResponse(Response: PlayFabJsonObject): ClientRemoveFriendResult;
	static decodeRemoveContactEmailResultResponse(Response: PlayFabJsonObject): ClientRemoveContactEmailResult;
	static decodeRegisterPlayFabUserResultResponse(Response: PlayFabJsonObject): ClientRegisterPlayFabUserResult;
	static decodeRegisterForIOSPushNotificationResultResponse(Response: PlayFabJsonObject): ClientRegisterForIOSPushNotificationResult;
	static decodeRedeemCouponResultResponse(Response: PlayFabJsonObject): ClientRedeemCouponResult;
	static decodePurchaseItemResultResponse(Response: PlayFabJsonObject): ClientPurchaseItemResult;
	static decodePayForPurchaseResultResponse(Response: PlayFabJsonObject): ClientPayForPurchaseResult;
	static decodeOpenTradeResponseResponse(Response: PlayFabJsonObject): ClientOpenTradeResponse;
	static decodeModifyUserVirtualCurrencyResultResponse(Response: PlayFabJsonObject): ClientModifyUserVirtualCurrencyResult;
	static decodeMatchmakeResultResponse(Response: PlayFabJsonObject): ClientMatchmakeResult;
	static decodeLoginResultResponse(Response: PlayFabJsonObject): ClientLoginResult;
	static decodeListUsersCharactersResultResponse(Response: PlayFabJsonObject): ClientListUsersCharactersResult;
	static decodeLinkXboxAccountResultResponse(Response: PlayFabJsonObject): ClientLinkXboxAccountResult;
	static decodeLinkWindowsHelloAccountResponseResponse(Response: PlayFabJsonObject): ClientLinkWindowsHelloAccountResponse;
	static decodeLinkTwitchAccountResultResponse(Response: PlayFabJsonObject): ClientLinkTwitchAccountResult;
	static decodeLinkSteamAccountResultResponse(Response: PlayFabJsonObject): ClientLinkSteamAccountResult;
	static decodeLinkPSNAccountResultResponse(Response: PlayFabJsonObject): ClientLinkPSNAccountResult;
	static decodeLinkNintendoSwitchDeviceIdResultResponse(Response: PlayFabJsonObject): ClientLinkNintendoSwitchDeviceIdResult;
	static decodeLinkKongregateAccountResultResponse(Response: PlayFabJsonObject): ClientLinkKongregateAccountResult;
	static decodeLinkIOSDeviceIDResultResponse(Response: PlayFabJsonObject): ClientLinkIOSDeviceIDResult;
	static decodeLinkGoogleAccountResultResponse(Response: PlayFabJsonObject): ClientLinkGoogleAccountResult;
	static decodeLinkGameCenterAccountResultResponse(Response: PlayFabJsonObject): ClientLinkGameCenterAccountResult;
	static decodeLinkFacebookInstantGamesIdResultResponse(Response: PlayFabJsonObject): ClientLinkFacebookInstantGamesIdResult;
	static decodeLinkFacebookAccountResultResponse(Response: PlayFabJsonObject): ClientLinkFacebookAccountResult;
	static decodeLinkCustomIDResultResponse(Response: PlayFabJsonObject): ClientLinkCustomIDResult;
	static decodeLinkAndroidDeviceIDResultResponse(Response: PlayFabJsonObject): ClientLinkAndroidDeviceIDResult;
	static decodeGrantCharacterToUserResultResponse(Response: PlayFabJsonObject): ClientGrantCharacterToUserResult;
	static decodeGetWindowsHelloChallengeResponseResponse(Response: PlayFabJsonObject): ClientGetWindowsHelloChallengeResponse;
	static decodeGetUserInventoryResultResponse(Response: PlayFabJsonObject): ClientGetUserInventoryResult;
	static decodeGetUserDataResultResponse(Response: PlayFabJsonObject): ClientGetUserDataResult;
	static decodeGetTradeStatusResponseResponse(Response: PlayFabJsonObject): ClientGetTradeStatusResponse;
	static decodeGetTitlePublicKeyResultResponse(Response: PlayFabJsonObject): ClientGetTitlePublicKeyResult;
	static decodeGetTitleNewsResultResponse(Response: PlayFabJsonObject): ClientGetTitleNewsResult;
	static decodeGetTitleDataResultResponse(Response: PlayFabJsonObject): ClientGetTitleDataResult;
	static decodeGetTimeResultResponse(Response: PlayFabJsonObject): ClientGetTimeResult;
	static decodeGetStoreItemsResultResponse(Response: PlayFabJsonObject): ClientGetStoreItemsResult;
	static decodeGetSharedGroupDataResultResponse(Response: PlayFabJsonObject): ClientGetSharedGroupDataResult;
	static decodeGetPurchaseResultResponse(Response: PlayFabJsonObject): ClientGetPurchaseResult;
	static decodeGetPublisherDataResultResponse(Response: PlayFabJsonObject): ClientGetPublisherDataResult;
	static decodeGetPlayFabIDsFromXboxLiveIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromXboxLiveIDsResult;
	static decodeGetPlayFabIDsFromTwitchIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromTwitchIDsResult;
	static decodeGetPlayFabIDsFromSteamIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromSteamIDsResult;
	static decodeGetPlayFabIDsFromPSNAccountIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromPSNAccountIDsResult;
	static decodeGetPlayFabIDsFromNintendoSwitchDeviceIdsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
	static decodeGetPlayFabIDsFromKongregateIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromKongregateIDsResult;
	static decodeGetPlayFabIDsFromGoogleIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromGoogleIDsResult;
	static decodeGetPlayFabIDsFromGenericIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromGenericIDsResult;
	static decodeGetPlayFabIDsFromGameCenterIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromGameCenterIDsResult;
	static decodeGetPlayFabIDsFromFacebookInstantGamesIdsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult;
	static decodeGetPlayFabIDsFromFacebookIDsResultResponse(Response: PlayFabJsonObject): ClientGetPlayFabIDsFromFacebookIDsResult;
	static decodeGetPlayerTradesResponseResponse(Response: PlayFabJsonObject): ClientGetPlayerTradesResponse;
	static decodeGetPlayerTagsResultResponse(Response: PlayFabJsonObject): ClientGetPlayerTagsResult;
	static decodeGetPlayerStatisticVersionsResultResponse(Response: PlayFabJsonObject): ClientGetPlayerStatisticVersionsResult;
	static decodeGetPlayerStatisticsResultResponse(Response: PlayFabJsonObject): ClientGetPlayerStatisticsResult;
	static decodeGetPlayerSegmentsResultResponse(Response: PlayFabJsonObject): ClientGetPlayerSegmentsResult;
	static decodeGetPlayerProfileResultResponse(Response: PlayFabJsonObject): ClientGetPlayerProfileResult;
	static decodeGetPlayerCombinedInfoResultResponse(Response: PlayFabJsonObject): ClientGetPlayerCombinedInfoResult;
	static decodeGetPhotonAuthenticationTokenResultResponse(Response: PlayFabJsonObject): ClientGetPhotonAuthenticationTokenResult;
	static decodeGetPaymentTokenResultResponse(Response: PlayFabJsonObject): ClientGetPaymentTokenResult;
	static decodeGetLeaderboardResultResponse(Response: PlayFabJsonObject): ClientGetLeaderboardResult;
	static decodeGetLeaderboardForUsersCharactersResultResponse(Response: PlayFabJsonObject): ClientGetLeaderboardForUsersCharactersResult;
	static decodeGetLeaderboardAroundPlayerResultResponse(Response: PlayFabJsonObject): ClientGetLeaderboardAroundPlayerResult;
	static decodeGetLeaderboardAroundCharacterResultResponse(Response: PlayFabJsonObject): ClientGetLeaderboardAroundCharacterResult;
	static decodeGetFriendsListResultResponse(Response: PlayFabJsonObject): ClientGetFriendsListResult;
	static decodeGetFriendLeaderboardAroundPlayerResultResponse(Response: PlayFabJsonObject): ClientGetFriendLeaderboardAroundPlayerResult;
	static decodeGetContentDownloadUrlResultResponse(Response: PlayFabJsonObject): ClientGetContentDownloadUrlResult;
	static decodeGetCharacterStatisticsResultResponse(Response: PlayFabJsonObject): ClientGetCharacterStatisticsResult;
	static decodeGetCharacterLeaderboardResultResponse(Response: PlayFabJsonObject): ClientGetCharacterLeaderboardResult;
	static decodeGetCharacterInventoryResultResponse(Response: PlayFabJsonObject): ClientGetCharacterInventoryResult;
	static decodeGetCharacterDataResultResponse(Response: PlayFabJsonObject): ClientGetCharacterDataResult;
	static decodeGetCatalogItemsResultResponse(Response: PlayFabJsonObject): ClientGetCatalogItemsResult;
	static decodeGetAccountInfoResultResponse(Response: PlayFabJsonObject): ClientGetAccountInfoResult;
	static decodeGameServerRegionsResultResponse(Response: PlayFabJsonObject): ClientGameServerRegionsResult;
	static decodeExecuteCloudScriptResultResponse(Response: PlayFabJsonObject): ClientExecuteCloudScriptResult;
	static decodeEmptyResultResponse(Response: PlayFabJsonObject): ClientEmptyResult;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): ClientEmptyResponse;
	static decodeCurrentGamesResultResponse(Response: PlayFabJsonObject): ClientCurrentGamesResult;
	static decodeCreateSharedGroupResultResponse(Response: PlayFabJsonObject): ClientCreateSharedGroupResult;
	static decodeConsumeXboxEntitlementsResultResponse(Response: PlayFabJsonObject): ClientConsumeXboxEntitlementsResult;
	static decodeConsumePSNEntitlementsResultResponse(Response: PlayFabJsonObject): ClientConsumePSNEntitlementsResult;
	static decodeConsumeItemResultResponse(Response: PlayFabJsonObject): ClientConsumeItemResult;
	static decodeConfirmPurchaseResultResponse(Response: PlayFabJsonObject): ClientConfirmPurchaseResult;
	static decodeCancelTradeResponseResponse(Response: PlayFabJsonObject): ClientCancelTradeResponse;
	static decodeAttributeInstallResultResponse(Response: PlayFabJsonObject): ClientAttributeInstallResult;
	static decodeAndroidDevicePushNotificationRegistrationResultResponse(Response: PlayFabJsonObject): ClientAndroidDevicePushNotificationRegistrationResult;
	static decodeAddUsernamePasswordResultResponse(Response: PlayFabJsonObject): ClientAddUsernamePasswordResult;
	static decodeAddSharedGroupMembersResultResponse(Response: PlayFabJsonObject): ClientAddSharedGroupMembersResult;
	static decodeAddOrUpdateContactEmailResultResponse(Response: PlayFabJsonObject): ClientAddOrUpdateContactEmailResult;
	static decodeAddGenericIDResultResponse(Response: PlayFabJsonObject): ClientAddGenericIDResult;
	static decodeAddFriendResultResponse(Response: PlayFabJsonObject): ClientAddFriendResult;
	static decodeAcceptTradeResponseResponse(Response: PlayFabJsonObject): ClientAcceptTradeResponse;
	static C(Other: UObject | any): PlayFabClientModelDecoder;
}

declare class PlayFabCloudScriptAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabCloudScriptAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabCloudScriptAPI;
	static GetDefaultObject(): PlayFabCloudScriptAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabCloudScriptAPI;
	HelperExecuteEntityCloudScript(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabCloudScriptAPI;
}

declare class PlayFabCloudScriptModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabCloudScriptModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabCloudScriptModelDecoder;
	static GetDefaultObject(): PlayFabCloudScriptModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabCloudScriptModelDecoder;
	static decodeExecuteCloudScriptResultResponse(Response: PlayFabJsonObject): CloudScriptExecuteCloudScriptResult;
	static C(Other: UObject | any): PlayFabCloudScriptModelDecoder;
}

declare class PlayFabDataAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabDataAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabDataAPI;
	static GetDefaultObject(): PlayFabDataAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabDataAPI;
	HelperSetObjects(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperInitiateFileUploads(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetObjects(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetFiles(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperFinalizeFileUploads(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteFiles(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAbortFileUploads(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabDataAPI;
}

declare class PlayFabDataModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabDataModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabDataModelDecoder;
	static GetDefaultObject(): PlayFabDataModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabDataModelDecoder;
	static decodeSetObjectsResponseResponse(Response: PlayFabJsonObject): DataSetObjectsResponse;
	static decodeInitiateFileUploadsResponseResponse(Response: PlayFabJsonObject): DataInitiateFileUploadsResponse;
	static decodeGetObjectsResponseResponse(Response: PlayFabJsonObject): DataGetObjectsResponse;
	static decodeGetFilesResponseResponse(Response: PlayFabJsonObject): DataGetFilesResponse;
	static decodeFinalizeFileUploadsResponseResponse(Response: PlayFabJsonObject): DataFinalizeFileUploadsResponse;
	static decodeDeleteFilesResponseResponse(Response: PlayFabJsonObject): DataDeleteFilesResponse;
	static decodeAbortFileUploadsResponseResponse(Response: PlayFabJsonObject): DataAbortFileUploadsResponse;
	static C(Other: UObject | any): PlayFabDataModelDecoder;
}

declare class PlayFabEventsAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabEventsAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabEventsAPI;
	static GetDefaultObject(): PlayFabEventsAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabEventsAPI;
	HelperWriteEvents(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabEventsAPI;
}

declare class PlayFabEventsModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabEventsModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabEventsModelDecoder;
	static GetDefaultObject(): PlayFabEventsModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabEventsModelDecoder;
	static decodeWriteEventsResponseResponse(Response: PlayFabJsonObject): EventsWriteEventsResponse;
	static C(Other: UObject | any): PlayFabEventsModelDecoder;
}

declare class PlayFabGroupsAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabGroupsAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabGroupsAPI;
	static GetDefaultObject(): PlayFabGroupsAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabGroupsAPI;
	HelperUpdateRole(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateGroup(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnblockEntity(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveMembers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveGroupInvitation(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveGroupApplication(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListMembershipOpportunities(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListMembership(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListGroupMembers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListGroupInvitations(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListGroupBlocks(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListGroupApplications(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperIsMember(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperInviteToGroup(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetGroup(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteRole(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteGroup(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreateRole(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreateGroup(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperChangeMemberRole(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperBlockEntity(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperApplyToGroup(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddMembers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAcceptGroupInvitation(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAcceptGroupApplication(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabGroupsAPI;
}

declare class PlayFabGroupsModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabGroupsModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabGroupsModelDecoder;
	static GetDefaultObject(): PlayFabGroupsModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabGroupsModelDecoder;
	static decodeUpdateGroupRoleResponseResponse(Response: PlayFabJsonObject): GroupsUpdateGroupRoleResponse;
	static decodeUpdateGroupResponseResponse(Response: PlayFabJsonObject): GroupsUpdateGroupResponse;
	static decodeListMembershipResponseResponse(Response: PlayFabJsonObject): GroupsListMembershipResponse;
	static decodeListMembershipOpportunitiesResponseResponse(Response: PlayFabJsonObject): GroupsListMembershipOpportunitiesResponse;
	static decodeListGroupMembersResponseResponse(Response: PlayFabJsonObject): GroupsListGroupMembersResponse;
	static decodeListGroupInvitationsResponseResponse(Response: PlayFabJsonObject): GroupsListGroupInvitationsResponse;
	static decodeListGroupBlocksResponseResponse(Response: PlayFabJsonObject): GroupsListGroupBlocksResponse;
	static decodeListGroupApplicationsResponseResponse(Response: PlayFabJsonObject): GroupsListGroupApplicationsResponse;
	static decodeIsMemberResponseResponse(Response: PlayFabJsonObject): GroupsIsMemberResponse;
	static decodeInviteToGroupResponseResponse(Response: PlayFabJsonObject): GroupsInviteToGroupResponse;
	static decodeGetGroupResponseResponse(Response: PlayFabJsonObject): GroupsGetGroupResponse;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): GroupsEmptyResponse;
	static decodeCreateGroupRoleResponseResponse(Response: PlayFabJsonObject): GroupsCreateGroupRoleResponse;
	static decodeCreateGroupResponseResponse(Response: PlayFabJsonObject): GroupsCreateGroupResponse;
	static decodeApplyToGroupResponseResponse(Response: PlayFabJsonObject): GroupsApplyToGroupResponse;
	static C(Other: UObject | any): PlayFabGroupsModelDecoder;
}

declare class PlayFabLocalizationAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabLocalizationAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabLocalizationAPI;
	static GetDefaultObject(): PlayFabLocalizationAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabLocalizationAPI;
	HelperGetLanguageList(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabLocalizationAPI;
}

declare class PlayFabLocalizationModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabLocalizationModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabLocalizationModelDecoder;
	static GetDefaultObject(): PlayFabLocalizationModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabLocalizationModelDecoder;
	static decodeGetLanguageListResponseResponse(Response: PlayFabJsonObject): LocalizationGetLanguageListResponse;
	static C(Other: UObject | any): PlayFabLocalizationModelDecoder;
}

declare class PlayFabMatchmakerAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabMatchmakerAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabMatchmakerAPI;
	static GetDefaultObject(): PlayFabMatchmakerAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabMatchmakerAPI;
	HelperUserInfo(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperStartGame(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperPlayerLeft(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperPlayerJoined(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAuthUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabMatchmakerAPI;
}

declare class PlayFabMatchmakerModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabMatchmakerModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabMatchmakerModelDecoder;
	static GetDefaultObject(): PlayFabMatchmakerModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabMatchmakerModelDecoder;
	static decodeUserInfoResponseResponse(Response: PlayFabJsonObject): MatchmakerUserInfoResponse;
	static decodeStartGameResponseResponse(Response: PlayFabJsonObject): MatchmakerStartGameResponse;
	static decodePlayerLeftResponseResponse(Response: PlayFabJsonObject): MatchmakerPlayerLeftResponse;
	static decodePlayerJoinedResponseResponse(Response: PlayFabJsonObject): MatchmakerPlayerJoinedResponse;
	static decodeAuthUserResponseResponse(Response: PlayFabJsonObject): MatchmakerAuthUserResponse;
	static C(Other: UObject | any): PlayFabMatchmakerModelDecoder;
}

declare class PlayFabMultiplayerAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabMultiplayerAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabMultiplayerAPI;
	static GetDefaultObject(): PlayFabMultiplayerAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabMultiplayerAPI;
	HelperUploadCertificate(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateBuildRegions(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperShutdownMultiplayerServer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRolloverContainerRegistryCredentials(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRequestMultiplayerServer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListVirtualMachineSummaries(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListQosServers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListMultiplayerServers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListContainerImageTags(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListContainerImages(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListCertificateSummaries(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListBuildSummaries(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListAssetSummaries(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperListArchivedMultiplayerServers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTitleEnabledForMultiplayerServersStatus(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetRemoteLoginEndpoint(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetMultiplayerServerDetails(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetContainerRegistryCredentials(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetBuild(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetAssetUploadUrl(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperEnableMultiplayerServersForTitle(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteRemoteUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteCertificate(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteBuild(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteAsset(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreateRemoteUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreateBuildWithManagedContainer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreateBuildWithCustomContainer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabMultiplayerAPI;
}

declare class PlayFabMultiplayerModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabMultiplayerModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabMultiplayerModelDecoder;
	static GetDefaultObject(): PlayFabMultiplayerModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabMultiplayerModelDecoder;
	static decodeRolloverContainerRegistryCredentialsResponseResponse(Response: PlayFabJsonObject): MultiplayerRolloverContainerRegistryCredentialsResponse;
	static decodeRequestMultiplayerServerResponseResponse(Response: PlayFabJsonObject): MultiplayerRequestMultiplayerServerResponse;
	static decodeListVirtualMachineSummariesResponseResponse(Response: PlayFabJsonObject): MultiplayerListVirtualMachineSummariesResponse;
	static decodeListQosServersResponseResponse(Response: PlayFabJsonObject): MultiplayerListQosServersResponse;
	static decodeListMultiplayerServersResponseResponse(Response: PlayFabJsonObject): MultiplayerListMultiplayerServersResponse;
	static decodeListContainerImageTagsResponseResponse(Response: PlayFabJsonObject): MultiplayerListContainerImageTagsResponse;
	static decodeListContainerImagesResponseResponse(Response: PlayFabJsonObject): MultiplayerListContainerImagesResponse;
	static decodeListCertificateSummariesResponseResponse(Response: PlayFabJsonObject): MultiplayerListCertificateSummariesResponse;
	static decodeListBuildSummariesResponseResponse(Response: PlayFabJsonObject): MultiplayerListBuildSummariesResponse;
	static decodeListAssetSummariesResponseResponse(Response: PlayFabJsonObject): MultiplayerListAssetSummariesResponse;
	static decodeGetTitleEnabledForMultiplayerServersStatusResponseResponse(Response: PlayFabJsonObject): MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse;
	static decodeGetRemoteLoginEndpointResponseResponse(Response: PlayFabJsonObject): MultiplayerGetRemoteLoginEndpointResponse;
	static decodeGetMultiplayerServerDetailsResponseResponse(Response: PlayFabJsonObject): MultiplayerGetMultiplayerServerDetailsResponse;
	static decodeGetContainerRegistryCredentialsResponseResponse(Response: PlayFabJsonObject): MultiplayerGetContainerRegistryCredentialsResponse;
	static decodeGetBuildResponseResponse(Response: PlayFabJsonObject): MultiplayerGetBuildResponse;
	static decodeGetAssetUploadUrlResponseResponse(Response: PlayFabJsonObject): MultiplayerGetAssetUploadUrlResponse;
	static decodeEnableMultiplayerServersForTitleResponseResponse(Response: PlayFabJsonObject): MultiplayerEnableMultiplayerServersForTitleResponse;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): MultiplayerEmptyResponse;
	static decodeCreateRemoteUserResponseResponse(Response: PlayFabJsonObject): MultiplayerCreateRemoteUserResponse;
	static decodeCreateBuildWithManagedContainerResponseResponse(Response: PlayFabJsonObject): MultiplayerCreateBuildWithManagedContainerResponse;
	static decodeCreateBuildWithCustomContainerResponseResponse(Response: PlayFabJsonObject): MultiplayerCreateBuildWithCustomContainerResponse;
	static C(Other: UObject | any): PlayFabMultiplayerModelDecoder;
}

declare class PlayFabProfilesAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabProfilesAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabProfilesAPI;
	static GetDefaultObject(): PlayFabProfilesAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabProfilesAPI;
	HelperSetProfilePolicy(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetProfileLanguage(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetGlobalPolicy(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetProfiles(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetProfile(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetGlobalPolicy(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabProfilesAPI;
}

declare class PlayFabProfilesModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabProfilesModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabProfilesModelDecoder;
	static GetDefaultObject(): PlayFabProfilesModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabProfilesModelDecoder;
	static decodeSetProfileLanguageResponseResponse(Response: PlayFabJsonObject): ProfilesSetProfileLanguageResponse;
	static decodeSetGlobalPolicyResponseResponse(Response: PlayFabJsonObject): ProfilesSetGlobalPolicyResponse;
	static decodeSetEntityProfilePolicyResponseResponse(Response: PlayFabJsonObject): ProfilesSetEntityProfilePolicyResponse;
	static decodeGetGlobalPolicyResponseResponse(Response: PlayFabJsonObject): ProfilesGetGlobalPolicyResponse;
	static decodeGetEntityProfilesResponseResponse(Response: PlayFabJsonObject): ProfilesGetEntityProfilesResponse;
	static decodeGetEntityProfileResponseResponse(Response: PlayFabJsonObject): ProfilesGetEntityProfileResponse;
	static C(Other: UObject | any): PlayFabProfilesModelDecoder;
}

declare class PlayFabServerAPI extends OnlineBlueprintCallProxyBase { 
	OnPlayFabResponse: UnrealEngineMulticastDelegate<(Response: PlayFabBaseModel, CustomData: UObject, successful: boolean) => void>;
	RequestJsonObj: PlayFabJsonObject;
	ResponseJsonObj: PlayFabJsonObject;
	static Load(ResourceName: string): PlayFabServerAPI;
	static Find(Outer: UObject, ResourceName: string): PlayFabServerAPI;
	static GetDefaultObject(): PlayFabServerAPI;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabServerAPI;
	HelperWriteTitleEvent(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperWritePlayerEvent(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperWriteCharacterEvent(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserPublisherReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserPublisherInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserInventoryItemCustomData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateUserData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateSharedGroupData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdatePlayerStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateCharacterStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateCharacterReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateCharacterInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateCharacterData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateBans(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUpdateAvatarUrl(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlockContainerItem(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlockContainerInstance(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperUnlinkXboxAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSubtractUserVirtualCurrency(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSubtractCharacterVirtualCurrency(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetTitleInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetTitleData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetPlayerSecret(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetGameServerInstanceTags(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetGameServerInstanceState(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetGameServerInstanceData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSetFriendTags(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSendPushNotification(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSendEmailFromTemplate(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperSendCustomAccountRecoveryEmail(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRevokeInventoryItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRevokeInventoryItem(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRevokeBans(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRevokeAllBansForUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperReportPlayer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveSharedGroupMembers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemovePlayerTag(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRemoveFriend(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRegisterGame(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRefreshGameServerInstanceHeartbeat(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRedeemMatchmakerTicket(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperRedeemCoupon(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperNotifyMatchmakerPlayerLeft(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperMoveItemToUserFromCharacter(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperMoveItemToCharacterFromUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperMoveItemToCharacterFromCharacter(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperModifyItemUses(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithXbox(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLoginWithServerCustomId(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperLinkXboxAccount(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGrantItemsToUsers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGrantItemsToUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGrantItemsToCharacter(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGrantCharacterToUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserPublisherReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserPublisherInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserInventory(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserBans(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetUserAccountInfo(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTitleNews(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTitleInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTitleData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetTime(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetSharedGroupData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetServerCustomIDsFromPlayFabIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetRandomResultTables(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPublisherData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromXboxLiveIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromSteamIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromNintendoSwitchDeviceIds(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromFacebookInstantGamesIds(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayFabIDsFromFacebookIDs(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerTags(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerStatisticVersions(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayersInSegment(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerSegments(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerProfile(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetPlayerCombinedInfo(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetLeaderboardForUserCharacters(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetLeaderboardAroundUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetLeaderboardAroundCharacter(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetLeaderboard(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetFriendsList(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetFriendLeaderboard(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetContentDownloadUrl(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterStatistics(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterReadOnlyData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterLeaderboard(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterInventory(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterInternalData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCharacterData(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetCatalogItems(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetAllUsersCharacters(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperGetAllSegments(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperExecuteCloudScript(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperEvaluateRandomResultTable(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeregisterGame(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteSharedGroup(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeletePlayer(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperDeleteCharacterFromUser(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperCreateSharedGroup(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperConsumeItem(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperBanUsers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAwardSteamAchievement(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAuthenticateSessionTicket(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddUserVirtualCurrency(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddSharedGroupMembers(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddPlayerTag(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddFriend(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	HelperAddCharacterVirtualCurrency(Response: PlayFabBaseModel,CustomData: UObject,successful: boolean): void;
	static C(Other: UObject | any): PlayFabServerAPI;
}

declare class PlayFabServerModelDecoder extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabServerModelDecoder;
	static Find(Outer: UObject, ResourceName: string): PlayFabServerModelDecoder;
	static GetDefaultObject(): PlayFabServerModelDecoder;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabServerModelDecoder;
	static decodeWriteEventResponseResponse(Response: PlayFabJsonObject): ServerWriteEventResponse;
	static decodeUpdateUserDataResultResponse(Response: PlayFabJsonObject): ServerUpdateUserDataResult;
	static decodeUpdateSharedGroupDataResultResponse(Response: PlayFabJsonObject): ServerUpdateSharedGroupDataResult;
	static decodeUpdatePlayerStatisticsResultResponse(Response: PlayFabJsonObject): ServerUpdatePlayerStatisticsResult;
	static decodeUpdateCharacterStatisticsResultResponse(Response: PlayFabJsonObject): ServerUpdateCharacterStatisticsResult;
	static decodeUpdateCharacterDataResultResponse(Response: PlayFabJsonObject): ServerUpdateCharacterDataResult;
	static decodeUpdateBansResultResponse(Response: PlayFabJsonObject): ServerUpdateBansResult;
	static decodeUnlockContainerItemResultResponse(Response: PlayFabJsonObject): ServerUnlockContainerItemResult;
	static decodeUnlinkXboxAccountResultResponse(Response: PlayFabJsonObject): ServerUnlinkXboxAccountResult;
	static decodeSetTitleDataResultResponse(Response: PlayFabJsonObject): ServerSetTitleDataResult;
	static decodeSetPublisherDataResultResponse(Response: PlayFabJsonObject): ServerSetPublisherDataResult;
	static decodeSetPlayerSecretResultResponse(Response: PlayFabJsonObject): ServerSetPlayerSecretResult;
	static decodeSetGameServerInstanceTagsResultResponse(Response: PlayFabJsonObject): ServerSetGameServerInstanceTagsResult;
	static decodeSetGameServerInstanceStateResultResponse(Response: PlayFabJsonObject): ServerSetGameServerInstanceStateResult;
	static decodeSetGameServerInstanceDataResultResponse(Response: PlayFabJsonObject): ServerSetGameServerInstanceDataResult;
	static decodeServerLoginResultResponse(Response: PlayFabJsonObject): ServerServerLoginResult;
	static decodeSendPushNotificationResultResponse(Response: PlayFabJsonObject): ServerSendPushNotificationResult;
	static decodeSendEmailFromTemplateResultResponse(Response: PlayFabJsonObject): ServerSendEmailFromTemplateResult;
	static decodeSendCustomAccountRecoveryEmailResultResponse(Response: PlayFabJsonObject): ServerSendCustomAccountRecoveryEmailResult;
	static decodeRevokeInventoryResultResponse(Response: PlayFabJsonObject): ServerRevokeInventoryResult;
	static decodeRevokeInventoryItemsResultResponse(Response: PlayFabJsonObject): ServerRevokeInventoryItemsResult;
	static decodeRevokeBansResultResponse(Response: PlayFabJsonObject): ServerRevokeBansResult;
	static decodeRevokeAllBansForUserResultResponse(Response: PlayFabJsonObject): ServerRevokeAllBansForUserResult;
	static decodeReportPlayerServerResultResponse(Response: PlayFabJsonObject): ServerReportPlayerServerResult;
	static decodeRemoveSharedGroupMembersResultResponse(Response: PlayFabJsonObject): ServerRemoveSharedGroupMembersResult;
	static decodeRemovePlayerTagResultResponse(Response: PlayFabJsonObject): ServerRemovePlayerTagResult;
	static decodeRegisterGameResponseResponse(Response: PlayFabJsonObject): ServerRegisterGameResponse;
	static decodeRefreshGameServerInstanceHeartbeatResultResponse(Response: PlayFabJsonObject): ServerRefreshGameServerInstanceHeartbeatResult;
	static decodeRedeemMatchmakerTicketResultResponse(Response: PlayFabJsonObject): ServerRedeemMatchmakerTicketResult;
	static decodeRedeemCouponResultResponse(Response: PlayFabJsonObject): ServerRedeemCouponResult;
	static decodeNotifyMatchmakerPlayerLeftResultResponse(Response: PlayFabJsonObject): ServerNotifyMatchmakerPlayerLeftResult;
	static decodeMoveItemToUserFromCharacterResultResponse(Response: PlayFabJsonObject): ServerMoveItemToUserFromCharacterResult;
	static decodeMoveItemToCharacterFromUserResultResponse(Response: PlayFabJsonObject): ServerMoveItemToCharacterFromUserResult;
	static decodeMoveItemToCharacterFromCharacterResultResponse(Response: PlayFabJsonObject): ServerMoveItemToCharacterFromCharacterResult;
	static decodeModifyUserVirtualCurrencyResultResponse(Response: PlayFabJsonObject): ServerModifyUserVirtualCurrencyResult;
	static decodeModifyItemUsesResultResponse(Response: PlayFabJsonObject): ServerModifyItemUsesResult;
	static decodeModifyCharacterVirtualCurrencyResultResponse(Response: PlayFabJsonObject): ServerModifyCharacterVirtualCurrencyResult;
	static decodeListUsersCharactersResultResponse(Response: PlayFabJsonObject): ServerListUsersCharactersResult;
	static decodeLinkXboxAccountResultResponse(Response: PlayFabJsonObject): ServerLinkXboxAccountResult;
	static decodeGrantItemsToUsersResultResponse(Response: PlayFabJsonObject): ServerGrantItemsToUsersResult;
	static decodeGrantItemsToUserResultResponse(Response: PlayFabJsonObject): ServerGrantItemsToUserResult;
	static decodeGrantItemsToCharacterResultResponse(Response: PlayFabJsonObject): ServerGrantItemsToCharacterResult;
	static decodeGrantCharacterToUserResultResponse(Response: PlayFabJsonObject): ServerGrantCharacterToUserResult;
	static decodeGetUserInventoryResultResponse(Response: PlayFabJsonObject): ServerGetUserInventoryResult;
	static decodeGetUserDataResultResponse(Response: PlayFabJsonObject): ServerGetUserDataResult;
	static decodeGetUserBansResultResponse(Response: PlayFabJsonObject): ServerGetUserBansResult;
	static decodeGetUserAccountInfoResultResponse(Response: PlayFabJsonObject): ServerGetUserAccountInfoResult;
	static decodeGetTitleNewsResultResponse(Response: PlayFabJsonObject): ServerGetTitleNewsResult;
	static decodeGetTitleDataResultResponse(Response: PlayFabJsonObject): ServerGetTitleDataResult;
	static decodeGetTimeResultResponse(Response: PlayFabJsonObject): ServerGetTimeResult;
	static decodeGetSharedGroupDataResultResponse(Response: PlayFabJsonObject): ServerGetSharedGroupDataResult;
	static decodeGetServerCustomIDsFromPlayFabIDsResultResponse(Response: PlayFabJsonObject): ServerGetServerCustomIDsFromPlayFabIDsResult;
	static decodeGetRandomResultTablesResultResponse(Response: PlayFabJsonObject): ServerGetRandomResultTablesResult;
	static decodeGetPublisherDataResultResponse(Response: PlayFabJsonObject): ServerGetPublisherDataResult;
	static decodeGetPlayFabIDsFromXboxLiveIDsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromXboxLiveIDsResult;
	static decodeGetPlayFabIDsFromSteamIDsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromSteamIDsResult;
	static decodeGetPlayFabIDsFromNintendoSwitchDeviceIdsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult;
	static decodeGetPlayFabIDsFromFacebookInstantGamesIdsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult;
	static decodeGetPlayFabIDsFromFacebookIDsResultResponse(Response: PlayFabJsonObject): ServerGetPlayFabIDsFromFacebookIDsResult;
	static decodeGetPlayerTagsResultResponse(Response: PlayFabJsonObject): ServerGetPlayerTagsResult;
	static decodeGetPlayerStatisticVersionsResultResponse(Response: PlayFabJsonObject): ServerGetPlayerStatisticVersionsResult;
	static decodeGetPlayerStatisticsResultResponse(Response: PlayFabJsonObject): ServerGetPlayerStatisticsResult;
	static decodeGetPlayersInSegmentResultResponse(Response: PlayFabJsonObject): ServerGetPlayersInSegmentResult;
	static decodeGetPlayerSegmentsResultResponse(Response: PlayFabJsonObject): ServerGetPlayerSegmentsResult;
	static decodeGetPlayerProfileResultResponse(Response: PlayFabJsonObject): ServerGetPlayerProfileResult;
	static decodeGetPlayerCombinedInfoResultResponse(Response: PlayFabJsonObject): ServerGetPlayerCombinedInfoResult;
	static decodeGetLeaderboardResultResponse(Response: PlayFabJsonObject): ServerGetLeaderboardResult;
	static decodeGetLeaderboardForUsersCharactersResultResponse(Response: PlayFabJsonObject): ServerGetLeaderboardForUsersCharactersResult;
	static decodeGetLeaderboardAroundUserResultResponse(Response: PlayFabJsonObject): ServerGetLeaderboardAroundUserResult;
	static decodeGetLeaderboardAroundCharacterResultResponse(Response: PlayFabJsonObject): ServerGetLeaderboardAroundCharacterResult;
	static decodeGetFriendsListResultResponse(Response: PlayFabJsonObject): ServerGetFriendsListResult;
	static decodeGetContentDownloadUrlResultResponse(Response: PlayFabJsonObject): ServerGetContentDownloadUrlResult;
	static decodeGetCharacterStatisticsResultResponse(Response: PlayFabJsonObject): ServerGetCharacterStatisticsResult;
	static decodeGetCharacterLeaderboardResultResponse(Response: PlayFabJsonObject): ServerGetCharacterLeaderboardResult;
	static decodeGetCharacterInventoryResultResponse(Response: PlayFabJsonObject): ServerGetCharacterInventoryResult;
	static decodeGetCharacterDataResultResponse(Response: PlayFabJsonObject): ServerGetCharacterDataResult;
	static decodeGetCatalogItemsResultResponse(Response: PlayFabJsonObject): ServerGetCatalogItemsResult;
	static decodeGetAllSegmentsResultResponse(Response: PlayFabJsonObject): ServerGetAllSegmentsResult;
	static decodeExecuteCloudScriptResultResponse(Response: PlayFabJsonObject): ServerExecuteCloudScriptResult;
	static decodeEvaluateRandomResultTableResultResponse(Response: PlayFabJsonObject): ServerEvaluateRandomResultTableResult;
	static decodeEmptyResponseResponse(Response: PlayFabJsonObject): ServerEmptyResponse;
	static decodeDeregisterGameResponseResponse(Response: PlayFabJsonObject): ServerDeregisterGameResponse;
	static decodeDeletePlayerResultResponse(Response: PlayFabJsonObject): ServerDeletePlayerResult;
	static decodeDeleteCharacterFromUserResultResponse(Response: PlayFabJsonObject): ServerDeleteCharacterFromUserResult;
	static decodeCreateSharedGroupResultResponse(Response: PlayFabJsonObject): ServerCreateSharedGroupResult;
	static decodeConsumeItemResultResponse(Response: PlayFabJsonObject): ServerConsumeItemResult;
	static decodeBanUsersResultResponse(Response: PlayFabJsonObject): ServerBanUsersResult;
	static decodeAwardSteamAchievementResultResponse(Response: PlayFabJsonObject): ServerAwardSteamAchievementResult;
	static decodeAuthenticateSessionTicketResultResponse(Response: PlayFabJsonObject): ServerAuthenticateSessionTicketResult;
	static decodeAddSharedGroupMembersResultResponse(Response: PlayFabJsonObject): ServerAddSharedGroupMembersResult;
	static decodeAddPlayerTagResultResponse(Response: PlayFabJsonObject): ServerAddPlayerTagResult;
	static C(Other: UObject | any): PlayFabServerModelDecoder;
}

declare class PlayFabUtilities extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): PlayFabUtilities;
	static Find(Outer: UObject, ResourceName: string): PlayFabUtilities;
	static GetDefaultObject(): PlayFabUtilities;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PlayFabUtilities;
	static setPlayFabSettings(GameTitleId: string,PlayFabSecretApiKey: string,PhotonRealtimeAppId: string,PhotonTurnbasedAppId: string,PhotonChatAppId: string): void;
	static getPhotonAppId(Realtime: boolean,Chat: boolean,Turnbased: boolean): string;
	static getErrorText(Code: number): string;
	static C(Other: UObject | any): PlayFabUtilities;
}

declare class LevelStreamingNotifier extends UObject { 
	static Load(ResourceName: string): LevelStreamingNotifier;
	static Find(Outer: UObject, ResourceName: string): LevelStreamingNotifier;
	static GetDefaultObject(): LevelStreamingNotifier;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LevelStreamingNotifier;
	OnUnloaded(): void;
	OnShown(): void;
	OnLoaded(): void;
	OnHidden(): void;
	static C(Other: UObject | any): LevelStreamingNotifier;
}

declare class SaveExtensionInterface extends Interface { 
	static Load(ResourceName: string): SaveExtensionInterface;
	static Find(Outer: UObject, ResourceName: string): SaveExtensionInterface;
	static GetDefaultObject(): SaveExtensionInterface;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SaveExtensionInterface;
	OnSaveFinished(bError: boolean): void;
	OnSaveBegan(): void;
	OnLoadFinished(bError: boolean): void;
	OnLoadBegan(): void;
	static C(Other: UObject | any): SaveExtensionInterface;
}

declare class SaveExtensionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SaveExtensionLibrary;
	static Find(Outer: UObject, ResourceName: string): SaveExtensionLibrary;
	static GetDefaultObject(): SaveExtensionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SaveExtensionLibrary;
	static C(Other: UObject | any): SaveExtensionLibrary;
}

declare class SlotInfo extends SaveGame { 
	ID: number;
	Name: string;
	PlayedTime: Timespan;
	SlotPlayedTime: Timespan;
	SaveDate: DateTime;
	LoadDate: DateTime;
	Map: string;
	ThumbnailPath: string;
	CachedThumbnail: Texture2D;
	static Load(ResourceName: string): SlotInfo;
	static Find(Outer: UObject, ResourceName: string): SlotInfo;
	static GetDefaultObject(): SlotInfo;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlotInfo;
	GetThumbnail(): Texture2D;
	static C(Other: UObject | any): SlotInfo;
}

declare class SlotData extends SaveGame { 
	Map: string;
	TimeSeconds: number;
	static Load(ResourceName: string): SlotData;
	static Find(Outer: UObject, ResourceName: string): SlotData;
	static GetDefaultObject(): SlotData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlotData;
	static C(Other: UObject | any): SlotData;
}

declare type ESaveASyncMode = 'OnlySync' | 'LoadAsync' | 'SaveAsync' | 'SaveAndLoadAsync' | 'ESaveASyncMode_MAX';
declare var ESaveASyncMode : { OnlySync:'OnlySync',LoadAsync:'LoadAsync',SaveAsync:'SaveAsync',SaveAndLoadAsync:'SaveAndLoadAsync',ESaveASyncMode_MAX:'ESaveASyncMode_MAX', };
declare class SavePreset extends DataAsset { 
	SlotInfoTemplate: UnrealEngineClass;
	SlotDataTemplate: UnrealEngineClass;
	MaxSlots: number;
	bAutoSave: boolean;
	AutoSaveInterval: number;
	bSaveOnExit: boolean;
	bAutoLoad: boolean;
	bDebug: boolean;
	bDebugInScreen: boolean;
	IgnoredActors: UnrealEngineClass[];
	bStoreGameMode: boolean;
	bStoreGameInstance: boolean;
	bStoreLevelBlueprints: boolean;
	bStoreAIControllers: boolean;
	bStoreComponents: boolean;
	bStoreControlRotation: boolean;
	bUseCompression: boolean;
	MultithreadedSerialization: ESaveASyncMode;
	FrameSplittedSerialization: ESaveASyncMode;
	MaxFrameMs: number;
	MultithreadedFiles: ESaveASyncMode;
	bSaveAndLoadSublevels: boolean;
	static Load(ResourceName: string): SavePreset;
	static Find(Outer: UObject, ResourceName: string): SavePreset;
	static GetDefaultObject(): SavePreset;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SavePreset;
	static C(Other: UObject | any): SavePreset;
}

declare class SlotDataTask extends UObject { 
	SlotData: SlotData;
	World: World;
	Preset: SavePreset;
	static Load(ResourceName: string): SlotDataTask;
	static Find(Outer: UObject, ResourceName: string): SlotDataTask;
	static GetDefaultObject(): SlotDataTask;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlotDataTask;
	static C(Other: UObject | any): SlotDataTask;
}

declare class SaveManager extends UObject { 
	PresetAsset: SavePreset;
	CurrentInfo: SlotInfo;
	CurrentData: SlotData;
	LevelStreamingNotifiers: LevelStreamingNotifier[];
	SubscribedInterfaces: any[];
	Tasks: SlotDataTask[];
	OnGameSaved: UnrealEngineMulticastDelegate<(SlotInfo: SlotInfo) => void>;
	OnGameLoaded: UnrealEngineMulticastDelegate<(SlotInfo: SlotInfo) => void>;
	static Load(ResourceName: string): SaveManager;
	static Find(Outer: UObject, ResourceName: string): SaveManager;
	static GetDefaultObject(): SaveManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SaveManager;
	SetActivePreset(ActivePreset: SavePreset): boolean;
	SerializeStreamingLevel(LevelStreaming: LevelStreaming): void;
	SaveSlotToId(Slot: number,bOverrideIfNeeded: boolean,bScreenshot: boolean,Width: number,Height: number): boolean;
	SaveSlot(SlotInfo: SlotInfo,bOverrideIfNeeded: boolean,bScreenshot: boolean,Width: number,Height: number): boolean;
	SaveCurrentSlot(bScreenshot: boolean,Width: number,Height: number): boolean;
	ReloadCurrentSlot(): boolean;
	LoadSlotFromId(SlotId: number): boolean;
	LoadSlot(SlotInfo: SlotInfo): boolean;
	IsSlotSaved(Slot: number): boolean;
	IsInSlot(): boolean;
	GetSlotInfo(SlotId: number): SlotInfo;
	static GetSaveManager(ContextObject: UObject): SaveManager;
	GetCurrentInfo(): SlotInfo;
	GetCurrentData(): SlotData;
	GetAllSlotInfos(SaveInfos?: SlotInfo[],bSortByRecent?: boolean): {SaveInfos: SlotInfo[]};
	EventGenerateSaveSlot(SlotId: number): string;
	DeserializeStreamingLevel(LevelStreaming: LevelStreaming): void;
	DeleteSlot(SlotId: number): boolean;
	static C(Other: UObject | any): SaveManager;
}

declare class SlotDataTask_Loader extends SlotDataTask { 
	NewSlotInfo: SlotInfo;
	static Load(ResourceName: string): SlotDataTask_Loader;
	static Find(Outer: UObject, ResourceName: string): SlotDataTask_Loader;
	static GetDefaultObject(): SlotDataTask_Loader;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlotDataTask_Loader;
	static C(Other: UObject | any): SlotDataTask_Loader;
}

declare class SlotDataTask_LevelLoader extends SlotDataTask_Loader { 
	StreamingLevel: LevelStreaming;
	static Load(ResourceName: string): SlotDataTask_LevelLoader;
	static Find(Outer: UObject, ResourceName: string): SlotDataTask_LevelLoader;
	static GetDefaultObject(): SlotDataTask_LevelLoader;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlotDataTask_LevelLoader;
	static C(Other: UObject | any): SlotDataTask_LevelLoader;
}

declare class SlotDataTask_Saver extends SlotDataTask { 
	static Load(ResourceName: string): SlotDataTask_Saver;
	static Find(Outer: UObject, ResourceName: string): SlotDataTask_Saver;
	static GetDefaultObject(): SlotDataTask_Saver;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlotDataTask_Saver;
	static C(Other: UObject | any): SlotDataTask_Saver;
}

declare class SlotDataTask_LevelSaver extends SlotDataTask_Saver { 
	StreamingLevel: LevelStreaming;
	static Load(ResourceName: string): SlotDataTask_LevelSaver;
	static Find(Outer: UObject, ResourceName: string): SlotDataTask_LevelSaver;
	static GetDefaultObject(): SlotDataTask_LevelSaver;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SlotDataTask_LevelSaver;
	static C(Other: UObject | any): SlotDataTask_LevelSaver;
}

declare class SafeText { 
	Internal: string;
	TrueValue: string;
	Shift: string;
	Flag: number;
	clone() : SafeText;
	static C(Other: UObject | any): SafeText;
	SCL_Callable_GetRawSafeText(): {ST: SafeText, $: string};
	SCL_Callable_GetSafeText(): {ST: SafeText, $: string};
	SCL_Callable_GetSafeTextWithKey(Key?: string): {ST: SafeText, $: string};
	SCL_Callable_SetRawSafeText(Value?: string): {ST: SafeText, $: string};
	SCL_Callable_SetSafeText(Value?: string): {ST: SafeText, $: string};
	SCL_Callable_SetSafeTextWithKey(Key?: string,Value?: string): {ST: SafeText, $: string};
	SCL_Pure_GetSafeText(): {ST: SafeText, $: string};
	SCL_Pure_GetSafeTextWithKey(Key?: string): {ST: SafeText, $: string};
	SCL_Pure_SetSafeText(Value?: string): {ST: SafeText, $: string};
	SCL_Pure_SetSafeTextWithKey(Key?: string,Value?: string): {ST: SafeText, $: string};
	SCO_Pure_GetSafeTextEqualFST(ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	SCO_Pure_GetSafeTextEqualText(NT?: string): {FST: SafeText, NT: string, $: boolean};
	SCO_Pure_GetSafeTextGreaterFST(ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	SCO_Pure_GetSafeTextGreaterText(NT?: string): {FST: SafeText, NT: string, $: boolean};
	SCO_Pure_GetSafeTextNotEqualFST(ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	SCO_Pure_GetSafeTextNotEqualText(NT?: string): {FST: SafeText, NT: string, $: boolean};
	SCO_Pure_GetSafeTextPlusEqualFST(ST?: SafeText,Output?: string): {FST: SafeText, ST: SafeText, Output: string, $: SafeText};
	SCO_Pure_GetSafeTextPlusEqualText(NT?: string,Output?: string): {FST: SafeText, NT: string, Output: string, $: SafeText};
	SCO_Pure_GetSafeTextPlusFST(ST?: SafeText,Output?: string): {FST: SafeText, ST: SafeText, Output: string, $: SafeText};
	SCO_Pure_GetSafeTextPlusText(NT?: string,Output?: string): {FST: SafeText, NT: string, Output: string, $: SafeText};
	SCO_Pure_GetSafeTextSmallerFST(ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	SCO_Pure_GetSafeTextSmallerText(NT?: string): {FST: SafeText, NT: string, $: boolean};
	SCO_Pure_SetSafeTextEqualFST(ST?: SafeText,Output?: string): {FST: SafeText, ST: SafeText, Output: string, $: SafeText};
	SCO_Pure_SetSafeTextEqualText(NT?: string,Output?: string): {FST: SafeText, NT: string, Output: string, $: SafeText};
	static SCL_Callable_GetRawSafeText(ST?: SafeText): {ST: SafeText, $: string};
	static SCL_Callable_GetSafeText(ST?: SafeText): {ST: SafeText, $: string};
	static SCL_Callable_GetSafeTextWithKey(ST?: SafeText,Key?: string): {ST: SafeText, $: string};
	static SCL_Callable_SetRawSafeText(ST?: SafeText,Value?: string): {ST: SafeText, $: string};
	static SCL_Callable_SetSafeText(ST?: SafeText,Value?: string): {ST: SafeText, $: string};
	static SCL_Callable_SetSafeTextWithKey(ST?: SafeText,Key?: string,Value?: string): {ST: SafeText, $: string};
	static SCL_Pure_GetSafeText(ST?: SafeText): {ST: SafeText, $: string};
	static SCL_Pure_GetSafeTextWithKey(ST?: SafeText,Key?: string): {ST: SafeText, $: string};
	static SCL_Pure_SetSafeText(ST?: SafeText,Value?: string): {ST: SafeText, $: string};
	static SCL_Pure_SetSafeTextWithKey(ST?: SafeText,Key?: string,Value?: string): {ST: SafeText, $: string};
	static SCO_Pure_GetSafeTextEqualFST(FST?: SafeText,ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	static SCO_Pure_GetSafeTextEqualText(FST?: SafeText,NT?: string): {FST: SafeText, NT: string, $: boolean};
	static SCO_Pure_GetSafeTextGreaterFST(FST?: SafeText,ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	static SCO_Pure_GetSafeTextGreaterText(FST?: SafeText,NT?: string): {FST: SafeText, NT: string, $: boolean};
	static SCO_Pure_GetSafeTextNotEqualFST(FST?: SafeText,ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	static SCO_Pure_GetSafeTextNotEqualText(FST?: SafeText,NT?: string): {FST: SafeText, NT: string, $: boolean};
	static SCO_Pure_GetSafeTextPlusEqualFST(FST?: SafeText,ST?: SafeText,Output?: string): {FST: SafeText, ST: SafeText, Output: string, $: SafeText};
	static SCO_Pure_GetSafeTextPlusEqualText(FST?: SafeText,NT?: string,Output?: string): {FST: SafeText, NT: string, Output: string, $: SafeText};
	static SCO_Pure_GetSafeTextPlusFST(FST?: SafeText,ST?: SafeText,Output?: string): {FST: SafeText, ST: SafeText, Output: string, $: SafeText};
	static SCO_Pure_GetSafeTextPlusText(FST?: SafeText,NT?: string,Output?: string): {FST: SafeText, NT: string, Output: string, $: SafeText};
	static SCO_Pure_GetSafeTextSmallerFST(FST?: SafeText,ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	static SCO_Pure_GetSafeTextSmallerText(FST?: SafeText,NT?: string): {FST: SafeText, NT: string, $: boolean};
	static SCO_Pure_SetSafeTextEqualFST(FST?: SafeText,ST?: SafeText,Output?: string): {FST: SafeText, ST: SafeText, Output: string, $: SafeText};
	static SCO_Pure_SetSafeTextEqualText(FST?: SafeText,NT?: string,Output?: string): {FST: SafeText, NT: string, Output: string, $: SafeText};
}

declare class SafeString { 
	Internal: string;
	TrueValue: string;
	Shift: string;
	Flag: number;
	clone() : SafeString;
	static C(Other: UObject | any): SafeString;
	SCL_Callable_GetRawSafeString(): {SS: SafeString, $: string};
	SCL_Callable_GetSafeString(): {SS: SafeString, $: string};
	SCL_Callable_GetSafeStringWithKey(Key?: string): {SS: SafeString, $: string};
	SCL_Callable_SetRawSafeString(Value?: string): {SS: SafeString, $: string};
	SCL_Callable_SetSafeString(Value?: string): {SS: SafeString, $: string};
	SCL_Callable_SetSafeStringWithKey(Key?: string,Value?: string): {SS: SafeString, $: string};
	SCL_Pure_GetSafeString(): {SS: SafeString, $: string};
	SCL_Pure_GetSafeStringWithKey(Key?: string): {SS: SafeString, $: string};
	SCL_Pure_SetSafeString(Value?: string): {SS: SafeString, $: string};
	SCL_Pure_SetSafeStringWithKey(Key?: string,Value?: string): {SS: SafeString, $: string};
	SCO_Pure_GetSafeStringEqualFSS(SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	SCO_Pure_GetSafeStringEqualString(NS?: string): {FSS: SafeString, NS: string, $: boolean};
	SCO_Pure_GetSafeStringGreaterFSS(SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	SCO_Pure_GetSafeStringGreaterString(NS?: string): {FSS: SafeString, NS: string, $: boolean};
	SCO_Pure_GetSafeStringNotEqualFSS(SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	SCO_Pure_GetSafeStringNotEqualString(NS?: string): {FSS: SafeString, NS: string, $: boolean};
	SCO_Pure_GetSafeStringPlusEqualFSS(SS?: SafeString,Output?: string): {FSS: SafeString, SS: SafeString, Output: string, $: SafeString};
	SCO_Pure_GetSafeStringPlusEqualString(NS?: string,Output?: string): {FSS: SafeString, NS: string, Output: string, $: SafeString};
	SCO_Pure_GetSafeStringPlusFSS(SS?: SafeString,Output?: string): {FSS: SafeString, SS: SafeString, Output: string, $: SafeString};
	SCO_Pure_GetSafeStringPlusString(NS?: string,Output?: string): {FSS: SafeString, NS: string, Output: string, $: SafeString};
	SCO_Pure_GetSafeStringSmallerFSS(SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	SCO_Pure_GetSafeStringSmallerString(NS?: string): {FSS: SafeString, NS: string, $: boolean};
	SCO_Pure_SetSafeStringEqualFSS(SS?: SafeString,Output?: string): {FSS: SafeString, SS: SafeString, Output: string, $: SafeString};
	SCO_Pure_SetSafeStringEqualString(NS?: string,Output?: string): {FSS: SafeString, NS: string, Output: string, $: SafeString};
	static SCL_Callable_GetRawSafeString(SS?: SafeString): {SS: SafeString, $: string};
	static SCL_Callable_GetSafeString(SS?: SafeString): {SS: SafeString, $: string};
	static SCL_Callable_GetSafeStringWithKey(SS?: SafeString,Key?: string): {SS: SafeString, $: string};
	static SCL_Callable_SetRawSafeString(SS?: SafeString,Value?: string): {SS: SafeString, $: string};
	static SCL_Callable_SetSafeString(SS?: SafeString,Value?: string): {SS: SafeString, $: string};
	static SCL_Callable_SetSafeStringWithKey(SS?: SafeString,Key?: string,Value?: string): {SS: SafeString, $: string};
	static SCL_Pure_GetSafeString(SS?: SafeString): {SS: SafeString, $: string};
	static SCL_Pure_GetSafeStringWithKey(SS?: SafeString,Key?: string): {SS: SafeString, $: string};
	static SCL_Pure_SetSafeString(SS?: SafeString,Value?: string): {SS: SafeString, $: string};
	static SCL_Pure_SetSafeStringWithKey(SS?: SafeString,Key?: string,Value?: string): {SS: SafeString, $: string};
	static SCO_Pure_GetSafeStringEqualFSS(FSS?: SafeString,SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	static SCO_Pure_GetSafeStringEqualString(FSS?: SafeString,NS?: string): {FSS: SafeString, NS: string, $: boolean};
	static SCO_Pure_GetSafeStringGreaterFSS(FSS?: SafeString,SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	static SCO_Pure_GetSafeStringGreaterString(FSS?: SafeString,NS?: string): {FSS: SafeString, NS: string, $: boolean};
	static SCO_Pure_GetSafeStringNotEqualFSS(FSS?: SafeString,SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	static SCO_Pure_GetSafeStringNotEqualString(FSS?: SafeString,NS?: string): {FSS: SafeString, NS: string, $: boolean};
	static SCO_Pure_GetSafeStringPlusEqualFSS(FSS?: SafeString,SS?: SafeString,Output?: string): {FSS: SafeString, SS: SafeString, Output: string, $: SafeString};
	static SCO_Pure_GetSafeStringPlusEqualString(FSS?: SafeString,NS?: string,Output?: string): {FSS: SafeString, NS: string, Output: string, $: SafeString};
	static SCO_Pure_GetSafeStringPlusFSS(FSS?: SafeString,SS?: SafeString,Output?: string): {FSS: SafeString, SS: SafeString, Output: string, $: SafeString};
	static SCO_Pure_GetSafeStringPlusString(FSS?: SafeString,NS?: string,Output?: string): {FSS: SafeString, NS: string, Output: string, $: SafeString};
	static SCO_Pure_GetSafeStringSmallerFSS(FSS?: SafeString,SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	static SCO_Pure_GetSafeStringSmallerString(FSS?: SafeString,NS?: string): {FSS: SafeString, NS: string, $: boolean};
	static SCO_Pure_SetSafeStringEqualFSS(FSS?: SafeString,SS?: SafeString,Output?: string): {FSS: SafeString, SS: SafeString, Output: string, $: SafeString};
	static SCO_Pure_SetSafeStringEqualString(FSS?: SafeString,NS?: string,Output?: string): {FSS: SafeString, NS: string, Output: string, $: SafeString};
}

declare class SafeName { 
	Internal: string;
	TrueValue: string;
	Shift: string;
	Flag: number;
	clone() : SafeName;
	static C(Other: UObject | any): SafeName;
	SCL_Callable_GetRawSafeName(): {SN: SafeName, $: string};
	SCL_Callable_GetSafeName(): {SN: SafeName, $: string};
	SCL_Callable_GetSafeNameWithKey(Key?: string): {SN: SafeName, $: string};
	SCL_Callable_SetRawSafeName(Value?: string): {SN: SafeName, $: string};
	SCL_Callable_SetSafeName(Value?: string): {SN: SafeName, $: string};
	SCL_Callable_SetSafeNameWithKey(Key?: string,Value?: string): {SN: SafeName, $: string};
	SCL_Pure_GetSafeName(): {SN: SafeName, $: string};
	SCL_Pure_GetSafeNameWithKey(Key?: string): {SN: SafeName, $: string};
	SCL_Pure_SetSafeName(Value?: string): {SN: SafeName, $: string};
	SCL_Pure_SetSafeNameWithKey(Key?: string,Value?: string): {SN: SafeName, $: string};
	SCO_Pure_GetSafeNameEqualFSN(SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	SCO_Pure_GetSafeNameEqualName(NN?: string): {FSN: SafeName, NN: string, $: boolean};
	SCO_Pure_GetSafeNameGreaterFSN(SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	SCO_Pure_GetSafeNameGreaterName(NN?: string): {FSN: SafeName, NN: string, $: boolean};
	SCO_Pure_GetSafeNameNotEqualFSN(SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	SCO_Pure_GetSafeNameNotEqualName(NN?: string): {FSN: SafeName, NN: string, $: boolean};
	SCO_Pure_GetSafeNamePlusEqualFSN(SSN?: SafeName,Output?: string): {FSN: SafeName, SSN: SafeName, Output: string, $: SafeName};
	SCO_Pure_GetSafeNamePlusEqualName(NN?: string,Output?: string): {FSN: SafeName, NN: string, Output: string, $: SafeName};
	SCO_Pure_GetSafeNamePlusFSN(SSN?: SafeName,Output?: string): {FSN: SafeName, SSN: SafeName, Output: string, $: SafeName};
	SCO_Pure_GetSafeNamePlusName(NN?: string,Output?: string): {FSN: SafeName, NN: string, Output: string, $: SafeName};
	SCO_Pure_GetSafeNameSmallerFSN(SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	SCO_Pure_GetSafeNameSmallerName(NN?: string): {FSN: SafeName, NN: string, $: boolean};
	SCO_Pure_SetSafeNameEqualFSN(SSN?: SafeName,Output?: string): {FSN: SafeName, SSN: SafeName, Output: string, $: SafeName};
	SCO_Pure_SetSafeNameEqualName(NN?: string,Output?: string): {FSN: SafeName, NN: string, Output: string, $: SafeName};
	static SCL_Callable_GetRawSafeName(SN?: SafeName): {SN: SafeName, $: string};
	static SCL_Callable_GetSafeName(SN?: SafeName): {SN: SafeName, $: string};
	static SCL_Callable_GetSafeNameWithKey(SN?: SafeName,Key?: string): {SN: SafeName, $: string};
	static SCL_Callable_SetRawSafeName(SN?: SafeName,Value?: string): {SN: SafeName, $: string};
	static SCL_Callable_SetSafeName(SN?: SafeName,Value?: string): {SN: SafeName, $: string};
	static SCL_Callable_SetSafeNameWithKey(SN?: SafeName,Key?: string,Value?: string): {SN: SafeName, $: string};
	static SCL_Pure_GetSafeName(SN?: SafeName): {SN: SafeName, $: string};
	static SCL_Pure_GetSafeNameWithKey(SN?: SafeName,Key?: string): {SN: SafeName, $: string};
	static SCL_Pure_SetSafeName(SN?: SafeName,Value?: string): {SN: SafeName, $: string};
	static SCL_Pure_SetSafeNameWithKey(SN?: SafeName,Key?: string,Value?: string): {SN: SafeName, $: string};
	static SCO_Pure_GetSafeNameEqualFSN(FSN?: SafeName,SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	static SCO_Pure_GetSafeNameEqualName(FSN?: SafeName,NN?: string): {FSN: SafeName, NN: string, $: boolean};
	static SCO_Pure_GetSafeNameGreaterFSN(FSN?: SafeName,SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	static SCO_Pure_GetSafeNameGreaterName(FSN?: SafeName,NN?: string): {FSN: SafeName, NN: string, $: boolean};
	static SCO_Pure_GetSafeNameNotEqualFSN(FSN?: SafeName,SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	static SCO_Pure_GetSafeNameNotEqualName(FSN?: SafeName,NN?: string): {FSN: SafeName, NN: string, $: boolean};
	static SCO_Pure_GetSafeNamePlusEqualFSN(FSN?: SafeName,SSN?: SafeName,Output?: string): {FSN: SafeName, SSN: SafeName, Output: string, $: SafeName};
	static SCO_Pure_GetSafeNamePlusEqualName(FSN?: SafeName,NN?: string,Output?: string): {FSN: SafeName, NN: string, Output: string, $: SafeName};
	static SCO_Pure_GetSafeNamePlusFSN(FSN?: SafeName,SSN?: SafeName,Output?: string): {FSN: SafeName, SSN: SafeName, Output: string, $: SafeName};
	static SCO_Pure_GetSafeNamePlusName(FSN?: SafeName,NN?: string,Output?: string): {FSN: SafeName, NN: string, Output: string, $: SafeName};
	static SCO_Pure_GetSafeNameSmallerFSN(FSN?: SafeName,SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	static SCO_Pure_GetSafeNameSmallerName(FSN?: SafeName,NN?: string): {FSN: SafeName, NN: string, $: boolean};
	static SCO_Pure_SetSafeNameEqualFSN(FSN?: SafeName,SSN?: SafeName,Output?: string): {FSN: SafeName, SSN: SafeName, Output: string, $: SafeName};
	static SCO_Pure_SetSafeNameEqualName(FSN?: SafeName,NN?: string,Output?: string): {FSN: SafeName, NN: string, Output: string, $: SafeName};
}

declare class SafeInt { 
	Internal: string;
	TrueValue: string;
	Shift: string;
	Flag: number;
	clone() : SafeInt;
	static C(Other: UObject | any): SafeInt;
	SCL_Callable_GetRawSafeInt(): {SI: SafeInt, $: string};
	SCL_Callable_GetSafeInt(): {SI: SafeInt, $: number};
	SCL_Callable_GetSafeIntWithKey(Key?: string): {SI: SafeInt, $: number};
	SCL_Callable_SetRawSafeInt(Value?: string): {SI: SafeInt, $: number};
	SCL_Callable_SetSafeInt(Value?: number): {SI: SafeInt, $: number};
	SCL_Callable_SetSafeIntWithKey(Key?: string,Value?: number): {SI: SafeInt, $: number};
	SCL_Pure_GetSafeInt(): {SI: SafeInt, $: number};
	SCL_Pure_GetSafeIntWithKey(Key?: string): {SI: SafeInt, $: number};
	SCL_Pure_SetSafeInt(Value?: number): {SI: SafeInt, $: number};
	SCL_Pure_SetSafeIntWithKey(Key?: string,Value?: number): {SI: SafeInt, $: number};
	SCO_Pure_GetSafeIntAndFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntAndInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntDecreaseFSI(Output?: number): {FSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntDivideFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntDivideInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntEqualFSI(SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	SCO_Pure_GetSafeIntEqualInt(NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	SCO_Pure_GetSafeIntGreaterEqualFSI(SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	SCO_Pure_GetSafeIntGreaterEqualInt(NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	SCO_Pure_GetSafeIntGreaterFSI(SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	SCO_Pure_GetSafeIntGreaterInt(NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	SCO_Pure_GetSafeIntIncreaseFSI(Output?: number): {FSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntMinusEqualFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntMinusEqualInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntMinusFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntMinusInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntModFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntModInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntNotEqualFSI(SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	SCO_Pure_GetSafeIntNotEqualInt(NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	SCO_Pure_GetSafeIntNotFSI(Output?: number): {FSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntOrFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntOrInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntPlusEqualFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntPlusEqualInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntPlusFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntPlusInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntShiftLFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntShiftLInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntShiftRFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntShiftRInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntSmallerEqualFSI(SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	SCO_Pure_GetSafeIntSmallerEqualInt(NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	SCO_Pure_GetSafeIntSmallerFSI(SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	SCO_Pure_GetSafeIntSmallerInt(NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	SCO_Pure_GetSafeIntTimesFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntTimesInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntXorFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_GetSafeIntXorInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	SCO_Pure_SetSafeIntEqualFSI(SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	SCO_Pure_SetSafeIntEqualInt(NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCL_Callable_GetRawSafeInt(SI?: SafeInt): {SI: SafeInt, $: string};
	static SCL_Callable_GetSafeInt(SI?: SafeInt): {SI: SafeInt, $: number};
	static SCL_Callable_GetSafeIntWithKey(SI?: SafeInt,Key?: string): {SI: SafeInt, $: number};
	static SCL_Callable_SetRawSafeInt(SI?: SafeInt,Value?: string): {SI: SafeInt, $: number};
	static SCL_Callable_SetSafeInt(SI?: SafeInt,Value?: number): {SI: SafeInt, $: number};
	static SCL_Callable_SetSafeIntWithKey(SI?: SafeInt,Key?: string,Value?: number): {SI: SafeInt, $: number};
	static SCL_Pure_GetSafeInt(SI?: SafeInt): {SI: SafeInt, $: number};
	static SCL_Pure_GetSafeIntWithKey(SI?: SafeInt,Key?: string): {SI: SafeInt, $: number};
	static SCL_Pure_SetSafeInt(SI?: SafeInt,Value?: number): {SI: SafeInt, $: number};
	static SCL_Pure_SetSafeIntWithKey(SI?: SafeInt,Key?: string,Value?: number): {SI: SafeInt, $: number};
	static SCO_Pure_GetSafeIntAndFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntAndInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntDecreaseFSI(FSI?: SafeInt,Output?: number): {FSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntDivideFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntDivideInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntEqualFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntEqualInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntGreaterEqualFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntGreaterEqualInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntGreaterFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntGreaterInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntIncreaseFSI(FSI?: SafeInt,Output?: number): {FSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntMinusEqualFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntMinusEqualInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntMinusFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntMinusInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntModFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntModInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntNotEqualFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntNotEqualInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntNotFSI(FSI?: SafeInt,Output?: number): {FSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntOrFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntOrInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntPlusEqualFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntPlusEqualInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntPlusFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntPlusInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntShiftLFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntShiftLInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntShiftRFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntShiftRInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntSmallerEqualFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntSmallerEqualInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntSmallerFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntSmallerInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntTimesFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntTimesInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntXorFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntXorInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_SetSafeIntEqualFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_SetSafeIntEqualInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntNotInt(NI?: number,Output?: number): {NI: number, Output: number, $: SafeInt};
}

declare class SafeFloat { 
	Internal: string;
	TrueValue: string;
	Shift: string;
	Flag: number;
	clone() : SafeFloat;
	static C(Other: UObject | any): SafeFloat;
	SCL_Callable_GetRawSafeFloat(): {SF: SafeFloat, $: string};
	SCL_Callable_GetSafeFloat(): {SF: SafeFloat, $: number};
	SCL_Callable_GetSafeFloatWithKey(Key?: string): {SF: SafeFloat, $: number};
	SCL_Callable_SetRawSafeFloat(Value?: string): {SF: SafeFloat, $: number};
	SCL_Callable_SetSafeFloat(Value?: number): {SF: SafeFloat, $: number};
	SCL_Callable_SetSafeFloatWithKey(Key?: string,Value?: number): {SF: SafeFloat, $: number};
	SCL_Pure_GetSafeFloat(): {SF: SafeFloat, $: number};
	SCL_Pure_GetSafeFloatWithKey(Key?: string): {SF: SafeFloat, $: number};
	SCL_Pure_SetSafeFloat(Value?: number): {SF: SafeFloat, $: number};
	SCL_Pure_SetSafeFloatWithKey(Key?: string,Value?: number): {SF: SafeFloat, $: number};
	SCO_Pure_GetSafeFloatDecreaseFSF(Output?: number): {FSF: SafeFloat, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatDivideFloat(NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatDivideFSF(SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatEqualFloat(NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	SCO_Pure_GetSafeFloatEqualFSF(SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	SCO_Pure_GetSafeFloatGreaterEqualFloat(NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	SCO_Pure_GetSafeFloatGreaterEqualFSF(SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	SCO_Pure_GetSafeFloatGreaterFloat(NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	SCO_Pure_GetSafeFloatGreaterFSF(SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	SCO_Pure_GetSafeFloatIncreaseFSF(Output?: number): {FSF: SafeFloat, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatMinusEqualFloat(NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatMinusEqualFSF(SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatMinusFloat(NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatMinusFSF(SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatModFloat(NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatModFSF(SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatNotEqualFloat(NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	SCO_Pure_GetSafeFloatNotEqualFSF(SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	SCO_Pure_GetSafeFloatPlusEqualFloat(NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatPlusEqualFSF(SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatPlusFloat(NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatPlusFSF(SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatSmallerEqualFloat(NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	SCO_Pure_GetSafeFloatSmallerEqualFSF(SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	SCO_Pure_GetSafeFloatSmallerFloat(NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	SCO_Pure_GetSafeFloatSmallerFSF(SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	SCO_Pure_GetSafeFloatTimesFloat(NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	SCO_Pure_GetSafeFloatTimesFSF(SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	SCO_Pure_SetSafeFloatEqualFloat(NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	SCO_Pure_SetSafeFloatEqualFSF(SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCL_Callable_GetRawSafeFloat(SF?: SafeFloat): {SF: SafeFloat, $: string};
	static SCL_Callable_GetSafeFloat(SF?: SafeFloat): {SF: SafeFloat, $: number};
	static SCL_Callable_GetSafeFloatWithKey(SF?: SafeFloat,Key?: string): {SF: SafeFloat, $: number};
	static SCL_Callable_SetRawSafeFloat(SF?: SafeFloat,Value?: string): {SF: SafeFloat, $: number};
	static SCL_Callable_SetSafeFloat(SF?: SafeFloat,Value?: number): {SF: SafeFloat, $: number};
	static SCL_Callable_SetSafeFloatWithKey(SF?: SafeFloat,Key?: string,Value?: number): {SF: SafeFloat, $: number};
	static SCL_Pure_GetSafeFloat(SF?: SafeFloat): {SF: SafeFloat, $: number};
	static SCL_Pure_GetSafeFloatWithKey(SF?: SafeFloat,Key?: string): {SF: SafeFloat, $: number};
	static SCL_Pure_SetSafeFloat(SF?: SafeFloat,Value?: number): {SF: SafeFloat, $: number};
	static SCL_Pure_SetSafeFloatWithKey(SF?: SafeFloat,Key?: string,Value?: number): {SF: SafeFloat, $: number};
	static SCO_Pure_GetSafeFloatDecreaseFSF(FSF?: SafeFloat,Output?: number): {FSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatDivideFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatDivideFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatEqualFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatGreaterEqualFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatGreaterEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatGreaterFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatGreaterFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatIncreaseFSF(FSF?: SafeFloat,Output?: number): {FSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatMinusEqualFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatMinusEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatMinusFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatMinusFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatModFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatModFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatNotEqualFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatNotEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatPlusEqualFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatPlusEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatPlusFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatPlusFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatSmallerEqualFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatSmallerEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatSmallerFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatSmallerFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatTimesFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatTimesFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_SetSafeFloatEqualFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_SetSafeFloatEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
}

declare class SafeByte { 
	Internal: string;
	TrueValue: string;
	Shift: string;
	Flag: number;
	clone() : SafeByte;
	static C(Other: UObject | any): SafeByte;
	SCL_Callable_GetRawSafeByte(): {SB: SafeByte, $: string};
	SCL_Callable_GetSafeByte(): {SB: SafeByte, $: number};
	SCL_Callable_GetSafeByteWithKey(Key?: string): {SB: SafeByte, $: number};
	SCL_Callable_SetRawSafeByte(Value?: string): {SB: SafeByte, $: number};
	SCL_Callable_SetSafeByte(Value?: number): {SB: SafeByte, $: number};
	SCL_Callable_SetSafeByteWithKey(Key?: string,Value?: number): {SB: SafeByte, $: number};
	SCL_Pure_GetSafeByte(): {SB: SafeByte, $: number};
	SCL_Pure_GetSafeByteWithKey(Key?: string): {SB: SafeByte, $: number};
	SCL_Pure_SetSafeByte(Value?: number): {SB: SafeByte, $: number};
	SCL_Pure_SetSafeByteWithKey(Key?: string,Value?: number): {SB: SafeByte, $: number};
	SCO_Pure_GetSafeByteAndByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteAndFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteDecreaseFSB(Output?: number): {FSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteDivideByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteDivideFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteEqualByte(NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	SCO_Pure_GetSafeByteEqualFSB(SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	SCO_Pure_GetSafeByteGreaterByte(NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	SCO_Pure_GetSafeByteGreaterEqualByte(NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	SCO_Pure_GetSafeByteGreaterEqualFSB(SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	SCO_Pure_GetSafeByteGreaterFSB(SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	SCO_Pure_GetSafeByteIncreaseFSB(Output?: number): {FSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteMinusByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteMinusEqualByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteMinusEqualFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteMinusFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteModByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteModFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteNotEqualByte(NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	SCO_Pure_GetSafeByteNotEqualFSB(SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	SCO_Pure_GetSafeByteNotFSB(Output?: number): {FSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteOrByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteOrFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeBytePlusByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeBytePlusEqualByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeBytePlusEqualFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeBytePlusFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteShiftLByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteShiftLFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteShiftRByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteShiftRFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteSmallerByte(NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	SCO_Pure_GetSafeByteSmallerEqualByte(NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	SCO_Pure_GetSafeByteSmallerEqualFSB(SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	SCO_Pure_GetSafeByteSmallerFSB(SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	SCO_Pure_GetSafeByteTimesByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteTimesFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteXorByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_GetSafeByteXorFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	SCO_Pure_SetSafeByteEqualByte(NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	SCO_Pure_SetSafeByteEqualFSB(SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCL_Callable_GetRawSafeByte(SB?: SafeByte): {SB: SafeByte, $: string};
	static SCL_Callable_GetSafeByte(SB?: SafeByte): {SB: SafeByte, $: number};
	static SCL_Callable_GetSafeByteWithKey(SB?: SafeByte,Key?: string): {SB: SafeByte, $: number};
	static SCL_Callable_SetRawSafeByte(SB?: SafeByte,Value?: string): {SB: SafeByte, $: number};
	static SCL_Callable_SetSafeByte(SB?: SafeByte,Value?: number): {SB: SafeByte, $: number};
	static SCL_Callable_SetSafeByteWithKey(SB?: SafeByte,Key?: string,Value?: number): {SB: SafeByte, $: number};
	static SCL_Pure_GetSafeByte(SB?: SafeByte): {SB: SafeByte, $: number};
	static SCL_Pure_GetSafeByteWithKey(SB?: SafeByte,Key?: string): {SB: SafeByte, $: number};
	static SCL_Pure_SetSafeByte(SB?: SafeByte,Value?: number): {SB: SafeByte, $: number};
	static SCL_Pure_SetSafeByteWithKey(SB?: SafeByte,Key?: string,Value?: number): {SB: SafeByte, $: number};
	static SCO_Pure_GetSafeByteAndByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteAndFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteDecreaseFSB(FSB?: SafeByte,Output?: number): {FSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteDivideByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteDivideFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteEqualByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteEqualFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteGreaterByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteGreaterEqualByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteGreaterEqualFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteGreaterFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteIncreaseFSB(FSB?: SafeByte,Output?: number): {FSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteMinusByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteMinusEqualByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteMinusEqualFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteMinusFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteModByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteModFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteNotEqualByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteNotEqualFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteNotFSB(FSB?: SafeByte,Output?: number): {FSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteOrByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteOrFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeBytePlusByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeBytePlusEqualByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeBytePlusEqualFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeBytePlusFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteShiftLByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteShiftLFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteShiftRByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteShiftRFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteSmallerByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteSmallerEqualByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteSmallerEqualFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteSmallerFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteTimesByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteTimesFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteXorByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteXorFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_SetSafeByteEqualByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_SetSafeByteEqualFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteNotByte(NB?: number,Output?: number): {NB: number, Output: number, $: SafeByte};
}

declare class SafeBool { 
	Internal: string;
	TrueValue: string;
	Shift: string;
	Flag: number;
	clone() : SafeBool;
	static C(Other: UObject | any): SafeBool;
	SCL_Callable_GetRawSafeBool(): {SB: SafeBool, $: string};
	SCL_Callable_GetSafeBool(): {SB: SafeBool, $: boolean};
	SCL_Callable_GetSafeBoolWithKey(Key?: string): {SB: SafeBool, $: boolean};
	SCL_Callable_SetRawSafeBool(Value?: string): {SB: SafeBool, $: boolean};
	SCL_Callable_SetSafeBool(Value?: boolean): {SB: SafeBool, $: boolean};
	SCL_Callable_SetSafeBoolWithKey(Key?: string,Value?: boolean): {SB: SafeBool, $: boolean};
	SCL_Pure_GetSafeBool(): {SB: SafeBool, $: boolean};
	SCL_Pure_GetSafeBoolWithKey(Key?: string): {SB: SafeBool, $: boolean};
	SCL_Pure_SetSafeBool(Value?: boolean): {SB: SafeBool, $: boolean};
	SCL_Pure_SetSafeBoolWithKey(Key?: string,Value?: boolean): {SB: SafeBool, $: boolean};
	SCO_Pure_GetSafeBoolAndBool(NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	SCO_Pure_GetSafeBoolAndFSB(SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	SCO_Pure_GetSafeBoolEqualBool(NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	SCO_Pure_GetSafeBoolEqualFSB(SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	SCO_Pure_GetSafeBoolNotEqualBool(NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	SCO_Pure_GetSafeBoolNotEqualFSB(SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	SCO_Pure_GetSafeBoolOrBool(NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	SCO_Pure_GetSafeBoolOrFSB(SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	SCO_Pure_SetSafeBoolEqualBool(NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	SCO_Pure_SetSafeBoolEqualFSB(SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCL_Callable_GetRawSafeBool(SB?: SafeBool): {SB: SafeBool, $: string};
	static SCL_Callable_GetSafeBool(SB?: SafeBool): {SB: SafeBool, $: boolean};
	static SCL_Callable_GetSafeBoolWithKey(SB?: SafeBool,Key?: string): {SB: SafeBool, $: boolean};
	static SCL_Callable_SetRawSafeBool(SB?: SafeBool,Value?: string): {SB: SafeBool, $: boolean};
	static SCL_Callable_SetSafeBool(SB?: SafeBool,Value?: boolean): {SB: SafeBool, $: boolean};
	static SCL_Callable_SetSafeBoolWithKey(SB?: SafeBool,Key?: string,Value?: boolean): {SB: SafeBool, $: boolean};
	static SCL_Pure_GetSafeBool(SB?: SafeBool): {SB: SafeBool, $: boolean};
	static SCL_Pure_GetSafeBoolWithKey(SB?: SafeBool,Key?: string): {SB: SafeBool, $: boolean};
	static SCL_Pure_SetSafeBool(SB?: SafeBool,Value?: boolean): {SB: SafeBool, $: boolean};
	static SCL_Pure_SetSafeBoolWithKey(SB?: SafeBool,Key?: string,Value?: boolean): {SB: SafeBool, $: boolean};
	static SCO_Pure_GetSafeBoolAndBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolAndFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolEqualBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolEqualFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolNotEqualBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolNotEqualFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolOrBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolOrFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCO_Pure_SetSafeBoolEqualBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_SetSafeBoolEqualFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
}

declare class SCLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SCLibrary;
	static Find(Outer: UObject, ResourceName: string): SCLibrary;
	static GetDefaultObject(): SCLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SCLibrary;
	static SCO_Pure_SetVector4DEqualFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: Vector4};
	static SCO_Pure_SetVector3DEqualFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: Vector};
	static SCO_Pure_SetVector2DEqualFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: Vector2D};
	static SCO_Pure_SetTransformEqualFST(NT?: Transform,FST?: SafeTransform): {NT: Transform, FST: SafeTransform, $: Transform};
	static SCO_Pure_SetTextEqualFST(NT?: string,FST?: SafeText): {NT: string, FST: SafeText, $: string};
	static SCO_Pure_SetStringEqualFSS(NS?: string,FSS?: SafeString): {NS: string, FSS: SafeString, $: string};
	static SCO_Pure_SetSafeVector4DEqualVector4D(FSV?: SafeVector4D,NV?: Vector4,Output?: Vector4): {FSV: SafeVector4D, NV: Vector4, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_SetSafeVector4DEqualFSV(FSV?: SafeVector4D,SSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, SSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_SetSafeVector3DEqualVector3D(FSV?: SafeVector3D,NV?: Vector,Output?: Vector): {FSV: SafeVector3D, NV: Vector, Output: Vector, $: SafeVector3D};
	static SCO_Pure_SetSafeVector3DEqualFSV(FSV?: SafeVector3D,SSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, SSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_SetSafeVector2DEqualVector2D(FSV?: SafeVector2D,NV?: Vector2D,Output?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_SetSafeVector2DEqualFSV(FSV?: SafeVector2D,SSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, SSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_SetSafeTransformEqualTransform(FST?: SafeTransform,SST?: Transform,Output?: Transform): {FST: SafeTransform, SST: Transform, Output: Transform, $: SafeTransform};
	static SCO_Pure_SetSafeTransformEqualFST(FST?: SafeTransform,SST?: SafeTransform,Output?: Transform): {FST: SafeTransform, SST: SafeTransform, Output: Transform, $: SafeTransform};
	static SCO_Pure_SetSafeTextEqualText(FST?: SafeText,NT?: string,Output?: string): {FST: SafeText, NT: string, Output: string, $: SafeText};
	static SCO_Pure_SetSafeTextEqualFST(FST?: SafeText,ST?: SafeText,Output?: string): {FST: SafeText, ST: SafeText, Output: string, $: SafeText};
	static SCO_Pure_SetSafeStringEqualString(FSS?: SafeString,NS?: string,Output?: string): {FSS: SafeString, NS: string, Output: string, $: SafeString};
	static SCO_Pure_SetSafeStringEqualFSS(FSS?: SafeString,SS?: SafeString,Output?: string): {FSS: SafeString, SS: SafeString, Output: string, $: SafeString};
	static SCO_Pure_SetSafeRotatorEqualRotator(FSR?: SafeRotator,NR?: Rotator,Output?: Rotator): {FSR: SafeRotator, NR: Rotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_SetSafeRotatorEqualFSR(FSR?: SafeRotator,SSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, SSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_SetSafeNameEqualName(FSN?: SafeName,NN?: string,Output?: string): {FSN: SafeName, NN: string, Output: string, $: SafeName};
	static SCO_Pure_SetSafeNameEqualFSN(FSN?: SafeName,SSN?: SafeName,Output?: string): {FSN: SafeName, SSN: SafeName, Output: string, $: SafeName};
	static SCO_Pure_SetSafeIntEqualInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_SetSafeIntEqualFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_SetSafeFloatEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_SetSafeFloatEqualFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_SetSafeColorEqualFSC(FSC?: SafeColor,SSC?: SafeColor,Output?: LinearColor): {FSC: SafeColor, SSC: SafeColor, Output: LinearColor, $: SafeColor};
	static SCO_Pure_SetSafeColorEqualColor(FSC?: SafeColor,SSC?: LinearColor,Output?: LinearColor): {FSC: SafeColor, SSC: LinearColor, Output: LinearColor, $: SafeColor};
	static SCO_Pure_SetSafeByteEqualFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_SetSafeByteEqualByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_SetSafeBoolEqualFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCO_Pure_SetSafeBoolEqualBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_SetRotatorEqualFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: Rotator};
	static SCO_Pure_SetNameEqualFSN(NN?: string,FSN?: SafeName): {NN: string, FSN: SafeName, $: string};
	static SCO_Pure_SetIntEqualFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_SetFloatEqualFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: number};
	static SCO_Pure_SetColorEqualFSC(NC?: LinearColor,FSC?: SafeColor): {NC: LinearColor, FSC: SafeColor, $: LinearColor};
	static SCO_Pure_SetByteEqualFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_SetBoolEqualFSB(NB?: boolean,FSB?: SafeBool): {NB: boolean, FSB: SafeBool, $: boolean};
	static SCO_Pure_GetVector4DTimesFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: Vector4};
	static SCO_Pure_GetVector4DSmallerFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetVector4DSmallerEqualFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetVector4DPlusFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: Vector4};
	static SCO_Pure_GetVector4DPlusEqualFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: Vector4};
	static SCO_Pure_GetVector4DNotEqualFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetVector4DModFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: Vector4};
	static SCO_Pure_GetVector4DMinusFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: Vector4};
	static SCO_Pure_GetVector4DMinusEqualFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: Vector4};
	static SCO_Pure_GetVector4DGreaterFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetVector4DGreaterEqualFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetVector4DEqualFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetVector4DDivideFSV(NV?: Vector4,FSV?: SafeVector4D): {NV: Vector4, FSV: SafeVector4D, $: Vector4};
	static SCO_Pure_GetVector3DTimesFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: Vector};
	static SCO_Pure_GetVector3DSmallerFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetVector3DSmallerEqualFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetVector3DPlusFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: Vector};
	static SCO_Pure_GetVector3DPlusEqualFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: Vector};
	static SCO_Pure_GetVector3DNotEqualFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetVector3DModFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: Vector};
	static SCO_Pure_GetVector3DMinusFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: Vector};
	static SCO_Pure_GetVector3DMinusEqualFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: Vector};
	static SCO_Pure_GetVector3DGreaterFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetVector3DGreaterEqualFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetVector3DEqualFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetVector3DDivideFSV(NV?: Vector,FSV?: SafeVector3D): {NV: Vector, FSV: SafeVector3D, $: Vector};
	static SCO_Pure_GetVector2DTimesFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: Vector2D};
	static SCO_Pure_GetVector2DSmallerFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetVector2DSmallerEqualFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetVector2DPlusFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: Vector2D};
	static SCO_Pure_GetVector2DPlusEqualFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: Vector2D};
	static SCO_Pure_GetVector2DNotEqualFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetVector2DModFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: Vector2D};
	static SCO_Pure_GetVector2DMinusFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: Vector2D};
	static SCO_Pure_GetVector2DMinusEqualFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: Vector2D};
	static SCO_Pure_GetVector2DGreaterFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetVector2DGreaterEqualFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetVector2DEqualFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetVector2DDivideFSV(NV?: Vector2D,FSV?: SafeVector2D): {NV: Vector2D, FSV: SafeVector2D, $: Vector2D};
	static SCO_Pure_GetTransformNotEqualFST(NT?: Transform,FST?: SafeTransform): {NT: Transform, FST: SafeTransform, $: boolean};
	static SCO_Pure_GetTransformEqualFST(NT?: Transform,FST?: SafeTransform): {NT: Transform, FST: SafeTransform, $: boolean};
	static SCO_Pure_GetTextSmallerFST(NT?: string,FST?: SafeText): {NT: string, FST: SafeText, $: boolean};
	static SCO_Pure_GetTextPlusFST(NT?: string,FST?: SafeText): {NT: string, FST: SafeText, $: string};
	static SCO_Pure_GetTextPlusEqualFST(NT?: string,FST?: SafeText): {NT: string, FST: SafeText, $: string};
	static SCO_Pure_GetTextNotEqualFST(NT?: string,FST?: SafeText): {NT: string, FST: SafeText, $: boolean};
	static SCO_Pure_GetTextGreaterFST(NT?: string,FST?: SafeText): {NT: string, FST: SafeText, $: boolean};
	static SCO_Pure_GetTextEqualFST(NT?: string,FST?: SafeText): {NT: string, FST: SafeText, $: boolean};
	static SCO_Pure_GetStringSmallerFSS(NS?: string,FSS?: SafeString): {NS: string, FSS: SafeString, $: boolean};
	static SCO_Pure_GetStringPlusFSS(NS?: string,FSS?: SafeString): {NS: string, FSS: SafeString, $: string};
	static SCO_Pure_GetStringPlusEqualFSS(NS?: string,FSS?: SafeString): {NS: string, FSS: SafeString, $: string};
	static SCO_Pure_GetStringNotEqualFSS(NS?: string,FSS?: SafeString): {NS: string, FSS: SafeString, $: boolean};
	static SCO_Pure_GetStringGreaterFSS(NS?: string,FSS?: SafeString): {NS: string, FSS: SafeString, $: boolean};
	static SCO_Pure_GetStringEqualFSS(NS?: string,FSS?: SafeString): {NS: string, FSS: SafeString, $: boolean};
	static SCO_Pure_GetSafeVector4DTimesVector4D(FSV?: SafeVector4D,NV?: Vector4,Output?: Vector4): {FSV: SafeVector4D, NV: Vector4, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DTimesFSV(FSV?: SafeVector4D,SSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, SSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DSmallerVector4D(FSV?: SafeVector4D,NV?: Vector4): {FSV: SafeVector4D, NV: Vector4, $: boolean};
	static SCO_Pure_GetSafeVector4DSmallerFSV(FSV?: SafeVector4D,SSV?: SafeVector4D): {FSV: SafeVector4D, SSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetSafeVector4DSmallerEqualVector4D(FSV?: SafeVector4D,NV?: Vector4): {FSV: SafeVector4D, NV: Vector4, $: boolean};
	static SCO_Pure_GetSafeVector4DSmallerEqualFSV(FSV?: SafeVector4D,SSV?: SafeVector4D): {FSV: SafeVector4D, SSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetSafeVector4DPlusVector4D(FSV?: SafeVector4D,NV?: Vector4,Output?: Vector4): {FSV: SafeVector4D, NV: Vector4, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DPlusFSV(FSV?: SafeVector4D,SSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, SSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DPlusEqualVector4D(FSV?: SafeVector4D,NV?: Vector4,Output?: Vector4): {FSV: SafeVector4D, NV: Vector4, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DPlusEqualFSV(FSV?: SafeVector4D,SSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, SSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DNotEqualVector4D(FSV?: SafeVector4D,NV?: Vector4): {FSV: SafeVector4D, NV: Vector4, $: boolean};
	static SCO_Pure_GetSafeVector4DNotEqualFSV(FSV?: SafeVector4D,SSV?: SafeVector4D): {FSV: SafeVector4D, SSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetSafeVector4DModVector4D(FSV?: SafeVector4D,NV?: Vector4,Output?: Vector4): {FSV: SafeVector4D, NV: Vector4, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DModFSV(FSV?: SafeVector4D,SSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, SSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DMinusVector4D(FSV?: SafeVector4D,NV?: Vector4,Output?: Vector4): {FSV: SafeVector4D, NV: Vector4, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DMinusFSV(FSV?: SafeVector4D,SSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, SSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DMinusEqualVector4D(FSV?: SafeVector4D,NV?: Vector4,Output?: Vector4): {FSV: SafeVector4D, NV: Vector4, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DMinusEqualFSV(FSV?: SafeVector4D,SSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, SSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DIncreaseFSV(FSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DGreaterVector4D(FSV?: SafeVector4D,NV?: Vector4): {FSV: SafeVector4D, NV: Vector4, $: boolean};
	static SCO_Pure_GetSafeVector4DGreaterFSV(FSV?: SafeVector4D,SSV?: SafeVector4D): {FSV: SafeVector4D, SSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetSafeVector4DGreaterEqualVector4D(FSV?: SafeVector4D,NV?: Vector4): {FSV: SafeVector4D, NV: Vector4, $: boolean};
	static SCO_Pure_GetSafeVector4DGreaterEqualFSV(FSV?: SafeVector4D,SSV?: SafeVector4D): {FSV: SafeVector4D, SSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetSafeVector4DEqualVector4D(FSV?: SafeVector4D,NV?: Vector4): {FSV: SafeVector4D, NV: Vector4, $: boolean};
	static SCO_Pure_GetSafeVector4DEqualFSV(FSV?: SafeVector4D,SSV?: SafeVector4D): {FSV: SafeVector4D, SSV: SafeVector4D, $: boolean};
	static SCO_Pure_GetSafeVector4DDivideVector4D(FSV?: SafeVector4D,NV?: Vector4,Output?: Vector4): {FSV: SafeVector4D, NV: Vector4, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DDivideFSV(FSV?: SafeVector4D,SSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, SSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector4DDecreaseFSV(FSV?: SafeVector4D,Output?: Vector4): {FSV: SafeVector4D, Output: Vector4, $: SafeVector4D};
	static SCO_Pure_GetSafeVector3DTimesVector3D(FSV?: SafeVector3D,NV?: Vector,Output?: Vector): {FSV: SafeVector3D, NV: Vector, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DTimesFSV(FSV?: SafeVector3D,SSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, SSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DSmallerVector3D(FSV?: SafeVector3D,NV?: Vector): {FSV: SafeVector3D, NV: Vector, $: boolean};
	static SCO_Pure_GetSafeVector3DSmallerFSV(FSV?: SafeVector3D,SSV?: SafeVector3D): {FSV: SafeVector3D, SSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetSafeVector3DSmallerEqualVector3D(FSV?: SafeVector3D,NV?: Vector): {FSV: SafeVector3D, NV: Vector, $: boolean};
	static SCO_Pure_GetSafeVector3DSmallerEqualFSV(FSV?: SafeVector3D,SSV?: SafeVector3D): {FSV: SafeVector3D, SSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetSafeVector3DPlusVector3D(FSV?: SafeVector3D,NV?: Vector,Output?: Vector): {FSV: SafeVector3D, NV: Vector, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DPlusFSV(FSV?: SafeVector3D,SSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, SSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DPlusEqualVector3D(FSV?: SafeVector3D,NV?: Vector,Output?: Vector): {FSV: SafeVector3D, NV: Vector, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DPlusEqualFSV(FSV?: SafeVector3D,SSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, SSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DNotEqualVector3D(FSV?: SafeVector3D,NV?: Vector): {FSV: SafeVector3D, NV: Vector, $: boolean};
	static SCO_Pure_GetSafeVector3DNotEqualFSV(FSV?: SafeVector3D,SSV?: SafeVector3D): {FSV: SafeVector3D, SSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetSafeVector3DModVector3D(FSV?: SafeVector3D,NV?: Vector,Output?: Vector): {FSV: SafeVector3D, NV: Vector, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DModFSV(FSV?: SafeVector3D,SSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, SSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DMinusVector3D(FSV?: SafeVector3D,NV?: Vector,Output?: Vector): {FSV: SafeVector3D, NV: Vector, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DMinusFSV(FSV?: SafeVector3D,SSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, SSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DMinusEqualVector3D(FSV?: SafeVector3D,NV?: Vector,Output?: Vector): {FSV: SafeVector3D, NV: Vector, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DMinusEqualFSV(FSV?: SafeVector3D,SSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, SSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DIncreaseFSV(FSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DGreaterVector3D(FSV?: SafeVector3D,NV?: Vector): {FSV: SafeVector3D, NV: Vector, $: boolean};
	static SCO_Pure_GetSafeVector3DGreaterFSV(FSV?: SafeVector3D,SSV?: SafeVector3D): {FSV: SafeVector3D, SSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetSafeVector3DGreaterEqualVector3D(FSV?: SafeVector3D,NV?: Vector): {FSV: SafeVector3D, NV: Vector, $: boolean};
	static SCO_Pure_GetSafeVector3DGreaterEqualFSV(FSV?: SafeVector3D,SSV?: SafeVector3D): {FSV: SafeVector3D, SSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetSafeVector3DEqualVector3D(FSV?: SafeVector3D,NV?: Vector): {FSV: SafeVector3D, NV: Vector, $: boolean};
	static SCO_Pure_GetSafeVector3DEqualFSV(FSV?: SafeVector3D,SSV?: SafeVector3D): {FSV: SafeVector3D, SSV: SafeVector3D, $: boolean};
	static SCO_Pure_GetSafeVector3DDivideVector3D(FSV?: SafeVector3D,NV?: Vector,Output?: Vector): {FSV: SafeVector3D, NV: Vector, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DDivideFSV(FSV?: SafeVector3D,SSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, SSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector3DDecreaseFSV(FSV?: SafeVector3D,Output?: Vector): {FSV: SafeVector3D, Output: Vector, $: SafeVector3D};
	static SCO_Pure_GetSafeVector2DTimesVector2D(FSV?: SafeVector2D,NV?: Vector2D,Output?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DTimesFSV(FSV?: SafeVector2D,SSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, SSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DSmallerVector2D(FSV?: SafeVector2D,NV?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DSmallerFSV(FSV?: SafeVector2D,SSV?: SafeVector2D): {FSV: SafeVector2D, SSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DSmallerEqualVector2D(FSV?: SafeVector2D,NV?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DSmallerEqualFSV(FSV?: SafeVector2D,SSV?: SafeVector2D): {FSV: SafeVector2D, SSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DPlusVector2D(FSV?: SafeVector2D,NV?: Vector2D,Output?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DPlusFSV(FSV?: SafeVector2D,SSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, SSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DPlusEqualVector2D(FSV?: SafeVector2D,NV?: Vector2D,Output?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DPlusEqualFSV(FSV?: SafeVector2D,SSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, SSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DNotEqualVector2D(FSV?: SafeVector2D,NV?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DNotEqualFSV(FSV?: SafeVector2D,SSV?: SafeVector2D): {FSV: SafeVector2D, SSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DModVector2D(FSV?: SafeVector2D,NV?: Vector2D,Output?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DModFSV(FSV?: SafeVector2D,SSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, SSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DMinusVector2D(FSV?: SafeVector2D,NV?: Vector2D,Output?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DMinusFSV(FSV?: SafeVector2D,SSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, SSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DMinusEqualVector2D(FSV?: SafeVector2D,NV?: Vector2D,Output?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DMinusEqualFSV(FSV?: SafeVector2D,SSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, SSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DIncreaseFSV(FSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DGreaterVector2D(FSV?: SafeVector2D,NV?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DGreaterFSV(FSV?: SafeVector2D,SSV?: SafeVector2D): {FSV: SafeVector2D, SSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DGreaterEqualVector2D(FSV?: SafeVector2D,NV?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DGreaterEqualFSV(FSV?: SafeVector2D,SSV?: SafeVector2D): {FSV: SafeVector2D, SSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DEqualVector2D(FSV?: SafeVector2D,NV?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DEqualFSV(FSV?: SafeVector2D,SSV?: SafeVector2D): {FSV: SafeVector2D, SSV: SafeVector2D, $: boolean};
	static SCO_Pure_GetSafeVector2DDivideVector2D(FSV?: SafeVector2D,NV?: Vector2D,Output?: Vector2D): {FSV: SafeVector2D, NV: Vector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DDivideFSV(FSV?: SafeVector2D,SSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, SSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeVector2DDecreaseFSV(FSV?: SafeVector2D,Output?: Vector2D): {FSV: SafeVector2D, Output: Vector2D, $: SafeVector2D};
	static SCO_Pure_GetSafeTransformNotEqualTransform(FST?: SafeTransform,NT?: Transform): {FST: SafeTransform, NT: Transform, $: boolean};
	static SCO_Pure_GetSafeTransformNotEqualFST(FST?: SafeTransform,SST?: SafeTransform): {FST: SafeTransform, SST: SafeTransform, $: boolean};
	static SCO_Pure_GetSafeTransformEqualTransform(FST?: SafeTransform,NT?: Transform): {FST: SafeTransform, NT: Transform, $: boolean};
	static SCO_Pure_GetSafeTransformEqualFST(FST?: SafeTransform,SST?: SafeTransform): {FST: SafeTransform, SST: SafeTransform, $: boolean};
	static SCO_Pure_GetSafeTextSmallerText(FST?: SafeText,NT?: string): {FST: SafeText, NT: string, $: boolean};
	static SCO_Pure_GetSafeTextSmallerFST(FST?: SafeText,ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	static SCO_Pure_GetSafeTextPlusText(FST?: SafeText,NT?: string,Output?: string): {FST: SafeText, NT: string, Output: string, $: SafeText};
	static SCO_Pure_GetSafeTextPlusFST(FST?: SafeText,ST?: SafeText,Output?: string): {FST: SafeText, ST: SafeText, Output: string, $: SafeText};
	static SCO_Pure_GetSafeTextPlusEqualText(FST?: SafeText,NT?: string,Output?: string): {FST: SafeText, NT: string, Output: string, $: SafeText};
	static SCO_Pure_GetSafeTextPlusEqualFST(FST?: SafeText,ST?: SafeText,Output?: string): {FST: SafeText, ST: SafeText, Output: string, $: SafeText};
	static SCO_Pure_GetSafeTextNotEqualText(FST?: SafeText,NT?: string): {FST: SafeText, NT: string, $: boolean};
	static SCO_Pure_GetSafeTextNotEqualFST(FST?: SafeText,ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	static SCO_Pure_GetSafeTextGreaterText(FST?: SafeText,NT?: string): {FST: SafeText, NT: string, $: boolean};
	static SCO_Pure_GetSafeTextGreaterFST(FST?: SafeText,ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	static SCO_Pure_GetSafeTextEqualText(FST?: SafeText,NT?: string): {FST: SafeText, NT: string, $: boolean};
	static SCO_Pure_GetSafeTextEqualFST(FST?: SafeText,ST?: SafeText): {FST: SafeText, ST: SafeText, $: boolean};
	static SCO_Pure_GetSafeStringSmallerString(FSS?: SafeString,NS?: string): {FSS: SafeString, NS: string, $: boolean};
	static SCO_Pure_GetSafeStringSmallerFSS(FSS?: SafeString,SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	static SCO_Pure_GetSafeStringPlusString(FSS?: SafeString,NS?: string,Output?: string): {FSS: SafeString, NS: string, Output: string, $: SafeString};
	static SCO_Pure_GetSafeStringPlusFSS(FSS?: SafeString,SS?: SafeString,Output?: string): {FSS: SafeString, SS: SafeString, Output: string, $: SafeString};
	static SCO_Pure_GetSafeStringPlusEqualString(FSS?: SafeString,NS?: string,Output?: string): {FSS: SafeString, NS: string, Output: string, $: SafeString};
	static SCO_Pure_GetSafeStringPlusEqualFSS(FSS?: SafeString,SS?: SafeString,Output?: string): {FSS: SafeString, SS: SafeString, Output: string, $: SafeString};
	static SCO_Pure_GetSafeStringNotEqualString(FSS?: SafeString,NS?: string): {FSS: SafeString, NS: string, $: boolean};
	static SCO_Pure_GetSafeStringNotEqualFSS(FSS?: SafeString,SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	static SCO_Pure_GetSafeStringGreaterString(FSS?: SafeString,NS?: string): {FSS: SafeString, NS: string, $: boolean};
	static SCO_Pure_GetSafeStringGreaterFSS(FSS?: SafeString,SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	static SCO_Pure_GetSafeStringEqualString(FSS?: SafeString,NS?: string): {FSS: SafeString, NS: string, $: boolean};
	static SCO_Pure_GetSafeStringEqualFSS(FSS?: SafeString,SS?: SafeString): {FSS: SafeString, SS: SafeString, $: boolean};
	static SCO_Pure_GetSafeRotatorTimesRotator(FSR?: SafeRotator,NR?: Rotator,Output?: Rotator): {FSR: SafeRotator, NR: Rotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorTimesFSR(FSR?: SafeRotator,SSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, SSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorSmallerRotator(FSR?: SafeRotator,NR?: Rotator): {FSR: SafeRotator, NR: Rotator, $: boolean};
	static SCO_Pure_GetSafeRotatorSmallerFSR(FSR?: SafeRotator,SSR?: SafeRotator): {FSR: SafeRotator, SSR: SafeRotator, $: boolean};
	static SCO_Pure_GetSafeRotatorSmallerEqualRotator(FSR?: SafeRotator,NR?: Rotator): {FSR: SafeRotator, NR: Rotator, $: boolean};
	static SCO_Pure_GetSafeRotatorSmallerEqualFSR(FSR?: SafeRotator,SSR?: SafeRotator): {FSR: SafeRotator, SSR: SafeRotator, $: boolean};
	static SCO_Pure_GetSafeRotatorPlusRotator(FSR?: SafeRotator,NR?: Rotator,Output?: Rotator): {FSR: SafeRotator, NR: Rotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorPlusFSR(FSR?: SafeRotator,SSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, SSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorPlusEqualRotator(FSR?: SafeRotator,NR?: Rotator,Output?: Rotator): {FSR: SafeRotator, NR: Rotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorPlusEqualFSR(FSR?: SafeRotator,SSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, SSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorNotEqualRotator(FSR?: SafeRotator,NR?: Rotator): {FSR: SafeRotator, NR: Rotator, $: boolean};
	static SCO_Pure_GetSafeRotatorNotEqualFSR(FSR?: SafeRotator,SSR?: SafeRotator): {FSR: SafeRotator, SSR: SafeRotator, $: boolean};
	static SCO_Pure_GetSafeRotatorModRotator(FSR?: SafeRotator,NR?: Rotator,Output?: Rotator): {FSR: SafeRotator, NR: Rotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorModFSR(FSR?: SafeRotator,SSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, SSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorMinusRotator(FSR?: SafeRotator,NR?: Rotator,Output?: Rotator): {FSR: SafeRotator, NR: Rotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorMinusFSR(FSR?: SafeRotator,SSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, SSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorMinusEqualRotator(FSR?: SafeRotator,NR?: Rotator,Output?: Rotator): {FSR: SafeRotator, NR: Rotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorMinusEqualFSR(FSR?: SafeRotator,SSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, SSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorIncreaseFSR(FSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorGreaterRotator(FSR?: SafeRotator,NR?: Rotator): {FSR: SafeRotator, NR: Rotator, $: boolean};
	static SCO_Pure_GetSafeRotatorGreaterFSR(FSR?: SafeRotator,SSR?: SafeRotator): {FSR: SafeRotator, SSR: SafeRotator, $: boolean};
	static SCO_Pure_GetSafeRotatorGreaterEqualRotator(FSR?: SafeRotator,NR?: Rotator): {FSR: SafeRotator, NR: Rotator, $: boolean};
	static SCO_Pure_GetSafeRotatorGreaterEqualFSR(FSR?: SafeRotator,SSR?: SafeRotator): {FSR: SafeRotator, SSR: SafeRotator, $: boolean};
	static SCO_Pure_GetSafeRotatorEqualRotator(FSR?: SafeRotator,NR?: Rotator): {FSR: SafeRotator, NR: Rotator, $: boolean};
	static SCO_Pure_GetSafeRotatorEqualFSR(FSR?: SafeRotator,SSR?: SafeRotator): {FSR: SafeRotator, SSR: SafeRotator, $: boolean};
	static SCO_Pure_GetSafeRotatorDivideRotator(FSR?: SafeRotator,NR?: Rotator,Output?: Rotator): {FSR: SafeRotator, NR: Rotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorDivideFSR(FSR?: SafeRotator,SSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, SSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeRotatorDecreaseFSR(FSR?: SafeRotator,Output?: Rotator): {FSR: SafeRotator, Output: Rotator, $: SafeRotator};
	static SCO_Pure_GetSafeNameSmallerName(FSN?: SafeName,NN?: string): {FSN: SafeName, NN: string, $: boolean};
	static SCO_Pure_GetSafeNameSmallerFSN(FSN?: SafeName,SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	static SCO_Pure_GetSafeNamePlusName(FSN?: SafeName,NN?: string,Output?: string): {FSN: SafeName, NN: string, Output: string, $: SafeName};
	static SCO_Pure_GetSafeNamePlusFSN(FSN?: SafeName,SSN?: SafeName,Output?: string): {FSN: SafeName, SSN: SafeName, Output: string, $: SafeName};
	static SCO_Pure_GetSafeNamePlusEqualName(FSN?: SafeName,NN?: string,Output?: string): {FSN: SafeName, NN: string, Output: string, $: SafeName};
	static SCO_Pure_GetSafeNamePlusEqualFSN(FSN?: SafeName,SSN?: SafeName,Output?: string): {FSN: SafeName, SSN: SafeName, Output: string, $: SafeName};
	static SCO_Pure_GetSafeNameNotEqualName(FSN?: SafeName,NN?: string): {FSN: SafeName, NN: string, $: boolean};
	static SCO_Pure_GetSafeNameNotEqualFSN(FSN?: SafeName,SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	static SCO_Pure_GetSafeNameGreaterName(FSN?: SafeName,NN?: string): {FSN: SafeName, NN: string, $: boolean};
	static SCO_Pure_GetSafeNameGreaterFSN(FSN?: SafeName,SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	static SCO_Pure_GetSafeNameEqualName(FSN?: SafeName,NN?: string): {FSN: SafeName, NN: string, $: boolean};
	static SCO_Pure_GetSafeNameEqualFSN(FSN?: SafeName,SSN?: SafeName): {FSN: SafeName, SSN: SafeName, $: boolean};
	static SCO_Pure_GetSafeIntXorInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntXorFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntTimesInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntTimesFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntSmallerInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntSmallerFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntSmallerEqualInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntSmallerEqualFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntShiftRInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntShiftRFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntShiftLInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntShiftLFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntPlusInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntPlusFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntPlusEqualInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntPlusEqualFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntOrInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntOrFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntNotInt(NI?: number,Output?: number): {NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntNotFSI(FSI?: SafeInt,Output?: number): {FSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntNotEqualInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntNotEqualFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntModInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntModFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntMinusInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntMinusFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntMinusEqualInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntMinusEqualFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntIncreaseFSI(FSI?: SafeInt,Output?: number): {FSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntGreaterInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntGreaterFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntGreaterEqualInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntGreaterEqualFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntEqualInt(FSI?: SafeInt,NI?: number): {FSI: SafeInt, NI: number, $: boolean};
	static SCO_Pure_GetSafeIntEqualFSI(FSI?: SafeInt,SSI?: SafeInt): {FSI: SafeInt, SSI: SafeInt, $: boolean};
	static SCO_Pure_GetSafeIntDivideInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntDivideFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntDecreaseFSI(FSI?: SafeInt,Output?: number): {FSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntAndInt(FSI?: SafeInt,NI?: number,Output?: number): {FSI: SafeInt, NI: number, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeIntAndFSI(FSI?: SafeInt,SSI?: SafeInt,Output?: number): {FSI: SafeInt, SSI: SafeInt, Output: number, $: SafeInt};
	static SCO_Pure_GetSafeFloatTimesFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatTimesFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatSmallerFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatSmallerFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatSmallerEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatSmallerEqualFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatPlusFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatPlusFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatPlusEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatPlusEqualFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatNotEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatNotEqualFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatModFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatModFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatMinusFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatMinusFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatMinusEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatMinusEqualFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatIncreaseFSF(FSF?: SafeFloat,Output?: number): {FSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatGreaterFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatGreaterFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatGreaterEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatGreaterEqualFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatEqualFSF(FSF?: SafeFloat,SSF?: SafeFloat): {FSF: SafeFloat, SSF: SafeFloat, $: boolean};
	static SCO_Pure_GetSafeFloatEqualFloat(FSF?: SafeFloat,NF?: number): {FSF: SafeFloat, NF: number, $: boolean};
	static SCO_Pure_GetSafeFloatDivideFSF(FSF?: SafeFloat,SSF?: SafeFloat,Output?: number): {FSF: SafeFloat, SSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatDivideFloat(FSF?: SafeFloat,NF?: number,Output?: number): {FSF: SafeFloat, NF: number, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeFloatDecreaseFSF(FSF?: SafeFloat,Output?: number): {FSF: SafeFloat, Output: number, $: SafeFloat};
	static SCO_Pure_GetSafeColorNotEqualFSC(FSC?: SafeColor,SSC?: SafeColor): {FSC: SafeColor, SSC: SafeColor, $: boolean};
	static SCO_Pure_GetSafeColorNotEqualColor(FSC?: SafeColor,NC?: LinearColor): {FSC: SafeColor, NC: LinearColor, $: boolean};
	static SCO_Pure_GetSafeColorEqualFSC(FSC?: SafeColor,SSC?: SafeColor): {FSC: SafeColor, SSC: SafeColor, $: boolean};
	static SCO_Pure_GetSafeColorEqualColor(FSC?: SafeColor,NC?: LinearColor): {FSC: SafeColor, NC: LinearColor, $: boolean};
	static SCO_Pure_GetSafeByteXorFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteXorByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteTimesFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteTimesByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteSmallerFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteSmallerEqualFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteSmallerEqualByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteSmallerByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteShiftRFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteShiftRByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteShiftLFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteShiftLByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeBytePlusFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeBytePlusEqualFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeBytePlusEqualByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeBytePlusByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteOrFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteOrByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteNotFSB(FSB?: SafeByte,Output?: number): {FSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteNotEqualFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteNotEqualByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteNotByte(NB?: number,Output?: number): {NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteModFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteModByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteMinusFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteMinusEqualFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteMinusEqualByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteMinusByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteIncreaseFSB(FSB?: SafeByte,Output?: number): {FSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteGreaterFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteGreaterEqualFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteGreaterEqualByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteGreaterByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteEqualFSB(FSB?: SafeByte,SSB?: SafeByte): {FSB: SafeByte, SSB: SafeByte, $: boolean};
	static SCO_Pure_GetSafeByteEqualByte(FSB?: SafeByte,NB?: number): {FSB: SafeByte, NB: number, $: boolean};
	static SCO_Pure_GetSafeByteDivideFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteDivideByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteDecreaseFSB(FSB?: SafeByte,Output?: number): {FSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteAndFSB(FSB?: SafeByte,SSB?: SafeByte,Output?: number): {FSB: SafeByte, SSB: SafeByte, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeByteAndByte(FSB?: SafeByte,NB?: number,Output?: number): {FSB: SafeByte, NB: number, Output: number, $: SafeByte};
	static SCO_Pure_GetSafeBoolOrFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolOrBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolNotEqualFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolNotEqualBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolEqualFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolEqualBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolAndFSB(FSB?: SafeBool,SSB?: SafeBool,Output?: boolean): {FSB: SafeBool, SSB: SafeBool, Output: boolean, $: SafeBool};
	static SCO_Pure_GetSafeBoolAndBool(FSB?: SafeBool,NB?: boolean,Output?: boolean): {FSB: SafeBool, NB: boolean, Output: boolean, $: SafeBool};
	static SCO_Pure_GetRotatorTimesFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: Rotator};
	static SCO_Pure_GetRotatorSmallerFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: boolean};
	static SCO_Pure_GetRotatorSmallerEqualFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: boolean};
	static SCO_Pure_GetRotatorPlusFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: Rotator};
	static SCO_Pure_GetRotatorPlusEqualFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: Rotator};
	static SCO_Pure_GetRotatorNotEqualFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: boolean};
	static SCO_Pure_GetRotatorModFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: Rotator};
	static SCO_Pure_GetRotatorMinusFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: Rotator};
	static SCO_Pure_GetRotatorMinusEqualFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: Rotator};
	static SCO_Pure_GetRotatorGreaterFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: boolean};
	static SCO_Pure_GetRotatorGreaterEqualFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: boolean};
	static SCO_Pure_GetRotatorEqualFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: boolean};
	static SCO_Pure_GetRotatorDivideFSR(NR?: Rotator,FSR?: SafeRotator): {NR: Rotator, FSR: SafeRotator, $: Rotator};
	static SCO_Pure_GetNameSmallerFSN(NN?: string,FSN?: SafeName): {NN: string, FSN: SafeName, $: boolean};
	static SCO_Pure_GetNamePlusFSN(NN?: string,FSN?: SafeName): {NN: string, FSN: SafeName, $: string};
	static SCO_Pure_GetNamePlusEqualFSN(NN?: string,FSN?: SafeName): {NN: string, FSN: SafeName, $: string};
	static SCO_Pure_GetNameNotEqualFSN(NN?: string,FSN?: SafeName): {NN: string, FSN: SafeName, $: boolean};
	static SCO_Pure_GetNameGreaterFSN(NN?: string,FSN?: SafeName): {NN: string, FSN: SafeName, $: boolean};
	static SCO_Pure_GetNameEqualFSN(NN?: string,FSN?: SafeName): {NN: string, FSN: SafeName, $: boolean};
	static SCO_Pure_GetIntXorFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntTimesFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntSmallerFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: boolean};
	static SCO_Pure_GetIntSmallerEqualFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: boolean};
	static SCO_Pure_GetIntShiftRFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntShiftLFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntPlusFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntPlusEqualFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntOrFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntNotEqualFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: boolean};
	static SCO_Pure_GetIntModFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntMinusFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntMinusEqualFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntGreaterFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: boolean};
	static SCO_Pure_GetIntGreaterEqualFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: boolean};
	static SCO_Pure_GetIntEqualFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: boolean};
	static SCO_Pure_GetIntDivideFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetIntAndFSI(NI?: number,FSI?: SafeInt): {NI: number, FSI: SafeInt, $: number};
	static SCO_Pure_GetFloatTimesFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: number};
	static SCO_Pure_GetFloatSmallerFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: boolean};
	static SCO_Pure_GetFloatSmallerEqualFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: boolean};
	static SCO_Pure_GetFloatPlusFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: number};
	static SCO_Pure_GetFloatPlusEqualFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: number};
	static SCO_Pure_GetFloatNotEqualFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: boolean};
	static SCO_Pure_GetFloatModFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: number};
	static SCO_Pure_GetFloatMinusFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: number};
	static SCO_Pure_GetFloatMinusEqualFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: number};
	static SCO_Pure_GetFloatGreaterFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: boolean};
	static SCO_Pure_GetFloatGreaterEqualFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: boolean};
	static SCO_Pure_GetFloatEqualFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: boolean};
	static SCO_Pure_GetFloatDivideFSF(NF?: number,FSF?: SafeFloat): {NF: number, FSF: SafeFloat, $: number};
	static SCO_Pure_GetColorNotEqualFSC(NC?: LinearColor,FSC?: SafeColor): {NC: LinearColor, FSC: SafeColor, $: boolean};
	static SCO_Pure_GetColorEqualFSC(NC?: LinearColor,FSC?: SafeColor): {NC: LinearColor, FSC: SafeColor, $: boolean};
	static SCO_Pure_GetByteXorFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetByteTimesFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetByteSmallerFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: boolean};
	static SCO_Pure_GetByteSmallerEqualFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: boolean};
	static SCO_Pure_GetByteShiftRFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetByteShiftLFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetBytePlusFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetBytePlusEqualFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetByteOrFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetByteNotEqualFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: boolean};
	static SCO_Pure_GetByteModFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetByteMinusFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetByteMinusEqualFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetByteGreaterFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: boolean};
	static SCO_Pure_GetByteGreaterEqualFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: boolean};
	static SCO_Pure_GetByteEqualFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: boolean};
	static SCO_Pure_GetByteDivideFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetByteAndFSB(NB?: number,FSB?: SafeByte): {NB: number, FSB: SafeByte, $: number};
	static SCO_Pure_GetBoolOrFSB(NB?: boolean,FSB?: SafeBool): {NB: boolean, FSB: SafeBool, $: boolean};
	static SCO_Pure_GetBoolNotEqualFSB(NB?: boolean,FSB?: SafeBool): {NB: boolean, FSB: SafeBool, $: boolean};
	static SCO_Pure_GetBoolEqualFSB(NB?: boolean,FSB?: SafeBool): {NB: boolean, FSB: SafeBool, $: boolean};
	static SCO_Pure_GetBoolAndFSB(NB?: boolean,FSB?: SafeBool): {NB: boolean, FSB: SafeBool, $: boolean};
	static SCL_Pure_SetSafeVector4DWithKey(SV?: SafeVector4D,Key?: string,Value?: Vector4): {SV: SafeVector4D, Value: Vector4, $: Vector4};
	static SCL_Pure_SetSafeVector4D(SV?: SafeVector4D,Value?: Vector4): {SV: SafeVector4D, Value: Vector4, $: Vector4};
	static SCL_Pure_SetSafeVector3DWithKey(SV?: SafeVector3D,Key?: string,Value?: Vector): {SV: SafeVector3D, $: Vector};
	static SCL_Pure_SetSafeVector3D(SV?: SafeVector3D,Value?: Vector): {SV: SafeVector3D, $: Vector};
	static SCL_Pure_SetSafeVector2DWithKey(SV?: SafeVector2D,Key?: string,Value?: Vector2D): {SV: SafeVector2D, $: Vector2D};
	static SCL_Pure_SetSafeVector2D(SV?: SafeVector2D,Value?: Vector2D): {SV: SafeVector2D, $: Vector2D};
	static SCL_Pure_SetSafeTransformWithKey(ST?: SafeTransform,Key?: string,Value?: Transform): {ST: SafeTransform, Value: Transform, $: Transform};
	static SCL_Pure_SetSafeTransform(ST?: SafeTransform,Value?: Transform): {ST: SafeTransform, Value: Transform, $: Transform};
	static SCL_Pure_SetSafeTextWithKey(ST?: SafeText,Key?: string,Value?: string): {ST: SafeText, $: string};
	static SCL_Pure_SetSafeText(ST?: SafeText,Value?: string): {ST: SafeText, $: string};
	static SCL_Pure_SetSafeStringWithKey(SS?: SafeString,Key?: string,Value?: string): {SS: SafeString, $: string};
	static SCL_Pure_SetSafeString(SS?: SafeString,Value?: string): {SS: SafeString, $: string};
	static SCL_Pure_SetSafeRotatorWithKey(SR?: SafeRotator,Key?: string,Value?: Rotator): {SR: SafeRotator, $: Rotator};
	static SCL_Pure_SetSafeRotator(SR?: SafeRotator,Value?: Rotator): {SR: SafeRotator, $: Rotator};
	static SCL_Pure_SetSafeNameWithKey(SN?: SafeName,Key?: string,Value?: string): {SN: SafeName, $: string};
	static SCL_Pure_SetSafeName(SN?: SafeName,Value?: string): {SN: SafeName, $: string};
	static SCL_Pure_SetSafeIntWithKey(SI?: SafeInt,Key?: string,Value?: number): {SI: SafeInt, $: number};
	static SCL_Pure_SetSafeInt(SI?: SafeInt,Value?: number): {SI: SafeInt, $: number};
	static SCL_Pure_SetSafeFloatWithKey(SF?: SafeFloat,Key?: string,Value?: number): {SF: SafeFloat, $: number};
	static SCL_Pure_SetSafeFloat(SF?: SafeFloat,Value?: number): {SF: SafeFloat, $: number};
	static SCL_Pure_SetSafeColorWithKey(SC?: SafeColor,Key?: string,Value?: LinearColor): {SC: SafeColor, Value: LinearColor, $: LinearColor};
	static SCL_Pure_SetSafeColor(SC?: SafeColor,Value?: LinearColor): {SC: SafeColor, Value: LinearColor, $: LinearColor};
	static SCL_Pure_SetSafeByteWithKey(SB?: SafeByte,Key?: string,Value?: number): {SB: SafeByte, $: number};
	static SCL_Pure_SetSafeByte(SB?: SafeByte,Value?: number): {SB: SafeByte, $: number};
	static SCL_Pure_SetSafeBoolWithKey(SB?: SafeBool,Key?: string,Value?: boolean): {SB: SafeBool, $: boolean};
	static SCL_Pure_SetSafeBool(SB?: SafeBool,Value?: boolean): {SB: SafeBool, $: boolean};
	static SCL_Pure_GetSafeVector4DWithKey(SV?: SafeVector4D,Key?: string): {SV: SafeVector4D, $: Vector4};
	static SCL_Pure_GetSafeVector4D(SV?: SafeVector4D): {SV: SafeVector4D, $: Vector4};
	static SCL_Pure_GetSafeVector3DWithKey(SV?: SafeVector3D,Key?: string): {SV: SafeVector3D, $: Vector};
	static SCL_Pure_GetSafeVector3D(SV?: SafeVector3D): {SV: SafeVector3D, $: Vector};
	static SCL_Pure_GetSafeVector2DWithKey(SV?: SafeVector2D,Key?: string): {SV: SafeVector2D, $: Vector2D};
	static SCL_Pure_GetSafeVector2D(SV?: SafeVector2D): {SV: SafeVector2D, $: Vector2D};
	static SCL_Pure_GetSafeTransformWithKey(ST?: SafeTransform,Key?: string): {ST: SafeTransform, $: Transform};
	static SCL_Pure_GetSafeTransform(ST?: SafeTransform): {ST: SafeTransform, $: Transform};
	static SCL_Pure_GetSafeTextWithKey(ST?: SafeText,Key?: string): {ST: SafeText, $: string};
	static SCL_Pure_GetSafeText(ST?: SafeText): {ST: SafeText, $: string};
	static SCL_Pure_GetSafeStringWithKey(SS?: SafeString,Key?: string): {SS: SafeString, $: string};
	static SCL_Pure_GetSafeString(SS?: SafeString): {SS: SafeString, $: string};
	static SCL_Pure_GetSafeRotatorWithKey(SR?: SafeRotator,Key?: string): {SR: SafeRotator, $: Rotator};
	static SCL_Pure_GetSafeRotator(SR?: SafeRotator): {SR: SafeRotator, $: Rotator};
	static SCL_Pure_GetSafeNameWithKey(SN?: SafeName,Key?: string): {SN: SafeName, $: string};
	static SCL_Pure_GetSafeName(SN?: SafeName): {SN: SafeName, $: string};
	static SCL_Pure_GetSafeIntWithKey(SI?: SafeInt,Key?: string): {SI: SafeInt, $: number};
	static SCL_Pure_GetSafeInt(SI?: SafeInt): {SI: SafeInt, $: number};
	static SCL_Pure_GetSafeFloatWithKey(SF?: SafeFloat,Key?: string): {SF: SafeFloat, $: number};
	static SCL_Pure_GetSafeFloat(SF?: SafeFloat): {SF: SafeFloat, $: number};
	static SCL_Pure_GetSafeColorWithKey(SC?: SafeColor,Key?: string): {SC: SafeColor, $: LinearColor};
	static SCL_Pure_GetSafeColor(SC?: SafeColor): {SC: SafeColor, $: LinearColor};
	static SCL_Pure_GetSafeByteWithKey(SB?: SafeByte,Key?: string): {SB: SafeByte, $: number};
	static SCL_Pure_GetSafeByte(SB?: SafeByte): {SB: SafeByte, $: number};
	static SCL_Pure_GetSafeBoolWithKey(SB?: SafeBool,Key?: string): {SB: SafeBool, $: boolean};
	static SCL_Pure_GetSafeBool(SB?: SafeBool): {SB: SafeBool, $: boolean};
	static SCL_Callable_SetSafeVector4DWithKey(SV?: SafeVector4D,Key?: string,Value?: Vector4): {SV: SafeVector4D, Value: Vector4, $: Vector4};
	static SCL_Callable_SetSafeVector4D(SV?: SafeVector4D,Value?: Vector4): {SV: SafeVector4D, Value: Vector4, $: Vector4};
	static SCL_Callable_SetSafeVector3DWithKey(SV?: SafeVector3D,Key?: string,Value?: Vector): {SV: SafeVector3D, $: Vector};
	static SCL_Callable_SetSafeVector3D(SV?: SafeVector3D,Value?: Vector): {SV: SafeVector3D, $: Vector};
	static SCL_Callable_SetSafeVector2DWithKey(SV?: SafeVector2D,Key?: string,Value?: Vector2D): {SV: SafeVector2D, $: Vector2D};
	static SCL_Callable_SetSafeVector2D(SV?: SafeVector2D,Value?: Vector2D): {SV: SafeVector2D, $: Vector2D};
	static SCL_Callable_SetSafeTransformWithKey(ST?: SafeTransform,Key?: string,Value?: Transform): {ST: SafeTransform, Value: Transform, $: Transform};
	static SCL_Callable_SetSafeTransform(ST?: SafeTransform,Value?: Transform): {ST: SafeTransform, Value: Transform, $: Transform};
	static SCL_Callable_SetSafeTextWithKey(ST?: SafeText,Key?: string,Value?: string): {ST: SafeText, $: string};
	static SCL_Callable_SetSafeText(ST?: SafeText,Value?: string): {ST: SafeText, $: string};
	static SCL_Callable_SetSafeStringWithKey(SS?: SafeString,Key?: string,Value?: string): {SS: SafeString, $: string};
	static SCL_Callable_SetSafeString(SS?: SafeString,Value?: string): {SS: SafeString, $: string};
	static SCL_Callable_SetSafeRotatorWithKey(SR?: SafeRotator,Key?: string,Value?: Rotator): {SR: SafeRotator, $: Rotator};
	static SCL_Callable_SetSafeRotator(SR?: SafeRotator,Value?: Rotator): {SR: SafeRotator, $: Rotator};
	static SCL_Callable_SetSafeNameWithKey(SN?: SafeName,Key?: string,Value?: string): {SN: SafeName, $: string};
	static SCL_Callable_SetSafeName(SN?: SafeName,Value?: string): {SN: SafeName, $: string};
	static SCL_Callable_SetSafeIntWithKey(SI?: SafeInt,Key?: string,Value?: number): {SI: SafeInt, $: number};
	static SCL_Callable_SetSafeInt(SI?: SafeInt,Value?: number): {SI: SafeInt, $: number};
	static SCL_Callable_SetSafeFloatWithKey(SF?: SafeFloat,Key?: string,Value?: number): {SF: SafeFloat, $: number};
	static SCL_Callable_SetSafeFloat(SF?: SafeFloat,Value?: number): {SF: SafeFloat, $: number};
	static SCL_Callable_SetSafeColorWithKey(SC?: SafeColor,Key?: string,Value?: LinearColor): {SC: SafeColor, Value: LinearColor, $: LinearColor};
	static SCL_Callable_SetSafeColor(SC?: SafeColor,Value?: LinearColor): {SC: SafeColor, Value: LinearColor, $: LinearColor};
	static SCL_Callable_SetSafeByteWithKey(SB?: SafeByte,Key?: string,Value?: number): {SB: SafeByte, $: number};
	static SCL_Callable_SetSafeByte(SB?: SafeByte,Value?: number): {SB: SafeByte, $: number};
	static SCL_Callable_SetSafeBoolWithKey(SB?: SafeBool,Key?: string,Value?: boolean): {SB: SafeBool, $: boolean};
	static SCL_Callable_SetSafeBool(SB?: SafeBool,Value?: boolean): {SB: SafeBool, $: boolean};
	static SCL_Callable_SetRawSafeText(ST?: SafeText,Value?: string): {ST: SafeText, $: string};
	static SCL_Callable_SetRawSafeString(SS?: SafeString,Value?: string): {SS: SafeString, $: string};
	static SCL_Callable_SetRawSafeName(SN?: SafeName,Value?: string): {SN: SafeName, $: string};
	static SCL_Callable_SetRawSafeInt(SI?: SafeInt,Value?: string): {SI: SafeInt, $: number};
	static SCL_Callable_SetRawSafeFloat(SF?: SafeFloat,Value?: string): {SF: SafeFloat, $: number};
	static SCL_Callable_SetRawSafeByte(SB?: SafeByte,Value?: string): {SB: SafeByte, $: number};
	static SCL_Callable_SetRawSafeBool(SB?: SafeBool,Value?: string): {SB: SafeBool, $: boolean};
	static SCL_Callable_GetSafeVector4DWithKey(SV?: SafeVector4D,Key?: string): {SV: SafeVector4D, $: Vector4};
	static SCL_Callable_GetSafeVector4D(SV?: SafeVector4D): {SV: SafeVector4D, $: Vector4};
	static SCL_Callable_GetSafeVector3DWithKey(SV?: SafeVector3D,Key?: string): {SV: SafeVector3D, $: Vector};
	static SCL_Callable_GetSafeVector3D(SV?: SafeVector3D): {SV: SafeVector3D, $: Vector};
	static SCL_Callable_GetSafeVector2DWithKey(SV?: SafeVector2D,Key?: string): {SV: SafeVector2D, $: Vector2D};
	static SCL_Callable_GetSafeVector2D(SV?: SafeVector2D): {SV: SafeVector2D, $: Vector2D};
	static SCL_Callable_GetSafeTransformWithKey(ST?: SafeTransform,Key?: string): {ST: SafeTransform, $: Transform};
	static SCL_Callable_GetSafeTransform(ST?: SafeTransform): {ST: SafeTransform, $: Transform};
	static SCL_Callable_GetSafeTextWithKey(ST?: SafeText,Key?: string): {ST: SafeText, $: string};
	static SCL_Callable_GetSafeText(ST?: SafeText): {ST: SafeText, $: string};
	static SCL_Callable_GetSafeStringWithKey(SS?: SafeString,Key?: string): {SS: SafeString, $: string};
	static SCL_Callable_GetSafeString(SS?: SafeString): {SS: SafeString, $: string};
	static SCL_Callable_GetSafeRotatorWithKey(SR?: SafeRotator,Key?: string): {SR: SafeRotator, $: Rotator};
	static SCL_Callable_GetSafeRotator(SR?: SafeRotator): {SR: SafeRotator, $: Rotator};
	static SCL_Callable_GetSafeNameWithKey(SN?: SafeName,Key?: string): {SN: SafeName, $: string};
	static SCL_Callable_GetSafeName(SN?: SafeName): {SN: SafeName, $: string};
	static SCL_Callable_GetSafeIntWithKey(SI?: SafeInt,Key?: string): {SI: SafeInt, $: number};
	static SCL_Callable_GetSafeInt(SI?: SafeInt): {SI: SafeInt, $: number};
	static SCL_Callable_GetSafeFloatWithKey(SF?: SafeFloat,Key?: string): {SF: SafeFloat, $: number};
	static SCL_Callable_GetSafeFloat(SF?: SafeFloat): {SF: SafeFloat, $: number};
	static SCL_Callable_GetSafeColorWithKey(SC?: SafeColor,Key?: string): {SC: SafeColor, $: LinearColor};
	static SCL_Callable_GetSafeColor(SC?: SafeColor): {SC: SafeColor, $: LinearColor};
	static SCL_Callable_GetSafeByteWithKey(SB?: SafeByte,Key?: string): {SB: SafeByte, $: number};
	static SCL_Callable_GetSafeByte(SB?: SafeByte): {SB: SafeByte, $: number};
	static SCL_Callable_GetSafeBoolWithKey(SB?: SafeBool,Key?: string): {SB: SafeBool, $: boolean};
	static SCL_Callable_GetSafeBool(SB?: SafeBool): {SB: SafeBool, $: boolean};
	static SCL_Callable_GetRawSafeText(ST?: SafeText): {ST: SafeText, $: string};
	static SCL_Callable_GetRawSafeString(SS?: SafeString): {SS: SafeString, $: string};
	static SCL_Callable_GetRawSafeName(SN?: SafeName): {SN: SafeName, $: string};
	static SCL_Callable_GetRawSafeInt(SI?: SafeInt): {SI: SafeInt, $: string};
	static SCL_Callable_GetRawSafeFloat(SF?: SafeFloat): {SF: SafeFloat, $: string};
	static SCL_Callable_GetRawSafeByte(SB?: SafeByte): {SB: SafeByte, $: string};
	static SCL_Callable_GetRawSafeBool(SB?: SafeBool): {SB: SafeBool, $: string};
	static C(Other: UObject | any): SCLibrary;
}

declare class SCUE4Settings extends UObject { 
	KeyGeneratorPath: string;
	IllegalKeywords: string[];
	static Load(ResourceName: string): SCUE4Settings;
	static Find(Outer: UObject, ResourceName: string): SCUE4Settings;
	static GetDefaultObject(): SCUE4Settings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SCUE4Settings;
	static C(Other: UObject | any): SCUE4Settings;
}

declare class SafeGameInstance extends GameInstance { 
	HideGameGuard: boolean;
	AllowDebugging: boolean;
	ScannerInterval: any;
	static Load(ResourceName: string): SafeGameInstance;
	static Find(Outer: UObject, ResourceName: string): SafeGameInstance;
	static GetDefaultObject(): SafeGameInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SafeGameInstance;
	HideGameGuardConsole(Set: boolean): void;
	static C(Other: UObject | any): SafeGameInstance;
}

declare class SubstanceImageInput extends UObject { 
	CompressionLevelRGB: number;
	CompressionLevelAlpha: number;
	SizeX: number;
	SizeY: number;
	NumComponents: number;
	SourceFilePath: string;
	SourceFileTimestamp: string;
	Consumers: SubstanceGraphInstance[];
	static Load(ResourceName: string): SubstanceImageInput;
	static Find(Outer: UObject, ResourceName: string): SubstanceImageInput;
	static GetDefaultObject(): SubstanceImageInput;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubstanceImageInput;
	static C(Other: UObject | any): SubstanceImageInput;
}

declare type ESubstanceEngineType = 'SET_CPU' | 'SET_GPU' | 'SET_MAX';
declare var ESubstanceEngineType : { SET_CPU:'SET_CPU',SET_GPU:'SET_GPU',SET_MAX:'SET_MAX', };
declare type EDefaultSubstanceTextureSize = 'SIZE_16' | 'SIZE_32' | 'SIZE_64' | 'SIZE_128' | 'SIZE_256' | 'SIZE_512' | 'SIZE_1024' | 'SIZE_2048' | 'SIZE_4096' | 'SIZE_MAX';
declare var EDefaultSubstanceTextureSize : { SIZE_16:'SIZE_16',SIZE_32:'SIZE_32',SIZE_64:'SIZE_64',SIZE_128:'SIZE_128',SIZE_256:'SIZE_256',SIZE_512:'SIZE_512',SIZE_1024:'SIZE_1024',SIZE_2048:'SIZE_2048',SIZE_4096:'SIZE_4096',SIZE_MAX:'SIZE_MAX', };
declare class SubstanceSettings extends UObject { 
	MemoryBudgetMb: number;
	CPUCores: number;
	AsyncLoadMipClip: number;
	MaxAsyncSubstancesRenderedPerFrame: number;
	DefaultGenerationMode: ESubstanceGenerationMode;
	SubstanceEngine: ESubstanceEngineType;
	DefaultSubstanceOutputSizeX: EDefaultSubstanceTextureSize;
	DefaultSubstanceOutputSizeY: EDefaultSubstanceTextureSize;
	static Load(ResourceName: string): SubstanceSettings;
	static Find(Outer: UObject, ResourceName: string): SubstanceSettings;
	static GetDefaultObject(): SubstanceSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubstanceSettings;
	static C(Other: UObject | any): SubstanceSettings;
}

declare class SubstanceUtility extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): SubstanceUtility;
	static Find(Outer: UObject, ResourceName: string): SubstanceUtility;
	static GetDefaultObject(): SubstanceUtility;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SubstanceUtility;
	static SyncRendering(InstancesToRender: SubstanceGraphInstance): void;
	static SetGraphInstanceOutputSizeInt(GraphInstance: SubstanceGraphInstance,Width: number,Height: number): void;
	static SetGraphInstanceOutputSize(GraphInstance: SubstanceGraphInstance,Width: ESubstanceTextureSize,Height: ESubstanceTextureSize): void;
	static ResetInputParameters(GraphInstance: SubstanceGraphInstance): void;
	static GetSubstanceTextures(GraphInstance: SubstanceGraphInstance): SubstanceTexture2D[];
	static GetSubstances(Material: MaterialInterface): SubstanceGraphInstance[];
	static GetSubstanceLoadingProgress(): number;
	static GetGraphName(GraphInstance: SubstanceGraphInstance): string;
	static GetFactoryName(GraphInstance: SubstanceGraphInstance): string;
	static EnableInstanceOutputs(WorldContextObject: UObject,GraphInstance: SubstanceGraphInstance,OutputIndices: number[]): void;
	static DuplicateGraphInstance(WorldContextObject: UObject,GraphInstance: SubstanceGraphInstance): SubstanceGraphInstance;
	static DisableInstanceOutputs(WorldContextObject: UObject,GraphInstance: SubstanceGraphInstance,OutputIndices: number[]): void;
	static CreateGraphInstance(WorldContextObject: UObject,Factory: SubstanceInstanceFactory,GraphDescIndex: number,InstanceName: string): SubstanceGraphInstance;
	static CreateAggregateSubstanceFactory(OutputFactory: SubstanceInstanceFactory,OutputFactoryGraphIndex: number,InputFactory: SubstanceInstanceFactory,InputFactoryGraphIndex: number,Connections: SubstanceConnection[]): SubstanceInstanceFactory;
	static CopyInputParameters(SourceGraphInstance: SubstanceGraphInstance,DestGraphInstance: SubstanceGraphInstance): void;
	static ClearCache(): void;
	static AsyncRendering(InstancesToRender: SubstanceGraphInstance): void;
	static C(Other: UObject | any): SubstanceUtility;
}

declare class UINavBlueprintFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): UINavBlueprintFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): UINavBlueprintFunctionLibrary;
	static GetDefaultObject(): UINavBlueprintFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavBlueprintFunctionLibrary;
	static SetSoundClassVolume(TargetClass: SoundClass,NewVolume: number): void;
	static SetPostProcessSettings(Variable: string,Value: string): void;
	static ResetInputSettings(): void;
	static IsGamepadConnected(): boolean;
	static GetSoundClassVolume(TargetClass: SoundClass): number;
	static GetPostProcessSettings(Variable: string): string;
	static C(Other: UObject | any): UINavBlueprintFunctionLibrary;
}

declare class UINavButton extends Button { 
	CustomHover: UnrealEngineMulticastDelegate<(index: number) => void>;
	CustomUnhover: UnrealEngineMulticastDelegate<(index: number) => void>;
	CustomClick: UnrealEngineMulticastDelegate<(index: number) => void>;
	CustomRelease: UnrealEngineMulticastDelegate<(index: number) => void>;
	ButtonIndex: number;
	static Load(ResourceName: string): UINavButton;
	static Find(Outer: UObject, ResourceName: string): UINavButton;
	static GetDefaultObject(): UINavButton;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavButton;
	OnUnhover(): void;
	OnRelease(): void;
	OnHover(): void;
	OnClick(): void;
	static C(Other: UObject | any): UINavButton;
}

declare class UINavComponent extends UserWidget { 
	ComponentIndex: number;
	NavButton: UINavButton;
	NavText: TextBlock;
	static Load(ResourceName: string): UINavComponent;
	static Find(Outer: UObject, ResourceName: string): UINavComponent;
	static GetDefaultObject(): UINavComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavComponent;
	OverrideButtonIndex(): void;
	OnNavigatedTo(): void;
	OnNavigatedFrom(): void;
	static C(Other: UObject | any): UINavComponent;
}

declare class UINavComponentBox extends UINavComponent { 
	OptionIndex: number;
	LeftButton: Button;
	RightButton: Button;
	DefaultOptionIndex: number;
	MinRange: number;
	MaxRange: number;
	Interval: number;
	bDisableButtons: boolean;
	static Load(ResourceName: string): UINavComponentBox;
	static Find(Outer: UObject, ResourceName: string): UINavComponentBox;
	static GetDefaultObject(): UINavComponentBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavComponentBox;
	UpdateTextToIndex(NewIndex: number): void;
	OnNavigateRight(): void;
	OnNavigateLeft(): void;
	NavigateRight(): void;
	NavigateLeft(): void;
	static C(Other: UObject | any): UINavComponentBox;
}

declare class ButtonNavigation { 
	UpButton: number;
	DownButton: number;
	LeftButton: number;
	RightButton: number;
	clone() : ButtonNavigation;
	static C(Other: UObject | any): ButtonNavigation;
}

declare type ETargetColumn = 'Left' | 'Middle' | 'Right' | 'ETargetColumn_MAX';
declare var ETargetColumn : { Left:'Left',Middle:'Middle',Right:'Right',ETargetColumn_MAX:'ETargetColumn_MAX', };
declare class UINavInputComponent extends UINavComponent { 
	InputImage: UImage;
	static Load(ResourceName: string): UINavInputComponent;
	static Find(Outer: UObject, ResourceName: string): UINavInputComponent;
	static GetDefaultObject(): UINavInputComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavInputComponent;
	static C(Other: UObject | any): UINavInputComponent;
}

declare class UINavInputBox extends UserWidget { 
	InputButton_BP: UnrealEngineClass;
	InputButton1: UINavInputComponent;
	InputButton2: UINavInputComponent;
	InputButton3: UINavInputComponent;
	ActionText: TextBlock;
	HorizontalBox: HorizontalBox;
	static Load(ResourceName: string): UINavInputBox;
	static Find(Outer: UObject, ResourceName: string): UINavInputBox;
	static GetDefaultObject(): UINavInputBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavInputBox;
	static C(Other: UObject | any): UINavInputBox;
}

declare type EInputRestriction = 'None' | 'Keyboard' | 'Mouse' | 'Keyboard_Mouse' | 'Gamepad' | 'EInputRestriction_MAX';
declare var EInputRestriction : { None:'None',Keyboard:'Keyboard',Mouse:'Mouse',Keyboard_Mouse:'Keyboard_Mouse',Gamepad:'Gamepad',EInputRestriction_MAX:'EInputRestriction_MAX', };
declare class UINavInputContainer extends UserWidget { 
	TargetColumn: ETargetColumn;
	InputBox_BP: UnrealEngineClass;
	Panel: PanelWidget;
	FirstButtonIndex: number;
	LastButtonIndex: number;
	NumberOfActions: number;
	TopButtonIndex: number;
	BottomButtonIndex: number;
	InputsPerAction: number;
	bCanCancelKeybind: boolean;
	ActionNames: string[];
	InputRestrictions: EInputRestriction[];
	GamepadKeyIconData: DataTable;
	KeyboardMouseKeyIconData: DataTable;
	GamepadKeyNameData: DataTable;
	KeyboardMouseKeyNameData: DataTable;
	static Load(ResourceName: string): UINavInputContainer;
	static Find(Outer: UObject, ResourceName: string): UINavInputContainer;
	static GetDefaultObject(): UINavInputContainer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavInputContainer;
	RespectsRestriction(CompareKey: Key,index: number): boolean;
	ResetKeyMappings(): void;
	IsKeyBeingUsed(CompareKey: Key): boolean;
	GetTargetColumn(): ETargetColumn;
	static C(Other: UObject | any): UINavInputContainer;
}

declare type ESelectorPosition = 'Position_Center' | 'Position_Top' | 'Position_Bottom' | 'Position_Left' | 'Position_Right' | 'Position_Top_Right' | 'Position_Top_Left' | 'Position_Bottom_Right' | 'Position_Bottom_Left' | 'Position_MAX';
declare var ESelectorPosition : { Position_Center:'Position_Center',Position_Top:'Position_Top',Position_Bottom:'Position_Bottom',Position_Left:'Position_Left',Position_Right:'Position_Right',Position_Top_Right:'Position_Top_Right',Position_Top_Left:'Position_Top_Left',Position_Bottom_Right:'Position_Bottom_Right',Position_Bottom_Left:'Position_Bottom_Left',Position_MAX:'Position_MAX', };
declare type EInputType = 'None' | 'Keyboard' | 'Mouse' | 'Gamepad' | 'EInputType_MAX';
declare var EInputType : { None:'None',Keyboard:'Keyboard',Mouse:'Mouse',Gamepad:'Gamepad',EInputType_MAX:'EInputType_MAX', };
declare type ENavigationDirection = 'None' | 'Up' | 'Down' | 'Left' | 'Right' | 'ENavigationDirection_MAX';
declare var ENavigationDirection : { None:'None',Up:'Up',Down:'Down',Left:'Left',Right:'Right',ENavigationDirection_MAX:'ENavigationDirection_MAX', };
declare class UINavWidget extends UserWidget { 
	TheSelector: UserWidget;
	ButtonNavigations: ButtonNavigation[];
	UINavButtons: UINavButton[];
	UINavComponentsIndices: number[];
	UINavComponents: UINavComponent[];
	ComponentBoxIndices: number[];
	UINavComponentBoxes: UINavComponentBox[];
	UINavInputContainer: UINavInputContainer;
	UINavInputBoxes: UINavInputBox[];
	ScrollBoxes: ScrollBox[];
	UINavAnimations: WidgetAnimation[];
	ButtonIndex: number;
	ParentWidget: UINavWidget;
	ParentWidgetClass: UnrealEngineClass;
	CurrentPC: UINavController;
	ReturnedFromWidget: UINavWidget;
	bUseButtonStates: boolean;
	bUseSelector: boolean;
	bUseTextColor: boolean;
	FirstButtonIndex: number;
	bOverrideButtonIndices: boolean;
	bAllowRemoveIfRoot: boolean;
	AnimationPlaybackSpeed: number;
	bUseMovementCurve: boolean;
	MoveCurve: CurveFloat;
	SelectorPositioning: ESelectorPosition;
	SelectorOffset: Vector2D;
	TextDefaultColor: LinearColor;
	TextNavigatedColor: LinearColor;
	static Load(ResourceName: string): UINavWidget;
	static Find(Outer: UObject, ResourceName: string): UINavWidget;
	static GetDefaultObject(): UINavWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavWidget;
	UnhoverEvent(index: number): void;
	SetSelectorVisibility(bVisible: boolean): void;
	SetSelectorScale(NewScale: Vector2D): void;
	SetSelector(NewSelector: UserWidget): void;
	ReturnToParent(): void;
	ReleaseEvent(index: number): void;
	ReadyForSetup(): void;
	OnSetupCompleted(): void;
	OnSelect(index: number): void;
	OnReturn(): void;
	OnNavigate(From: number,To: number): void;
	OnInputChanged(From: EInputType,To: EInputType): void;
	NavigateTo(index: number,bHoverEvent: boolean): void;
	NavigateInDirection(Direction: ENavigationDirection): void;
	MenuSelect(): void;
	MenuReturn(): void;
	HoverEvent(index: number): void;
	GoToWidget(NewWidgetClass: UnrealEngineClass,bRemoveParent: boolean): Widget;
	GetUINavComponentBoxAtIndex(index: number): UINavComponentBox;
	GetUINavComponentAtIndex(index: number): UINavComponent;
	GetUINavButtonAtIndex(index: number): UINavButton;
	FindNextIndex(Direction: ENavigationDirection): number;
	ClickEvent(index: number): void;
	AppendVerticalNavigation(Dimension: number,EdgeNavigation: ButtonNavigation,bWrap: boolean): void;
	AppendHorizontalNavigation(Dimension: number,EdgeNavigation: ButtonNavigation,bWrap: boolean): void;
	AppendGridNavigation(DimensionX: number,DimensionY: number,EdgeNavigation: ButtonNavigation,bWrap: boolean): void;
	static C(Other: UObject | any): UINavWidget;
}

declare class UINavController extends PlayerController { 
	ActiveWidget: UINavWidget;
	CurrentInputType: EInputType;
	bChainNavigation: boolean;
	bReceiveInputActionEvents: boolean;
	bReceiveInputChangeEvents: boolean;
	InputHeldWaitTime: number;
	NavigationChainFrequency: number;
	bAllowNavigation: boolean;
	static GetDefaultObject(): UINavController;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavController;
	SetActiveWidget(NewWidget: UINavWidget): void;
	OnSelect(): void;
	OnRootWidgetRemoved(): void;
	OnReturn(): void;
	OnNavigated(Direction: ENavigationDirection): void;
	OnInputChanged(From: EInputType,To: EInputType): void;
	static C(Other: UObject | any): UINavController;
}

declare class UINavOptionBox extends UINavComponentBox { 
	bUseNumberRange: boolean;
	StringOptions: string[];
	static Load(ResourceName: string): UINavOptionBox;
	static Find(Outer: UObject, ResourceName: string): UINavOptionBox;
	static GetDefaultObject(): UINavOptionBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavOptionBox;
	static C(Other: UObject | any): UINavOptionBox;
}

declare class UINavSettings extends UObject { 
	ActionMappings: InputActionKeyMapping[];
	static Load(ResourceName: string): UINavSettings;
	static Find(Outer: UObject, ResourceName: string): UINavSettings;
	static GetDefaultObject(): UINavSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavSettings;
	static C(Other: UObject | any): UINavSettings;
}

declare class UINavSliderBox extends UINavComponentBox { 
	SliderBar: ProgressBar;
	static Load(ResourceName: string): UINavSliderBox;
	static Find(Outer: UObject, ResourceName: string): UINavSliderBox;
	static GetDefaultObject(): UINavSliderBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UINavSliderBox;
	GetSliderPercent(): number;
	static C(Other: UObject | any): UINavSliderBox;
}

declare class DirectoryWatcher extends UObject { 
	Added: string[];
	Modified: string[];
	Removed: string[];
	OnChanged: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): DirectoryWatcher;
	static Find(Outer: UObject, ResourceName: string): DirectoryWatcher;
	static GetDefaultObject(): DirectoryWatcher;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): DirectoryWatcher;
	Watch(Directory: string): void;
	Unwatch(): void;
	Contains(File: string): boolean;
	static C(Other: UObject | any): DirectoryWatcher;
}

declare class JavascriptContext extends UObject { 
	Paths: string[];
	static Load(ResourceName: string): JavascriptContext;
	static Find(Outer: UObject, ResourceName: string): JavascriptContext;
	static GetDefaultObject(): JavascriptContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptContext;
	WriteDTS(Target: string,bIncludingTooltip: boolean): boolean;
	WriteAliases(Target: string): boolean;
	SetContextId(Name: string): void;
	SetAsDebugContext(InPort: number): void;
	RunScript(Script: string,bOutput: boolean): string;
	RunFile(Filename: string): void;
	ResetAsDebugContext(): void;
	RequestV8GarbageCollection(): void;
	ReadScriptFile(Filename: string): string;
	IsDebugContext(): boolean;
	GetScriptFileFullPath(Filename: string): string;
	FindPathFile(TargetRootPath: string,TargetFileName: string,OutFiles?: string[]): {OutFiles: string[]};
	Expose(Name: string,UObject: UObject): void;
	DestroyInspector(): void;
	CreateInspector(Port: number): void;
	static C(Other: UObject | any): JavascriptContext;
}

declare class JavascriptHeapStatistics { 
	TotalHeapSize: number;
	TotalHeapSizeExecutable: number;
	TotalPhysicalSize: number;
	TotalAvailableSize: number;
	UsedHeapSize: number;
	HeapSizeLimit: number;
	MallocedMemory: number;
	bDoesZapGarbage: boolean;
	clone() : JavascriptHeapStatistics;
	static C(Other: UObject | any): JavascriptHeapStatistics;
}

declare class JavascriptIsolate extends UObject { 
	static Load(ResourceName: string): JavascriptIsolate;
	static Find(Outer: UObject, ResourceName: string): JavascriptIsolate;
	static GetDefaultObject(): JavascriptIsolate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptIsolate;
	Init(bIsEditor: boolean): void;
	GetHeapStatistics(Statistics?: JavascriptHeapStatistics): {Statistics: JavascriptHeapStatistics};
	CreateContext(): JavascriptContext;
	static C(Other: UObject | any): JavascriptIsolate;
}

declare class JavascriptAsset { 
	Name: string;
	Asset: SoftObjectPath;
	clone() : JavascriptAsset;
	static C(Other: UObject | any): JavascriptAsset;
}

declare class JavascriptClassAsset { 
	Name: string;
	Class: UnrealEngineClass;
	clone() : JavascriptClassAsset;
	static C(Other: UObject | any): JavascriptClassAsset;
}

declare class JavascriptComponent extends ActorComponent { 
	ScriptSourceFile: string;
	bActiveWithinEditor: boolean;
	JavascriptContext: JavascriptContext;
	JavascriptIsolate: JavascriptIsolate;
	OnTick: UnrealEngineDelegate<(DeltaSeconds: number) => void>;
	OnBeginPlay: UnrealEngineDelegate<() => void>;
	OnEndPlay: UnrealEngineDelegate<() => void>;
	OnInvoke: UnrealEngineDelegate<(Name: string) => void>;
	Assets: JavascriptAsset[];
	ClassAssets: JavascriptClassAsset[];
	static Load(ResourceName: string): JavascriptComponent;
	static Find(Outer: UObject, ResourceName: string): JavascriptComponent;
	static GetDefaultObject(): JavascriptComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptComponent;
	ResolveClass(Name: string): UnrealEngineClass;
	ResolveAsset(Name: string,bTryLoad: boolean): UObject;
	Invoke(Name: string): void;
	ForceGC(): void;
	Expose(ExposedAs: string,UObject: UObject): void;
	static C(Other: UObject | any): JavascriptComponent;
}

declare class JavascriptDelegate extends UObject { 
	static Load(ResourceName: string): JavascriptDelegate;
	static Find(Outer: UObject, ResourceName: string): JavascriptDelegate;
	static GetDefaultObject(): JavascriptDelegate;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptDelegate;
	Fire(): void;
	static C(Other: UObject | any): JavascriptDelegate;
}

declare class JavascriptGeneratedClass extends BlueprintGeneratedClass { 
	static Load(ResourceName: string): JavascriptGeneratedClass;
	static Find(Outer: UObject, ResourceName: string): JavascriptGeneratedClass;
	static GetDefaultObject(): JavascriptGeneratedClass;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGeneratedClass;
	static C(Other: UObject | any): JavascriptGeneratedClass;
}

declare class JavascriptGeneratedClass_Native extends BlueprintGeneratedClass { 
	static Load(ResourceName: string): JavascriptGeneratedClass_Native;
	static Find(Outer: UObject, ResourceName: string): JavascriptGeneratedClass_Native;
	static GetDefaultObject(): JavascriptGeneratedClass_Native;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGeneratedClass_Native;
	static C(Other: UObject | any): JavascriptGeneratedClass_Native;
}

declare class JavascriptGeneratedFunction extends UFunction { 
	static Load(ResourceName: string): JavascriptGeneratedFunction;
	static Find(Outer: UObject, ResourceName: string): JavascriptGeneratedFunction;
	static GetDefaultObject(): JavascriptGeneratedFunction;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGeneratedFunction;
	static C(Other: UObject | any): JavascriptGeneratedFunction;
}

declare class JavascriptGlobalDelegates extends UObject { 
	static Load(ResourceName: string): JavascriptGlobalDelegates;
	static Find(Outer: UObject, ResourceName: string): JavascriptGlobalDelegates;
	static GetDefaultObject(): JavascriptGlobalDelegates;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGlobalDelegates;
	UnbindAll(): void;
	Unbind(Key: string): void;
	RedirectorFollowed(PackageName: string,Redirector: UObject): void;
	PreLoadMap(MapName: string): void;
	PreGarbageCollectDelegate(): void;
	PostLoadMapWithWorld(World: World): void;
	PostGarbageCollect(): void;
	PostDemoPlay(): void;
	PostApplyLevelOffset(Level: Level,World: World,Offset: Vector,Flag: boolean): void;
	PackageCreatedForLoad(InPackage: Package): void;
	OnWorldCleanup(World: World,bSessionEnded: boolean,bCleanupResources: boolean): void;
	OnPreWorldInitialization_Friendly(World: World): void;
	OnPreWorldFinishDestroy(World: World): void;
	OnPreObjectPropertyChanged_Friendly(InObject: UObject,Property: Property,MemberProperty: Property): void;
	OnPostWorldInitialization_Friendly(World: World): void;
	OnPostWorldCreation(World: World): void;
	OnPostDuplicate_Friendly(World: World,bDuplicateForPIE: boolean): void;
	OnObjectSaved(UObject: UObject): void;
	OnObjectPropertyChanged_Friendly(InObject: UObject,Property: Property,MemberProperty: Property,ChangeType: number): void;
	OnObjectModified(UObject: UObject): void;
	OnAssetLoaded(UObject: UObject): void;
	LevelRemovedFromWorld(Level: Level,World: World): void;
	LevelAddedToWorld(Level: Level,World: World): void;
	Bind(Key: string): void;
	static C(Other: UObject | any): JavascriptGlobalDelegates;
}

declare class JavascriptStaticCache extends UObject { 
	Isolates: JavascriptIsolate[];
	static Load(ResourceName: string): JavascriptStaticCache;
	static Find(Outer: UObject, ResourceName: string): JavascriptStaticCache;
	static GetDefaultObject(): JavascriptStaticCache;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptStaticCache;
	static C(Other: UObject | any): JavascriptStaticCache;
}

declare class JavascriptStubStruct { 
	clone() : JavascriptStubStruct;
	static C(Other: UObject | any): JavascriptStubStruct;
}

declare class JavascriptFunction { 
	clone() : JavascriptFunction;
	static C(Other: UObject | any): JavascriptFunction;
	CallJS(CustomStruct: JavascriptStubStruct): void;
	static CallJS(UFunction: JavascriptFunction,CustomStruct: JavascriptStubStruct): void;
}

declare class JavascriptStreamableManager { 
	clone() : JavascriptStreamableManager;
	static C(Other: UObject | any): JavascriptStreamableManager;
	IsAsyncLoadComplete(Target: SoftObjectPath): boolean;
	RequestAsyncLoad(TargetsToStream: SoftObjectPath[],DelegateToCall: JavascriptFunction,Priority: number): void;
	SimpleAsyncLoad(Target: SoftObjectPath,Priority: number): void;
	Unload(Target: SoftObjectPath): void;
	static IsAsyncLoadComplete(Manager: JavascriptStreamableManager,Target: SoftObjectPath): boolean;
	static RequestAsyncLoad(Manager: JavascriptStreamableManager,TargetsToStream: SoftObjectPath[],DelegateToCall: JavascriptFunction,Priority: number): void;
	static SimpleAsyncLoad(Manager: JavascriptStreamableManager,Target: SoftObjectPath,Priority: number): void;
	static Unload(Manager: JavascriptStreamableManager,Target: SoftObjectPath): void;
	static CreateStreamableManager(): JavascriptStreamableManager;
}

declare class JavascriptInternetAddr { 
	clone() : JavascriptInternetAddr;
	static C(Other: UObject | any): JavascriptInternetAddr;
	SetIp(ResolvedAddress?: string,bValid?: boolean): {Addr: JavascriptInternetAddr, bValid: boolean};
	SetPort(Port?: number): {Addr: JavascriptInternetAddr};
	static SetIp(Addr?: JavascriptInternetAddr,ResolvedAddress?: string,bValid?: boolean): {Addr: JavascriptInternetAddr, bValid: boolean};
	static SetPort(Addr?: JavascriptInternetAddr,Port?: number): {Addr: JavascriptInternetAddr};
	static CreateInternetAddr(): JavascriptInternetAddr;
}

declare class JavascriptSocket { 
	clone() : JavascriptSocket;
	static C(Other: UObject | any): JavascriptSocket;
	SendMemoryTo(ToAddr?: JavascriptInternetAddr,NumBytes?: number,BytesSent?: number): {Socket: JavascriptSocket, BytesSent: number, $: boolean};
	static SendMemoryTo(Socket?: JavascriptSocket,ToAddr?: JavascriptInternetAddr,NumBytes?: number,BytesSent?: number): {Socket: JavascriptSocket, BytesSent: number, $: boolean};
	static CreateSocket(SocketType: string,Description: string,bForceUDP: boolean): JavascriptSocket;
}

declare type EJavascriptStatDataType = 'Invalid' | 'ST_None' | 'ST_int64' | 'ST_double' | 'ST_FName' | 'ST_Ptr' | 'EJavascriptStatDataType_MAX';
declare var EJavascriptStatDataType : { Invalid:'Invalid',ST_None:'ST_None',ST_int64:'ST_int64',ST_double:'ST_double',ST_FName:'ST_FName',ST_Ptr:'ST_Ptr',EJavascriptStatDataType_MAX:'EJavascriptStatDataType_MAX', };
declare type EJavascriptStatOperation = 'Invalid' | 'SetLongName' | 'AdvanceFrameEventGameThread' | 'AdvanceFrameEventRenderThread' | 'CycleScopeStart' | 'CycleScopeEnd' | 'SpecialMessageMarker' | 'Set' | 'Clear' | 'Add' | 'Subtract' | 'ChildrenStart' | 'ChildrenEnd' | 'Leaf' | 'MaxVal' | 'Memory' | 'EJavascriptStatOperation_MAX';
declare var EJavascriptStatOperation : { Invalid:'Invalid',SetLongName:'SetLongName',AdvanceFrameEventGameThread:'AdvanceFrameEventGameThread',AdvanceFrameEventRenderThread:'AdvanceFrameEventRenderThread',CycleScopeStart:'CycleScopeStart',CycleScopeEnd:'CycleScopeEnd',SpecialMessageMarker:'SpecialMessageMarker',Set:'Set',Clear:'Clear',Add:'Add',Subtract:'Subtract',ChildrenStart:'ChildrenStart',ChildrenEnd:'ChildrenEnd',Leaf:'Leaf',MaxVal:'MaxVal',Memory:'Memory',EJavascriptStatOperation_MAX:'EJavascriptStatOperation_MAX', };
declare class JavascriptStat { 
	clone() : JavascriptStat;
	static C(Other: UObject | any): JavascriptStat;
	AddMessage(InStatOperation: EJavascriptStatOperation): void;
	AddMessage_float(InStatOperation: EJavascriptStatOperation,Value: number,bIsCycle: boolean): void;
	AddMessage_int(InStatOperation: EJavascriptStatOperation,Value: number,bIsCycle: boolean): void;
	static AddMessage(Stat: JavascriptStat,InStatOperation: EJavascriptStatOperation): void;
	static AddMessage_float(Stat: JavascriptStat,InStatOperation: EJavascriptStatOperation,Value: number,bIsCycle: boolean): void;
	static AddMessage_int(Stat: JavascriptStat,InStatOperation: EJavascriptStatOperation,Value: number,bIsCycle: boolean): void;
	static NewStat(InStatName: string,InStatDesc: string,InGroupName: string,InGroupCategory: string,InGroupDesc: string,bDefaultEnable: boolean,bShouldClearEveryFrame: boolean,InStatType: EJavascriptStatDataType,bCycleStat: boolean,bSortByName: boolean): JavascriptStat;
}

declare type ELogVerbosity_JS = 'NoLogging' | 'Fatal' | 'Error' | 'Warning' | 'Display' | 'Log' | 'Verbose' | 'VeryVerbose' | 'ELogVerbosity_MAX';
declare var ELogVerbosity_JS : { NoLogging:'NoLogging',Fatal:'Fatal',Error:'Error',Warning:'Warning',Display:'Display',Log:'Log',Verbose:'Verbose',VeryVerbose:'VeryVerbose',ELogVerbosity_MAX:'ELogVerbosity_MAX', };
declare class JavascriptLogCategory { 
	clone() : JavascriptLogCategory;
	static C(Other: UObject | any): JavascriptLogCategory;
	GetCategoryName(): string;
	IsSuppressed(Verbosity: ELogVerbosity_JS): boolean;
	Log(Verbosity: ELogVerbosity_JS,Message: string,Filename: string,LineNumber: number): void;
	static GetCategoryName(Category: JavascriptLogCategory): string;
	static IsSuppressed(Category: JavascriptLogCategory,Verbosity: ELogVerbosity_JS): boolean;
	static Log(Category: JavascriptLogCategory,Verbosity: ELogVerbosity_JS,Message: string,Filename: string,LineNumber: number): void;
	static CreateLogCategory(CategoryName: string,InDefaultVerbosity: ELogVerbosity_JS): JavascriptLogCategory;
}

declare class JavscriptProperty { 
	Type: string;
	Name: string;
	clone() : JavscriptProperty;
	static C(Other: UObject | any): JavscriptProperty;
}

declare class JavascriptProfileNode { 
	clone() : JavascriptProfileNode;
	static C(Other: UObject | any): JavascriptProfileNode;
	GetBailoutReason(): string;
	GetCallUid(): number;
	GetChild(index: number): JavascriptProfileNode;
	GetChildrenCount(): number;
	GetColumnNumber(): number;
	GetDeoptInfo_Reason(index: number): string;
	GetDeoptInfo_Stack(index: number): string;
	GetDeoptInfosCount(index: number): number;
	GetFunctionName(): string;
	GetHitCount(): number;
	GetHitLineCount(): number;
	GetLineNumber(): number;
	GetNodeId(): number;
	GetScriptId(): number;
	GetScriptResourceName(): string;
	static GetBailoutReason(UNode: JavascriptProfileNode): string;
	static GetCallUid(UNode: JavascriptProfileNode): number;
	static GetChild(UNode: JavascriptProfileNode,index: number): JavascriptProfileNode;
	static GetChildrenCount(UNode: JavascriptProfileNode): number;
	static GetColumnNumber(UNode: JavascriptProfileNode): number;
	static GetDeoptInfo_Reason(UNode: JavascriptProfileNode,index: number): string;
	static GetDeoptInfo_Stack(UNode: JavascriptProfileNode,index: number): string;
	static GetDeoptInfosCount(UNode: JavascriptProfileNode,index: number): number;
	static GetFunctionName(UNode: JavascriptProfileNode): string;
	static GetHitCount(UNode: JavascriptProfileNode): number;
	static GetHitLineCount(UNode: JavascriptProfileNode): number;
	static GetLineNumber(UNode: JavascriptProfileNode): number;
	static GetNodeId(UNode: JavascriptProfileNode): number;
	static GetScriptId(UNode: JavascriptProfileNode): number;
	static GetScriptResourceName(UNode: JavascriptProfileNode): string;
}

declare class JavascriptLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptLibrary;
	static GetDefaultObject(): JavascriptLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptLibrary;
	static WriteStringToFile(UObject: UObject,Filename: string,Data: string,EncodingOptions: EJavascriptEncodingOptions): boolean;
	static WriteFile(UObject: UObject,Filename: string): boolean;
	static V8_SetIdleTaskBudget(BudgetInSeconds: number): void;
	static V8_SetFlagsFromString(V8Flags: string): void;
	static UnregisterComponent(ActorComponent: ActorComponent): void;
	static Unload(Manager: JavascriptStreamableManager,Target: SoftObjectPath): void;
	static TryLoadByPath(Path: string): UObject;
	static SimpleAsyncLoad(Manager: JavascriptStreamableManager,Target: SoftObjectPath,Priority: number): void;
	static SetRootComponent(Actor: Actor,Component: SceneComponent): void;
	static SetPort(Addr?: JavascriptInternetAddr,Port?: number): {Addr: JavascriptInternetAddr};
	static SetObjectFlags(Obj: UObject,Flags: number): void;
	static SetMobility(SceneComponent: SceneComponent,Type: EComponentMobility): void;
	static SetMobile(SceneComponent: SceneComponent): void;
	static SetIp(Addr?: JavascriptInternetAddr,ResolvedAddress?: string,bValid?: boolean): {Addr: JavascriptInternetAddr, bValid: boolean};
	static SetClientTravel(Engine: Engine,InWorld: World,NextURL: string,InTravelType: ETravelType): void;
	static SetActorFlags(Actor: Actor,Flags: number): void;
	static SendMemoryTo(Socket?: JavascriptSocket,ToAddr?: JavascriptInternetAddr,NumBytes?: number,BytesSent?: number): {Socket: JavascriptSocket, BytesSent: number, $: boolean};
	static SegmentIntersection2D(SegmentStartA: Vector,SegmentEndA: Vector,SegmentStartB: Vector,SegmentEndB: Vector,IntersectionPoint?: Vector): {IntersectionPoint: Vector, $: boolean};
	static ResolveIp(HostName: string,OutIp?: string): {OutIp: string, $: boolean};
	static ReregisterComponent(ActorComponent: ActorComponent): void;
	static ReregisterAllComponents(Actor: Actor): void;
	static RequestAsyncLoad(Manager: JavascriptStreamableManager,TargetsToStream: SoftObjectPath[],DelegateToCall: JavascriptFunction,Priority: number): void;
	static RegisterComponent(ActorComponent: ActorComponent): void;
	static ReadStringFromFile(UObject: UObject,Filename: string): string;
	static ReadFile(UObject: UObject,Filename: string): boolean;
	static ReadDirectory(UObject: UObject,Directory: string,OutItems?: DirectoryItem[]): {OutItems: DirectoryItem[], $: boolean};
	static NewStat(InStatName: string,InStatDesc: string,InGroupName: string,InGroupCategory: string,InGroupDesc: string,bDefaultEnable: boolean,bShouldClearEveryFrame: boolean,InStatType: EJavascriptStatDataType,bCycleStat: boolean,bSortByName: boolean): JavascriptStat;
	static MarkRenderStateDirty(Component: ActorComponent): void;
	static MakeDirectory(Path: string,Tree: boolean): boolean;
	static Log(Category: JavascriptLogCategory,Verbosity: ELogVerbosity_JS,Message: string,Filename: string,LineNumber: number): void;
	static LoadPackage(InOuter: Package,PackageName: string): Package;
	static IsSuppressed(Category: JavascriptLogCategory,Verbosity: ELogVerbosity_JS): boolean;
	static IsRegistered(ActorComponent: ActorComponent): boolean;
	static IsPlayInPreview(World: World): boolean;
	static IsPlayInEditor(World: World): boolean;
	static IsPendingKill(InActor: Actor): boolean;
	static IsGeneratedByBlueprint(InClass: UnrealEngineClass): boolean;
	static IsGameWorld(World: World): boolean;
	static IsAsyncLoadComplete(Manager: JavascriptStreamableManager,Target: SoftObjectPath): boolean;
	static HasUndo(Engine: Engine): boolean;
	static HasAnyPackageFlags(Package: Package,Flags: number): boolean;
	static HasAnyFlags(UObject: UObject,Flags: number): boolean;
	static HandleSeamlessTravelPlayer(GameMode: GameModeBase,C?: Controller): {C: Controller};
	static GetWorldBounds(InWorld: World): Box;
	static GetSuperClasses(InClass: UnrealEngineClass): UnrealEngineClass[];
	static GetStructProperties(StructName: string,bIncludeSuper: boolean): JavscriptProperty[];
	static GetScriptResourceName(UNode: JavascriptProfileNode): string;
	static GetScriptId(UNode: JavascriptProfileNode): number;
	static GetPlatformName(): string;
	static GetOutermost(UObject: UObject): UObject;
	static GetOuter(UObject: UObject): UObject;
	static GetObjectsWithOuter(Outer: UObject,Results?: UObject[],bIncludeNestedObjects?: boolean,ExclusionFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
	static GetObjectsOfClass(ClassToLookFor: UnrealEngineClass,Results?: UObject[],bIncludeDerivedClasses?: boolean,ExcludeFlags?: number,ExclusionInternalFlags?: number): {Results: UObject[]};
	static GetNodeId(UNode: JavascriptProfileNode): number;
	static GetName(UObject: UObject): string;
	static GetModel(World: World): Model;
	static GetMetaData(Field: Field,Key: string): string;
	static GetLineNumber(UNode: JavascriptProfileNode): number;
	static GetLevels(World: World): Level[];
	static GetLevel(Actor: Actor): Level;
	static GetLastRenderTime(Actor: Actor): number;
	static GetHitLineCount(UNode: JavascriptProfileNode): number;
	static GetHitCount(UNode: JavascriptProfileNode): number;
	static GetFunctionParmsSize(UFunction: UFunction): number;
	static GetFunctionName(UNode: JavascriptProfileNode): string;
	static GetFileSize(UObject: UObject,Filename: string): number;
	static GetFields(UObject: UObject,bIncludeSuper: boolean): Field[];
	static GetDynamicBinding(Outer: UnrealEngineClass,BindingObjectClass: UnrealEngineClass): DynamicBlueprintBinding;
	static GetDir(UObject: UObject,WhichDir: string): string;
	static GetDerivedClasses(ClassToLookFor: UnrealEngineClass,Results?: UnrealEngineClass[],bRecursive?: boolean): {Results: UnrealEngineClass[]};
	static GetDeoptInfosCount(UNode: JavascriptProfileNode,index: number): number;
	static GetDeoptInfo_Stack(UNode: JavascriptProfileNode,index: number): string;
	static GetDeoptInfo_Reason(UNode: JavascriptProfileNode,index: number): string;
	static GetCurrentProcessId(): number;
	static GetColumnNumber(UNode: JavascriptProfileNode): number;
	static GetClassPathName(Class: UnrealEngineClass): string;
	static GetChildrenCount(UNode: JavascriptProfileNode): number;
	static GetChild(UNode: JavascriptProfileNode,index: number): JavascriptProfileNode;
	static GetCategoryName(Category: JavascriptLogCategory): string;
	static GetCallUid(UNode: JavascriptProfileNode): number;
	static GetBlueprintGeneratedClassFromPath(Path: string): UnrealEngineClass;
	static GetBlueprintGeneratedClass(Blueprint: Blueprint): UnrealEngineClass;
	static GetBailoutReason(UNode: JavascriptProfileNode): string;
	static GetArchetypePathName(UObject: UObject): string;
	static GetAllActorsOfClassAndTags(WorldContextObject: UObject,ActorClass: UnrealEngineClass,Tags_Accept: string[],Tags_Deny: string[],OutActors?: Actor[]): {OutActors: Actor[]};
	static GenerateNavigation(InWorld: World,NavData: RecastNavMesh): void;
	static FindPackage(InOuter: UObject,PackageName: string): Package;
	static FindObjectWithOuter(Outer: UObject,ClassToLookFor: UnrealEngineClass,NameToLookFor: string): UObject;
	static FileExists(Filename: string): boolean;
	static Duplicate(UObject: UObject,Outer: UObject,Name: string): UObject;
	static DirectoryExists(InDirectory: string): boolean;
	static DeleteFile(Filename: string,ReadOnly: boolean): boolean;
	static DeleteDirectory(Path: string,RequireExists: boolean,Tree: boolean): boolean;
	static CreateStreamableManager(): JavascriptStreamableManager;
	static CreateSocket(SocketType: string,Description: string,bForceUDP: boolean): JavascriptSocket;
	static CreatePackage(Outer: UObject,PackageName: string): Package;
	static CreateLogCategory(CategoryName: string,InDefaultVerbosity: ELogVerbosity_JS): JavascriptLogCategory;
	static CreateInternetAddr(): JavascriptInternetAddr;
	static CreateEnum(Outer: UObject,Name: string,DisplayNames: string[]): Enum;
	static ClipboardPaste(): string;
	static ClipboardCopy(string: string): void;
	static CallJS(UFunction: JavascriptFunction,CustomStruct: JavascriptStubStruct): void;
	static AddMessage_int(Stat: JavascriptStat,InStatOperation: EJavascriptStatOperation,Value: number,bIsCycle: boolean): void;
	static AddMessage_float(Stat: JavascriptStat,InStatOperation: EJavascriptStatOperation,Value: number,bIsCycle: boolean): void;
	static AddMessage(Stat: JavascriptStat,InStatOperation: EJavascriptStatOperation): void;
	static AddDynamicBinding(Outer: UnrealEngineClass,BindingObject: DynamicBlueprintBinding): void;
	static Actor_GetWorld(Actor: Actor): World;
	static C(Other: UObject | any): JavascriptLibrary;
}

declare class JavascriptMemoryObject extends UObject { 
	static Load(ResourceName: string): JavascriptMemoryObject;
	static Find(Outer: UObject, ResourceName: string): JavascriptMemoryObject;
	static GetDefaultObject(): JavascriptMemoryObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMemoryObject;
	static C(Other: UObject | any): JavascriptMemoryObject;
}

declare class JavascriptRef { 
	clone() : JavascriptRef;
	static C(Other: UObject | any): JavascriptRef;
}

declare class JavascriptObject extends UObject { 
	Ref: JavascriptRef;
	Func: JavascriptFunction;
	static Load(ResourceName: string): JavascriptObject;
	static Find(Outer: UObject, ResourceName: string): JavascriptObject;
	static GetDefaultObject(): JavascriptObject;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptObject;
	static C(Other: UObject | any): JavascriptObject;
}

declare class JavascriptOutputDevice extends UObject { 
	static Load(ResourceName: string): JavascriptOutputDevice;
	static Find(Outer: UObject, ResourceName: string): JavascriptOutputDevice;
	static GetDefaultObject(): JavascriptOutputDevice;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptOutputDevice;
	OnMessage(Message: string,Verbosity: ELogVerbosity_JS,Category: string): void;
	static Log(Category: string,Verbosity: ELogVerbosity_JS,Filename: string,LineNumber: number,Message: string): void;
	Kill(): void;
	static C(Other: UObject | any): JavascriptOutputDevice;
}

declare class JavascriptProcess extends UObject { 
	static Load(ResourceName: string): JavascriptProcess;
	static Find(Outer: UObject, ResourceName: string): JavascriptProcess;
	static GetDefaultObject(): JavascriptProcess;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptProcess;
	WriteToPipe(Message: string,OutWritten?: string): {OutWritten: string, $: boolean};
	Wait(): void;
	Terminate(KillTree: boolean): void;
	static Sleep(Seconds: number): void;
	static SimulateKeypress(KeyEvent: number): void;
	static SetEnvironmentVar(VarName: string,VarValue: string): void;
	ReadFromPipe(): string;
	ReadArrayFromPipe(Array?: number[]): {Array: number[], $: boolean};
	static Open_PID(ProcessId: number): JavascriptProcess;
	static Open(ProcName: string): JavascriptProcess;
	static LaunchURL(URL: string,Parms: string,Error?: string): {Error: string};
	IsRunning(): boolean;
	static IsApplicationRunning_PID(ProcessId: number): boolean;
	static IsApplicationRunning(ProcName: string): boolean;
	static GetString(Key: string,bFlag: boolean): string;
	GetReturnCode(ReturnCode?: number): {ReturnCode: number, $: boolean};
	static GetEnvironmentVar(VarName: string): string;
	static GetApplicationName(ProcessId: number): string;
	static Create(URL: string,Parms: string,bLaunchDetached: boolean,bLaunchHidden: boolean,bLaunchReallyHidden: boolean,PriorityModifier: number,OptionalWorkingDirectory: string,bUsePipe: boolean): JavascriptProcess;
	Close(): void;
	static CanLaunchURL(URL: string): boolean;
	static C(Other: UObject | any): JavascriptProcess;
}

declare class JavascriptProfile extends UObject { 
	static Load(ResourceName: string): JavascriptProfile;
	static Find(Outer: UObject, ResourceName: string): JavascriptProfile;
	static GetDefaultObject(): JavascriptProfile;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptProfile;
	static Stop(Title: string): JavascriptProfile;
	static Start(Title: string,bRecordSamples: boolean): void;
	static SetSamplingInterval(us: number): void;
	static SetIdle(is_idle: boolean): void;
	GetTopDownRoot(): JavascriptProfileNode;
	GetSampleTimestamp(index: number): number;
	GetSamplesCount(): number;
	GetSample(index: number): JavascriptProfileNode;
	static C(Other: UObject | any): JavascriptProfile;
}

declare class JavascriptSemaphore extends UObject { 
	static Load(ResourceName: string): JavascriptSemaphore;
	static Find(Outer: UObject, ResourceName: string): JavascriptSemaphore;
	static GetDefaultObject(): JavascriptSemaphore;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptSemaphore;
	Unlock(): void;
	TryLock(NanosecondsToWait: number): boolean;
	Lock(): void;
	Dispose(): void;
	static Create(Name: string,bCreate: boolean,MaxLocks: number): JavascriptSemaphore;
	static C(Other: UObject | any): JavascriptSemaphore;
}

declare class JavascriptSettings extends UObject { 
	V8Flags: string;
	static Load(ResourceName: string): JavascriptSettings;
	static Find(Outer: UObject, ResourceName: string): JavascriptSettings;
	static GetDefaultObject(): JavascriptSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptSettings;
	static C(Other: UObject | any): JavascriptSettings;
}

declare class JavascriptSharedMemoryRegion extends JavascriptMemoryObject { 
	static Load(ResourceName: string): JavascriptSharedMemoryRegion;
	static Find(Outer: UObject, ResourceName: string): JavascriptSharedMemoryRegion;
	static GetDefaultObject(): JavascriptSharedMemoryRegion;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptSharedMemoryRegion;
	Dispose(): void;
	static Create(Name: string,bCreate: boolean,bRead: boolean,bWrite: boolean,Size: number): JavascriptSharedMemoryRegion;
	static C(Other: UObject | any): JavascriptSharedMemoryRegion;
}

declare class JavascriptAutomatedTestInstance { 
	clone() : JavascriptAutomatedTestInstance;
	static C(Other: UObject | any): JavascriptAutomatedTestInstance;
	AddAnalyticsItem(InAnalyticsItem: string): void;
	AddError(InError: string): void;
	AddLogItem(InLogItem: string): void;
	AddWarning(InWarning: string): void;
	ClearExecutionInfo(): void;
	Destroy(): {Test: JavascriptAutomatedTestInstance};
	SetContinue(bInContinue: boolean): void;
	static AddAnalyticsItem(Test: JavascriptAutomatedTestInstance,InAnalyticsItem: string): void;
	static AddError(Test: JavascriptAutomatedTestInstance,InError: string): void;
	static AddLogItem(Test: JavascriptAutomatedTestInstance,InLogItem: string): void;
	static AddWarning(Test: JavascriptAutomatedTestInstance,InWarning: string): void;
	static ClearExecutionInfo(Test: JavascriptAutomatedTestInstance): void;
	static Destroy(Test?: JavascriptAutomatedTestInstance): {Test: JavascriptAutomatedTestInstance};
	static SetContinue(Test: JavascriptAutomatedTestInstance,bInContinue: boolean): void;
}

declare class JavascriptAutomatedTest { 
	Name: string;
	bComplexTask: boolean;
	TestFlags: number;
	RequiredDeviceNum: number;
	TestFunctionNames: string[];
	UFunction: JavascriptFunction;
	clone() : JavascriptAutomatedTest;
	static C(Other: UObject | any): JavascriptAutomatedTest;
	Create(): JavascriptAutomatedTestInstance;
	static Create(Test: JavascriptAutomatedTest): JavascriptAutomatedTestInstance;
}

declare class JavascriptTestLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptTestLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptTestLibrary;
	static GetDefaultObject(): JavascriptTestLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTestLibrary;
	static SetContinue(Test: JavascriptAutomatedTestInstance,bInContinue: boolean): void;
	static PushFrameCounter(): void;
	static PopFrameCounter(): void;
	static NewWorld(): World;
	static InitializeActorsForPlay(World: World,URL: URL): void;
	static DestroyWorld(World: World): void;
	static DestroyUObject(UObject: UObject): void;
	static Destroy(Test?: JavascriptAutomatedTestInstance): {Test: JavascriptAutomatedTestInstance};
	static Create(Test: JavascriptAutomatedTest): JavascriptAutomatedTestInstance;
	static ClearExecutionInfo(Test: JavascriptAutomatedTestInstance): void;
	static BeginPlay(World: World): void;
	static AddWarning(Test: JavascriptAutomatedTestInstance,InWarning: string): void;
	static AddLogItem(Test: JavascriptAutomatedTestInstance,InLogItem: string): void;
	static AddError(Test: JavascriptAutomatedTestInstance,InError: string): void;
	static AddAnalyticsItem(Test: JavascriptAutomatedTestInstance,InAnalyticsItem: string): void;
	static C(Other: UObject | any): JavascriptTestLibrary;
}

declare class JavascriptComboButton extends ContentWidget { 
	ComboButtonStyle: ComboButtonStyle;
	ButtonStyle: ButtonStyle;
	OnGetMenuContent: UnrealEngineDelegate<() => JavascriptSlateWidget>;
	OnMenuOpenChanged: UnrealEngineDelegate<(Value: boolean) => void>;
	OnComboBoxOpened: UnrealEngineDelegate<() => void>;
	bIsFocusable: boolean;
	bHasDownArrow: boolean;
	ForegroundColor: SlateColor;
	ButtonColorAndOpacity: SlateColor;
	ContentPadding: Margin;
	MenuPlacement: EMenuPlacement;
	HAlign: EHorizontalAlignment;
	VAlign: EVerticalAlignment;
	static Load(ResourceName: string): JavascriptComboButton;
	static Find(Outer: UObject, ResourceName: string): JavascriptComboButton;
	static GetDefaultObject(): JavascriptComboButton;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptComboButton;
	SetIsOpen(InIsOpen: boolean,bFocusMenu: boolean): void;
	static C(Other: UObject | any): JavascriptComboButton;
}

declare class JavascriptSlateIcon { 
	StyleSetName: string;
	StyleName: string;
	SmallStyleName: string;
	clone() : JavascriptSlateIcon;
	static C(Other: UObject | any): JavascriptSlateIcon;
}

declare class JavascriptComboButtonContext extends UObject { 
	OnGetLabel: UnrealEngineDelegate<() => string>;
	OnGetTooltip: UnrealEngineDelegate<() => string>;
	OnGetIcon: UnrealEngineDelegate<() => JavascriptSlateIcon>;
	OnGetWidget: UnrealEngineDelegate<() => JavascriptSlateWidget>;
	OnCanExecute: UnrealEngineDelegate<() => boolean>;
	static Load(ResourceName: string): JavascriptComboButtonContext;
	static Find(Outer: UObject, ResourceName: string): JavascriptComboButtonContext;
	static GetDefaultObject(): JavascriptComboButtonContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptComboButtonContext;
	static C(Other: UObject | any): JavascriptComboButtonContext;
}

declare class JavascriptGameViewport extends ContentWidget { 
	BackgroundColor: LinearColor;
	static Load(ResourceName: string): JavascriptGameViewport;
	static Find(Outer: UObject, ResourceName: string): JavascriptGameViewport;
	static GetDefaultObject(): JavascriptGameViewport;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptGameViewport;
	Spawn(ActorClass: UnrealEngineClass): Actor;
	SetViewRotation(Rotation: Rotator): void;
	SetViewLocation(Location: Vector): void;
	GetViewRotation(): Rotator;
	GetViewportWorld(): World;
	GetViewLocation(): Vector;
	static C(Other: UObject | any): JavascriptGameViewport;
}

declare class TableColumnHeaderStyle extends SlateWidgetStyle { 
	SortPrimaryAscendingImage: SlateBrush;
	SortPrimaryDescendingImage: SlateBrush;
	SortSecondaryAscendingImage: SlateBrush;
	SortSecondaryDescendingImage: SlateBrush;
	NormalBrush: SlateBrush;
	HoveredBrush: SlateBrush;
	MenuDropdownImage: SlateBrush;
	MenuDropdownNormalBorderBrush: SlateBrush;
	MenuDropdownHoveredBorderBrush: SlateBrush;
	clone() : TableColumnHeaderStyle;
	static C(Other: UObject | any): TableColumnHeaderStyle;
}

declare class SplitterStyle extends SlateWidgetStyle { 
	HandleNormalBrush: SlateBrush;
	HandleHighlightBrush: SlateBrush;
	clone() : SplitterStyle;
	static C(Other: UObject | any): SplitterStyle;
}

declare class HeaderRowStyle extends SlateWidgetStyle { 
	ColumnStyle: TableColumnHeaderStyle;
	LastColumnStyle: TableColumnHeaderStyle;
	ColumnSplitterStyle: SplitterStyle;
	BackgroundBrush: SlateBrush;
	ForegroundColor: SlateColor;
	clone() : HeaderRowStyle;
	static C(Other: UObject | any): HeaderRowStyle;
}

declare class JavascriptColumn { 
	ID: string;
	Width: number;
	Widget: Widget;
	clone() : JavascriptColumn;
	static C(Other: UObject | any): JavascriptColumn;
}

declare class JavascriptTreeView extends ListViewBase { 
	OnGenerateRowEvent: UnrealEngineDelegate<(UObject: UObject, ID: string, Instance: JavascriptTreeView) => Widget>;
	OnExpansionChanged: UnrealEngineDelegate<(Item: UObject, bExpanded: boolean, Instance: JavascriptTreeView) => void>;
	OnContextMenuOpening: UnrealEngineDelegate<(Instance: JavascriptTreeView) => Widget>;
	OnGetChildren: UnrealEngineDelegate<(Item: UObject, Instance: JavascriptTreeView) => void>;
	JavascriptContext: JavascriptContext;
	Items: UObject[];
	HeaderRowStyle: HeaderRowStyle;
	TableRowStyle: TableRowStyle;
	ScrollBarStyle: ScrollBarStyle;
	SelectionMode: ESelectionMode;
	Children: UObject[];
	Columns: JavascriptColumn[];
	ColumnWidgets: Widget[];
	static Load(ResourceName: string): JavascriptTreeView;
	static Find(Outer: UObject, ResourceName: string): JavascriptTreeView;
	static GetDefaultObject(): JavascriptTreeView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTreeView;
	SetSingleExpandedItem(InItem: UObject): void;
	SetSelection(SoleSelectedItem: UObject): void;
	SetItemExpansion(InItem: UObject,InShouldExpandItem: boolean): void;
	SetDoubleClickSelection(SelectedItem: UObject): void;
	RequestTreeRefresh(): void;
	OnSelectionChanged(UObject: UObject,Type: ESelectInfo): void;
	OnDoubleClick(UObject: UObject): void;
	IsItemExpanded(InItem: UObject): boolean;
	IsDoubleClickSelection(SelectedItem: UObject): boolean;
	GetSelectedItems(OutItems?: UObject[]): {OutItems: UObject[], $: boolean};
	GetDoubleClickedItems(OutItems?: UObject[]): {OutItems: UObject[]};
	ClearDoubleClickSelection(): void;
	static C(Other: UObject | any): JavascriptTreeView;
}

declare class JavascriptListView extends JavascriptTreeView { 
	ItemHeight: number;
	static Load(ResourceName: string): JavascriptListView;
	static Find(Outer: UObject, ResourceName: string): JavascriptListView;
	static GetDefaultObject(): JavascriptListView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptListView;
	RequestListRefresh(): void;
	OnClick(UObject: UObject): void;
	static C(Other: UObject | any): JavascriptListView;
}

declare class JavascriptMenuContext extends UObject { 
	Description: string;
	Tooltip: string;
	Icon: JavascriptSlateIcon;
	OnCanExecute: UnrealEngineDelegate<() => boolean>;
	OnExecute: UnrealEngineDelegate<() => void>;
	static Load(ResourceName: string): JavascriptMenuContext;
	static Find(Outer: UObject, ResourceName: string): JavascriptMenuContext;
	static GetDefaultObject(): JavascriptMenuContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMenuContext;
	static C(Other: UObject | any): JavascriptMenuContext;
}

declare type EJavasrciptUserInterfaceActionType = 'None' | 'Button' | 'ToggleButton' | 'RadioButton' | 'Check' | 'CollapsedButton' | 'EJavasrciptUserInterfaceActionType_MAX';
declare var EJavasrciptUserInterfaceActionType : { None:'None',Button:'Button',ToggleButton:'ToggleButton',RadioButton:'RadioButton',Check:'Check',CollapsedButton:'CollapsedButton',EJavasrciptUserInterfaceActionType_MAX:'EJavasrciptUserInterfaceActionType_MAX', };
declare class JavascriptUICommandInfo { 
	clone() : JavascriptUICommandInfo;
	static C(Other: UObject | any): JavascriptUICommandInfo;
	static GenericCommand(What: string): JavascriptUICommandInfo;
}

declare class JavascriptUICommand { 
	ID: string;
	FriendlyName: string;
	Description: string;
	DefaultChord: InputChord;
	ActionType: EJavasrciptUserInterfaceActionType;
	CommandInfo: JavascriptUICommandInfo;
	clone() : JavascriptUICommand;
	static C(Other: UObject | any): JavascriptUICommand;
}

declare class JavascriptBindingContext { 
	clone() : JavascriptBindingContext;
	static C(Other: UObject | any): JavascriptBindingContext;
	Destroy(): void;
	UI_COMMAND_Function(Command: JavascriptUICommand,InTextSubNamespace: string): JavascriptUICommandInfo;
	static Destroy(Context: JavascriptBindingContext): void;
	static UI_COMMAND_Function(This: JavascriptBindingContext,Command: JavascriptUICommand,InTextSubNamespace: string): JavascriptUICommandInfo;
	static NewBindingContext(InContextName: string,InContextDesc: string,InContextParent: string,InStyleSetName: string): JavascriptBindingContext;
}

declare type EJavascriptExtensionHook = 'Before' | 'After' | 'First' | 'EJavascriptExtensionHook_MAX';
declare var EJavascriptExtensionHook : { Before:'Before',After:'After',First:'First',EJavascriptExtensionHook_MAX:'EJavascriptExtensionHook_MAX', };
declare class JavascriptUICommandList { 
	clone() : JavascriptUICommandList;
	static C(Other: UObject | any): JavascriptUICommandList;
	CreateMenuBarBuilder(UFunction: JavascriptFunction): void;
	CreateMenuBuilder(bInShouldCloseWindowAfterMenuSelection: boolean,UFunction: JavascriptFunction): void;
	CreateToolbarBuilder(Orientation: EOrientation,UFunction: JavascriptFunction): void;
	ProcessCommandBindings_KeyEvent(InKeyEvent: KeyEvent): boolean;
	ProcessCommandBindings_PointerEvent(InMouseEvent: UPointerEvent): boolean;
	static CreateMenuBarBuilder(CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): void;
	static CreateMenuBuilder(CommandList: JavascriptUICommandList,bInShouldCloseWindowAfterMenuSelection: boolean,UFunction: JavascriptFunction): void;
	static CreateToolbarBuilder(CommandList: JavascriptUICommandList,Orientation: EOrientation,UFunction: JavascriptFunction): void;
	static ProcessCommandBindings_KeyEvent(CommandList: JavascriptUICommandList,InKeyEvent: KeyEvent): boolean;
	static ProcessCommandBindings_PointerEvent(CommandList: JavascriptUICommandList,InMouseEvent: UPointerEvent): boolean;
	static GetLevelEditorActions(): JavascriptUICommandList;
	static CreateUICommandList(): JavascriptUICommandList;
}

declare class JavascriptExtensionBase { 
	clone() : JavascriptExtensionBase;
	static C(Other: UObject | any): JavascriptExtensionBase;
}

declare class JavascriptToolbarButtonContext extends UObject { 
	OnGetLabel: UnrealEngineDelegate<() => string>;
	OnGetTooltip: UnrealEngineDelegate<() => string>;
	OnGetIcon: UnrealEngineDelegate<() => JavascriptSlateIcon>;
	OnExecuteAction: UnrealEngineDelegate<(EditingObject: UObject) => void>;
	OnCanExecuteAction: UnrealEngineDelegate<(EditingObject: UObject) => boolean>;
	OnIsActionChecked: UnrealEngineDelegate<(EditingObject: UObject) => boolean>;
	OnIsActionButtonVisible: UnrealEngineDelegate<(EditingObject: UObject) => boolean>;
	static Load(ResourceName: string): JavascriptToolbarButtonContext;
	static Find(Outer: UObject, ResourceName: string): JavascriptToolbarButtonContext;
	static GetDefaultObject(): JavascriptToolbarButtonContext;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptToolbarButtonContext;
	UnmarkReferencedObject(): void;
	MarkReferencedObject(): void;
	static C(Other: UObject | any): JavascriptToolbarButtonContext;
}

declare class JavascriptMenuBuilder { 
	clone() : JavascriptMenuBuilder;
	static C(Other: UObject | any): JavascriptMenuBuilder;
	AddComboButton(UObject?: JavascriptComboButtonContext): {Builder: JavascriptMenuBuilder};
	AddMenuEntry(UObject?: JavascriptMenuContext): {Builder: JavascriptMenuBuilder};
	AddPullDownMenu(InMenuLabel?: string,InToolTip?: string,InPullDownMenu?: JavascriptFunction,InExtensionHook?: string,InTutorialHighlightName?: string): {MenuBuilder: JavascriptMenuBuilder};
	AddSeparator(): {Builder: JavascriptMenuBuilder};
	AddToolBarButton(CommandInfo?: JavascriptUICommandInfo): {Builder: JavascriptMenuBuilder};
	AddToolBarButtonByContext(Context?: JavascriptToolbarButtonContext,EditingObject?: UObject): {Builder: JavascriptMenuBuilder};
	AddWidget(Widget?: Widget,Label?: string,bNoIndent?: boolean,InTutorialHighlightName?: string,bSearchable?: boolean): {Builder: JavascriptMenuBuilder};
	BeginSection(InExtensionHook?: string): {Builder: JavascriptMenuBuilder};
	EndSection(): {Builder: JavascriptMenuBuilder};
	PopCommandList(): {Builder: JavascriptMenuBuilder};
	PushCommandList(List?: JavascriptUICommandList): {Builder: JavascriptMenuBuilder};
	static AddComboButton(Builder?: JavascriptMenuBuilder,UObject?: JavascriptComboButtonContext): {Builder: JavascriptMenuBuilder};
	static AddMenuEntry(Builder?: JavascriptMenuBuilder,UObject?: JavascriptMenuContext): {Builder: JavascriptMenuBuilder};
	static AddPullDownMenu(MenuBuilder?: JavascriptMenuBuilder,InMenuLabel?: string,InToolTip?: string,InPullDownMenu?: JavascriptFunction,InExtensionHook?: string,InTutorialHighlightName?: string): {MenuBuilder: JavascriptMenuBuilder};
	static AddSeparator(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static AddToolBarButton(Builder?: JavascriptMenuBuilder,CommandInfo?: JavascriptUICommandInfo): {Builder: JavascriptMenuBuilder};
	static AddToolBarButtonByContext(Builder?: JavascriptMenuBuilder,Context?: JavascriptToolbarButtonContext,EditingObject?: UObject): {Builder: JavascriptMenuBuilder};
	static AddWidget(Builder?: JavascriptMenuBuilder,Widget?: Widget,Label?: string,bNoIndent?: boolean,InTutorialHighlightName?: string,bSearchable?: boolean): {Builder: JavascriptMenuBuilder};
	static BeginSection(Builder?: JavascriptMenuBuilder,InExtensionHook?: string): {Builder: JavascriptMenuBuilder};
	static EndSection(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static PopCommandList(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static PushCommandList(Builder?: JavascriptMenuBuilder,List?: JavascriptUICommandList): {Builder: JavascriptMenuBuilder};
}

declare class JavascriptExtender { 
	clone() : JavascriptExtender;
	static C(Other: UObject | any): JavascriptExtender;
	AddMenubarExtension(ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	AddMenuExtension(ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	AddToolBarExtension(ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	Apply(ExtensionHook: string,HookPosition: EJavascriptExtensionHook,MenuBuilder?: JavascriptMenuBuilder): {MenuBuilder: JavascriptMenuBuilder};
	RemoveExtension(Extension: JavascriptExtensionBase): void;
	static AddMenubarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddMenuExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddToolBarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static Apply(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,MenuBuilder?: JavascriptMenuBuilder): {MenuBuilder: JavascriptMenuBuilder};
	static RemoveExtension(Extender: JavascriptExtender,Extension: JavascriptExtensionBase): void;
	static Combine(Extenders: JavascriptExtender[]): JavascriptExtender;
}

declare class JavascriptMenuLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptMenuLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptMenuLibrary;
	static GetDefaultObject(): JavascriptMenuLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMenuLibrary;
	static UI_COMMAND_Function(This: JavascriptBindingContext,Command: JavascriptUICommand,InTextSubNamespace: string): JavascriptUICommandInfo;
	static RemoveExtension(Extender: JavascriptExtender,Extension: JavascriptExtensionBase): void;
	static PushCommandList(Builder?: JavascriptMenuBuilder,List?: JavascriptUICommandList): {Builder: JavascriptMenuBuilder};
	static ProcessCommandBindings_PointerEvent(CommandList: JavascriptUICommandList,InMouseEvent: UPointerEvent): boolean;
	static ProcessCommandBindings_KeyEvent(CommandList: JavascriptUICommandList,InKeyEvent: KeyEvent): boolean;
	static PopCommandList(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static NewBindingContext(InContextName: string,InContextDesc: string,InContextParent: string,InStyleSetName: string): JavascriptBindingContext;
	static GenericCommand(What: string): JavascriptUICommandInfo;
	static EndSection(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static Destroy(Context: JavascriptBindingContext): void;
	static CreateUICommandList(): JavascriptUICommandList;
	static CreateToolbarBuilder(CommandList: JavascriptUICommandList,Orientation: EOrientation,UFunction: JavascriptFunction): void;
	static CreateMenuBuilder(CommandList: JavascriptUICommandList,bInShouldCloseWindowAfterMenuSelection: boolean,UFunction: JavascriptFunction): void;
	static CreateMenuBarBuilder(CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): void;
	static Combine(Extenders: JavascriptExtender[]): JavascriptExtender;
	static BeginSection(Builder?: JavascriptMenuBuilder,InExtensionHook?: string): {Builder: JavascriptMenuBuilder};
	static Apply(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,MenuBuilder?: JavascriptMenuBuilder): {MenuBuilder: JavascriptMenuBuilder};
	static AddWidget(Builder?: JavascriptMenuBuilder,Widget?: Widget,Label?: string,bNoIndent?: boolean,InTutorialHighlightName?: string,bSearchable?: boolean): {Builder: JavascriptMenuBuilder};
	static AddToolBarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddToolBarButtonByContext(Builder?: JavascriptMenuBuilder,Context?: JavascriptToolbarButtonContext,EditingObject?: UObject): {Builder: JavascriptMenuBuilder};
	static AddToolBarButton(Builder?: JavascriptMenuBuilder,CommandInfo?: JavascriptUICommandInfo): {Builder: JavascriptMenuBuilder};
	static AddSeparator(Builder?: JavascriptMenuBuilder): {Builder: JavascriptMenuBuilder};
	static AddPullDownMenu(MenuBuilder?: JavascriptMenuBuilder,InMenuLabel?: string,InToolTip?: string,InPullDownMenu?: JavascriptFunction,InExtensionHook?: string,InTutorialHighlightName?: string): {MenuBuilder: JavascriptMenuBuilder};
	static AddMenuExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddMenuEntry(Builder?: JavascriptMenuBuilder,UObject?: JavascriptMenuContext): {Builder: JavascriptMenuBuilder};
	static AddMenubarExtension(Extender: JavascriptExtender,ExtensionHook: string,HookPosition: EJavascriptExtensionHook,CommandList: JavascriptUICommandList,UFunction: JavascriptFunction): JavascriptExtensionBase;
	static AddComboButton(Builder?: JavascriptMenuBuilder,UObject?: JavascriptComboButtonContext): {Builder: JavascriptMenuBuilder};
	static C(Other: UObject | any): JavascriptMenuLibrary;
}

declare class JavascriptMultiBox extends Widget { 
	OnHook: UnrealEngineDelegate<(ID: string, Self: JavascriptMultiBox, CurrentBuilder: JavascriptMenuBuilder) => void>;
	static Load(ResourceName: string): JavascriptMultiBox;
	static Find(Outer: UObject, ResourceName: string): JavascriptMultiBox;
	static GetDefaultObject(): JavascriptMultiBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMultiBox;
	static Bind(Builder: JavascriptMenuBuilder): void;
	AddSubMenu(Builder?: JavascriptMenuBuilder,ID?: string,Label?: string,Tooltip?: string,bInOpenSubMenuOnClick?: boolean): {Builder: JavascriptMenuBuilder};
	AddPullDownMenu(Builder?: JavascriptMenuBuilder,ID?: string,Label?: string,Tooltip?: string): {Builder: JavascriptMenuBuilder};
	static C(Other: UObject | any): JavascriptMultiBox;
}

declare class JavascriptSlateTextRun { 
	clone() : JavascriptSlateTextRun;
	static C(Other: UObject | any): JavascriptSlateTextRun;
}

declare class JavascriptTextModel extends UObject { 
	static Load(ResourceName: string): JavascriptTextModel;
	static Find(Outer: UObject, ResourceName: string): JavascriptTextModel;
	static GetDefaultObject(): JavascriptTextModel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTextModel;
	SetString(string: string): void;
	GetString(): string;
	CreateRun(MessageTextStyle: TextBlockStyle,BeginIndex: number,EndIndex: number): JavascriptSlateTextRun;
	static C(Other: UObject | any): JavascriptTextModel;
}

declare class JavascriptTextLayout { 
	clone() : JavascriptTextLayout;
	static C(Other: UObject | any): JavascriptTextLayout;
	AddLine(Model?: JavascriptTextModel,Runs?: JavascriptSlateTextRun[]): {TextLayout: JavascriptTextLayout};
	ClearLines(): {TextLayout: JavascriptTextLayout};
	GetAsText(): string;
	GetLineLength(): number;
	static AddLine(TextLayout?: JavascriptTextLayout,Model?: JavascriptTextModel,Runs?: JavascriptSlateTextRun[]): {TextLayout: JavascriptTextLayout};
	static ClearLines(TextLayout?: JavascriptTextLayout): {TextLayout: JavascriptTextLayout};
	static GetAsText(TextLayout: JavascriptTextLayout): string;
	static GetLineLength(TargetTextLayout: JavascriptTextLayout): number;
}

declare class JavascriptMultiLineEditableTextBox extends MultiLineEditableTextBox { 
	OnVScrollBarUserScrolled: UnrealEngineMulticastDelegate<(Offset: number) => void>;
	GetTextDelegate: UnrealEngineDelegate<(TextLayout: JavascriptTextLayout) => string>;
	SetTextDelegate: UnrealEngineDelegate<(InText: string, TextLayout: JavascriptTextLayout) => void>;
	bAlwaysShowScrollbars: boolean;
	static Load(ResourceName: string): JavascriptMultiLineEditableTextBox;
	static Find(Outer: UObject, ResourceName: string): JavascriptMultiLineEditableTextBox;
	static GetDefaultObject(): JavascriptMultiLineEditableTextBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptMultiLineEditableTextBox;
	ScrollTo(Line: number,Offset: number): void;
	Refresh(): void;
	GoTo(Line: number,Offset: number): void;
	static C(Other: UObject | any): JavascriptMultiLineEditableTextBox;
}

declare class JavascriptRichTextBlockHyperlinkDecorator extends RichTextBlockDecorator { 
	HyperlinkId: string;
	OnClick: UnrealEngineMulticastDelegate<(Self: JavascriptRichTextBlockHyperlinkDecorator) => void>;
	static Load(ResourceName: string): JavascriptRichTextBlockHyperlinkDecorator;
	static Find(Outer: UObject, ResourceName: string): JavascriptRichTextBlockHyperlinkDecorator;
	static GetDefaultObject(): JavascriptRichTextBlockHyperlinkDecorator;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptRichTextBlockHyperlinkDecorator;
	GetMetadata(Key: string): string;
	static C(Other: UObject | any): JavascriptRichTextBlockHyperlinkDecorator;
}

declare class JavascriptSearchBox extends Widget { 
	OnTextChanged: UnrealEngineMulticastDelegate<(text: string) => void>;
	OnTextCommitted: UnrealEngineMulticastDelegate<(text: string, CommitMethod: ETextCommit) => void>;
	text: string;
	TextDelegate: UnrealEngineDelegate<() => string>;
	HintText: string;
	HintTextDelegate: UnrealEngineDelegate<() => string>;
	static Load(ResourceName: string): JavascriptSearchBox;
	static Find(Outer: UObject, ResourceName: string): JavascriptSearchBox;
	static GetDefaultObject(): JavascriptSearchBox;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptSearchBox;
	SetText(InText: string): void;
	SetHintText(InHintText: string): void;
	static C(Other: UObject | any): JavascriptSearchBox;
}

declare class JavascriptStyleSet { 
	StyleSetName: string;
	clone() : JavascriptStyleSet;
	static C(Other: UObject | any): JavascriptStyleSet;
	GetBrush(StyleName: string): SlateBrush;
	GetButtonStyle(StyleName: string): ButtonStyle;
	GetCheckBoxStyle(StyleName: string): CheckBoxStyle;
	GetColor(StyleName: string): LinearColor;
	GetComboBoxStyle(StyleName: string): ComboBoxStyle;
	GetComboButtonStyle(StyleName: string): ComboButtonStyle;
	GetEditableTextBoxStyle(StyleName: string): EditableTextBoxStyle;
	GetEditableTextStyle(StyleName: string): EditableTextStyle;
	GetFloat(StyleName: string): number;
	GetFontStyle(StyleName: string): SlateFontInfo;
	GetMargin(StyleName: string): Margin;
	GetProgressBarStyle(StyleName: string): ProgressBarStyle;
	GetSlateColor(StyleName: string): SlateColor;
	GetSound(StyleName: string): SlateSound;
	GetTextBlockStyle(StyleName: string): TextBlockStyle;
	GetVector(StyleName: string): Vector2D;
	static GetBrush(Handle: JavascriptStyleSet,StyleName: string): SlateBrush;
	static GetButtonStyle(Handle: JavascriptStyleSet,StyleName: string): ButtonStyle;
	static GetCheckBoxStyle(Handle: JavascriptStyleSet,StyleName: string): CheckBoxStyle;
	static GetColor(Handle: JavascriptStyleSet,StyleName: string): LinearColor;
	static GetComboBoxStyle(Handle: JavascriptStyleSet,StyleName: string): ComboBoxStyle;
	static GetComboButtonStyle(Handle: JavascriptStyleSet,StyleName: string): ComboButtonStyle;
	static GetEditableTextBoxStyle(Handle: JavascriptStyleSet,StyleName: string): EditableTextBoxStyle;
	static GetEditableTextStyle(Handle: JavascriptStyleSet,StyleName: string): EditableTextStyle;
	static GetFloat(Handle: JavascriptStyleSet,StyleName: string): number;
	static GetFontStyle(Handle: JavascriptStyleSet,StyleName: string): SlateFontInfo;
	static GetMargin(Handle: JavascriptStyleSet,StyleName: string): Margin;
	static GetProgressBarStyle(Handle: JavascriptStyleSet,StyleName: string): ProgressBarStyle;
	static GetSlateColor(Handle: JavascriptStyleSet,StyleName: string): SlateColor;
	static GetSound(Handle: JavascriptStyleSet,StyleName: string): SlateSound;
	static GetTextBlockStyle(Handle: JavascriptStyleSet,StyleName: string): TextBlockStyle;
	static GetVector(Handle: JavascriptStyleSet,StyleName: string): Vector2D;
}

declare class JavascriptStyleSetLibrary extends BlueprintFunctionLibrary { 
	SlateColor: SlateColor;
	SlateBrush: SlateBrush;
	ButtonStyle: ButtonStyle;
	TextBlockStyle: TextBlockStyle;
	EditableTextStyle: EditableTextStyle;
	EditableTextBoxStyle: EditableTextBoxStyle;
	CheckBoxStyle: CheckBoxStyle;
	ComboBoxStyle: ComboBoxStyle;
	ComboButtonStyle: ComboButtonStyle;
	ProgressBarStyle: ProgressBarStyle;
	static Load(ResourceName: string): JavascriptStyleSetLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptStyleSetLibrary;
	static GetDefaultObject(): JavascriptStyleSetLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptStyleSetLibrary;
	static GetVector(Handle: JavascriptStyleSet,StyleName: string): Vector2D;
	static GetTextBlockStyle(Handle: JavascriptStyleSet,StyleName: string): TextBlockStyle;
	static GetSound(Handle: JavascriptStyleSet,StyleName: string): SlateSound;
	static GetSlateColor(Handle: JavascriptStyleSet,StyleName: string): SlateColor;
	static GetProgressBarStyle(Handle: JavascriptStyleSet,StyleName: string): ProgressBarStyle;
	static GetMargin(Handle: JavascriptStyleSet,StyleName: string): Margin;
	static GetFontStyle(Handle: JavascriptStyleSet,StyleName: string): SlateFontInfo;
	static GetFloat(Handle: JavascriptStyleSet,StyleName: string): number;
	static GetEditableTextStyle(Handle: JavascriptStyleSet,StyleName: string): EditableTextStyle;
	static GetEditableTextBoxStyle(Handle: JavascriptStyleSet,StyleName: string): EditableTextBoxStyle;
	static GetComboButtonStyle(Handle: JavascriptStyleSet,StyleName: string): ComboButtonStyle;
	static GetComboBoxStyle(Handle: JavascriptStyleSet,StyleName: string): ComboBoxStyle;
	static GetColor(Handle: JavascriptStyleSet,StyleName: string): LinearColor;
	static GetCheckBoxStyle(Handle: JavascriptStyleSet,StyleName: string): CheckBoxStyle;
	static GetButtonStyle(Handle: JavascriptStyleSet,StyleName: string): ButtonStyle;
	static GetBrush(Handle: JavascriptStyleSet,StyleName: string): SlateBrush;
	static C(Other: UObject | any): JavascriptStyleSetLibrary;
}

declare class JavascriptTextBlock extends TextBlock { 
	HighlightText: string;
	HighlightTextDelegate: UnrealEngineDelegate<() => string>;
	static Load(ResourceName: string): JavascriptTextBlock;
	static Find(Outer: UObject, ResourceName: string): JavascriptTextBlock;
	static GetDefaultObject(): JavascriptTextBlock;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTextBlock;
	SetHighlightText(InHighlightText: string): void;
	static C(Other: UObject | any): JavascriptTextBlock;
}

declare class JavascriptTileView extends TileView { 
	JavascriptContext: JavascriptContext;
	static Load(ResourceName: string): JavascriptTileView;
	static Find(Outer: UObject, ResourceName: string): JavascriptTileView;
	static GetDefaultObject(): JavascriptTileView;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptTileView;
	OnSelectionChanged(UObject: UObject,Type: ESelectInfo): void;
	OnDoubleClick(UObject: UObject): void;
	OnClick(UObject: UObject): void;
	static C(Other: UObject | any): JavascriptTileView;
}

declare class JavascriptUICommands extends UObject { 
	OnExecuteAction: UnrealEngineDelegate<(ID: string) => void>;
	OnCanExecuteAction: UnrealEngineDelegate<(ID: string) => boolean>;
	OnIsActionChecked: UnrealEngineDelegate<(ID: string) => boolean>;
	OnIsActionButtonVisible: UnrealEngineDelegate<(ID: string) => boolean>;
	Commands: JavascriptUICommand[];
	ContextName: string;
	ContextDesc: string;
	ContextNameParent: string;
	StyleSetName: string;
	TextSubNamespace: string;
	CommandInfos: JavascriptUICommandInfo[];
	BindingContext: JavascriptBindingContext;
	static Load(ResourceName: string): JavascriptUICommands;
	static Find(Outer: UObject, ResourceName: string): JavascriptUICommands;
	static GetDefaultObject(): JavascriptUICommands;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUICommands;
	Uninitialize(): void;
	Unbind(List: JavascriptUICommandList): void;
	Refresh(): void;
	Initialize(): void;
	GetAction(ID: string): JavascriptUICommandInfo;
	Discard(): void;
	Commit(): void;
	static BroadcastCommandsChanged(InContextName: string): void;
	Bind(List: JavascriptUICommandList): void;
	static C(Other: UObject | any): JavascriptUICommands;
}

declare class JavascriptUMGBlueprintLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptUMGBlueprintLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptUMGBlueprintLibrary;
	static GetDefaultObject(): JavascriptUMGBlueprintLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUMGBlueprintLibrary;
	static SlateColor_UseSubduedForeground(): SlateColor;
	static SlateColor_UseForeground(): SlateColor;
	static GetLineLength(TargetTextLayout: JavascriptTextLayout): number;
	static GetAsText(TextLayout: JavascriptTextLayout): string;
	static DrawSpaceSpline(Context?: PaintContext,InStart?: Vector2D,InStartDir?: Vector2D,InEnd?: Vector2D,InEndDir?: Vector2D,InThickness?: number,InTint?: LinearColor): {Context: PaintContext};
	static ClearLines(TextLayout?: JavascriptTextLayout): {TextLayout: JavascriptTextLayout};
	static AddLine(TextLayout?: JavascriptTextLayout,Model?: JavascriptTextModel,Runs?: JavascriptSlateTextRun[]): {TextLayout: JavascriptTextLayout};
	static C(Other: UObject | any): JavascriptUMGBlueprintLibrary;
}

declare class JavascriptSlateStyle { 
	clone() : JavascriptSlateStyle;
	static C(Other: UObject | any): JavascriptSlateStyle;
	AddBorderBrush(PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	AddBoxBrush(PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	AddFontInfo(PropertyName: string,FontInfo: SlateFontInfo): void;
	AddImageBrush(PropertyName: string,InImageName: string,InImageSize: Vector2D,InTint: LinearColor,InTiling: ESlateBrushTileType,InImageType: ESlateBrushImageType): void;
	AddSound(PropertyName: string,Sound: SlateSound): void;
	Register(): void;
	RootToContentDir(RelativePath: string): string;
	RootToCoreContentDir(RelativePath: string): string;
	SetContentRoot(InContentRootDir: string): void;
	SetCoreContentRoot(InCoreContentRootDir: string): void;
	Unregister(): void;
	static AddBorderBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	static AddBoxBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	static AddFontInfo(StyleSet: JavascriptSlateStyle,PropertyName: string,FontInfo: SlateFontInfo): void;
	static AddImageBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InImageSize: Vector2D,InTint: LinearColor,InTiling: ESlateBrushTileType,InImageType: ESlateBrushImageType): void;
	static AddSound(StyleSet: JavascriptSlateStyle,PropertyName: string,Sound: SlateSound): void;
	static Register(StyleSet: JavascriptSlateStyle): void;
	static RootToContentDir(StyleSet: JavascriptSlateStyle,RelativePath: string): string;
	static RootToCoreContentDir(StyleSet: JavascriptSlateStyle,RelativePath: string): string;
	static SetContentRoot(StyleSet: JavascriptSlateStyle,InContentRootDir: string): void;
	static SetCoreContentRoot(StyleSet: JavascriptSlateStyle,InCoreContentRootDir: string): void;
	static Unregister(StyleSet: JavascriptSlateStyle): void;
	static CreateSlateStyle(InStyleSetName: string): JavascriptSlateStyle;
}

declare class JavascriptUMGLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): JavascriptUMGLibrary;
	static Find(Outer: UObject, ResourceName: string): JavascriptUMGLibrary;
	static GetDefaultObject(): JavascriptUMGLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUMGLibrary;
	static Unregister(StyleSet: JavascriptSlateStyle): void;
	static TakeWidget(Widget: Widget): JavascriptSlateWidget;
	static ShowWindow(NewWindow: JavascriptSlateWidget): void;
	static SetCoreContentRoot(StyleSet: JavascriptSlateStyle,InCoreContentRootDir: string): void;
	static SetContentRoot(StyleSet: JavascriptSlateStyle,InContentRootDir: string): void;
	static SetContent(TargetWidget: NativeWidgetHost,SlateWidget: JavascriptSlateWidget): Widget;
	static RootToCoreContentDir(StyleSet: JavascriptSlateStyle,RelativePath: string): string;
	static RootToContentDir(StyleSet: JavascriptSlateStyle,RelativePath: string): string;
	static Register(StyleSet: JavascriptSlateStyle): void;
	static GenerateDynamicImageResource(InDynamicBrushName: string): Vector2D;
	static CreateSlateStyle(InStyleSetName: string): JavascriptSlateStyle;
	static AddWindowAsNativeChild(NewWindow: JavascriptSlateWidget,RootWindow: JavascriptSlateWidget): void;
	static AddWindow(NewWindow: JavascriptSlateWidget,bShowImmediately: boolean): void;
	static AddSound(StyleSet: JavascriptSlateStyle,PropertyName: string,Sound: SlateSound): void;
	static AddImageBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InImageSize: Vector2D,InTint: LinearColor,InTiling: ESlateBrushTileType,InImageType: ESlateBrushImageType): void;
	static AddFontInfo(StyleSet: JavascriptSlateStyle,PropertyName: string,FontInfo: SlateFontInfo): void;
	static AddBoxBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	static AddBorderBrush(StyleSet: JavascriptSlateStyle,PropertyName: string,InImageName: string,InMargin: Margin,InColorAndOpacity: LinearColor,InImageType: ESlateBrushImageType): void;
	static C(Other: UObject | any): JavascriptUMGLibrary;
}

declare class JavascriptUserObjectListEntry extends UserWidget { 
	Item: UObject;
	static Load(ResourceName: string): JavascriptUserObjectListEntry;
	static Find(Outer: UObject, ResourceName: string): JavascriptUserObjectListEntry;
	static GetDefaultObject(): JavascriptUserObjectListEntry;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptUserObjectListEntry;
	static C(Other: UObject | any): JavascriptUserObjectListEntry;
}

declare class JavascriptWidget extends UserWidget { 
	JavascriptContext: JavascriptContext;
	OnInputActionEvent: UnrealEngineMulticastDelegate<(ActionName: string) => void>;
	OnReleaseActionEvent: UnrealEngineMulticastDelegate<(ActionName: string) => void>;
	OnInputAxisEvent: UnrealEngineMulticastDelegate<(Axis: number, AxisName: string) => void>;
	OnDestroy: UnrealEngineMulticastDelegate<(bReleaseChildren: boolean) => void>;
	ContentSlot: PanelSlot;
	static Load(ResourceName: string): JavascriptWidget;
	static Find(Outer: UObject, ResourceName: string): JavascriptWidget;
	static GetDefaultObject(): JavascriptWidget;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptWidget;
	SetRootWidget(Widget: Widget): void;
	RemoveChild(): boolean;
	OnReleaseInputActionByName(ActionName: string): void;
	OnListenForInputAxis(AxisName: string,EventType: EInputEvent,bConsume: boolean): void;
	OnListenForInputAction(ActionName: string,EventType: EInputEvent,bConsume: boolean): void;
	OnInputAxisByName(Axis: number,ActionName: string): void;
	OnInputActionByName(ActionName: string): void;
	static HasValidCachedWidget(Widget: Widget): boolean;
	static CallSynchronizeProperties(WidgetOrSlot: Visual): void;
	AddChild(Content: Widget): PanelSlot;
	static C(Other: UObject | any): JavascriptWidget;
}

declare type EJavascriptWindowType = 'Normal' | 'Menu' | 'ToolTip' | 'Notification' | 'CursorDecorator' | 'EJavascriptWindowType_MAX';
declare var EJavascriptWindowType : { Normal:'Normal',Menu:'Menu',ToolTip:'ToolTip',Notification:'Notification',CursorDecorator:'CursorDecorator',EJavascriptWindowType_MAX:'EJavascriptWindowType_MAX', };
declare class WindowStyle extends SlateWidgetStyle { 
	MinimizeButtonStyle: ButtonStyle;
	MaximizeButtonStyle: ButtonStyle;
	RestoreButtonStyle: ButtonStyle;
	CloseButtonStyle: ButtonStyle;
	TitleTextStyle: TextBlockStyle;
	ActiveTitleBrush: SlateBrush;
	InactiveTitleBrush: SlateBrush;
	FlashTitleBrush: SlateBrush;
	BackgroundColor: SlateColor;
	OutlineBrush: SlateBrush;
	OutlineColor: SlateColor;
	BorderBrush: SlateBrush;
	BackgroundBrush: SlateBrush;
	ChildBackgroundBrush: SlateBrush;
	clone() : WindowStyle;
	static C(Other: UObject | any): WindowStyle;
}

declare type EJavascriptAutoCenter = 'None' | 'PrimaryWorkArea' | 'PreferredWorkArea' | 'EJavascriptAutoCenter_MAX';
declare var EJavascriptAutoCenter : { None:'None',PrimaryWorkArea:'PrimaryWorkArea',PreferredWorkArea:'PreferredWorkArea',EJavascriptAutoCenter_MAX:'EJavascriptAutoCenter_MAX', };
declare type EJavascriptWindowTransparency = 'None' | 'PerWindow' | 'EJavascriptWindowTransparency_MAX';
declare var EJavascriptWindowTransparency : { None:'None',PerWindow:'PerWindow',EJavascriptWindowTransparency_MAX:'EJavascriptWindowTransparency_MAX', };
declare type EJavascriptSizingRule = 'FixedSize' | 'Autosized' | 'UserSized' | 'EJavascriptSizingRule_MAX';
declare var EJavascriptSizingRule : { FixedSize:'FixedSize',Autosized:'Autosized',UserSized:'UserSized',EJavascriptSizingRule_MAX:'EJavascriptSizingRule_MAX', };
declare class JavascriptWindow extends ContentWidget { 
	Type: EJavascriptWindowType;
	Style: WindowStyle;
	Title: string;
	bDragAnywhere: boolean;
	AutoCenter: EJavascriptAutoCenter;
	ScreenPosition: Vector2D;
	ClientSize: Vector2D;
	SupportsTransparency: EJavascriptWindowTransparency;
	InitialOpacity: number;
	IsInitiallyMaximized: boolean;
	SizingRule: EJavascriptSizingRule;
	IsPopupWindow: boolean;
	FocusWhenFirstShown: boolean;
	ActivateWhenFirstShown: boolean;
	UseOSWindowBorder: boolean;
	HasCloseButton: boolean;
	SupportsMaximize: boolean;
	SupportsMinimize: boolean;
	CreateTitleBar: boolean;
	SaneWindowPlacement: boolean;
	LayoutBorder: Margin;
	UserResizeBorder: Margin;
	static Load(ResourceName: string): JavascriptWindow;
	static Find(Outer: UObject, ResourceName: string): JavascriptWindow;
	static GetDefaultObject(): JavascriptWindow;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptWindow;
	ShowWindow(): void;
	SetOpacity(InOpacity: number): void;
	Resize(NewSize: Vector2D): void;
	ReshapeWindow(NewPosition: Vector2D,NewSize: Vector2D): void;
	RequestDestroyWindow(): void;
	MoveWindowTo(NewPosition: Vector2D): void;
	HideWindow(): void;
	FlashWindow(): void;
	EnableWindow(bEnable: boolean): void;
	DestroyWindowImmediately(): void;
	BringToFront(): void;
	static C(Other: UObject | any): JavascriptWindow;
	OpenFileDialog(DialogTitle: string,DefaultPath: string,DefaultFile: string,FileTypes: string,Flags: number,OutFilenames?: string[]): {OutFilenames: string[], $: boolean};
	static OpenFileDialog(WindowHandle: JavascriptWindow,DialogTitle: string,DefaultPath: string,DefaultFile: string,FileTypes: string,Flags: number,OutFilenames?: string[]): {OutFilenames: string[], $: boolean};
}

declare type EJavascriptHttpRequestStatus = 'NotStarted' | 'Processing' | 'Failed' | 'Succeeded' | 'EJavascriptHttpRequestStatus_MAX';
declare var EJavascriptHttpRequestStatus : { NotStarted:'NotStarted',Processing:'Processing',Failed:'Failed',Succeeded:'Succeeded',EJavascriptHttpRequestStatus_MAX:'EJavascriptHttpRequestStatus_MAX', };
declare class JavascriptHttpRequest extends UObject { 
	OnComplete: UnrealEngineDelegate<(successful: boolean) => void>;
	OnProgress: UnrealEngineDelegate<(sent: number, recv: number) => void>;
	static Load(ResourceName: string): JavascriptHttpRequest;
	static Find(Outer: UObject, ResourceName: string): JavascriptHttpRequest;
	static GetDefaultObject(): JavascriptHttpRequest;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptHttpRequest;
	SetVerb(Verb: string): void;
	SetURL(URL: string): void;
	SetHeader(HeaderName: string,HeaderValue: string): void;
	SetContentWithFiles(FilePaths: string[],Boundary: string,Content: string): void;
	SetContentFromMemory(): void;
	SetContentAsString(ContentString: string): void;
	ProcessRequest(): boolean;
	GetVerb(): string;
	GetStatus(): EJavascriptHttpRequestStatus;
	GetResponseCode(): number;
	GetElapsedTime(): number;
	GetContentToMemory(): void;
	GetContentLength(): number;
	GetContentAsString(): string;
	CancelRequest(): void;
	static C(Other: UObject | any): JavascriptHttpRequest;
}

declare class JavascriptWebSocket extends UObject { 
	OnReceived: UnrealEngineMulticastDelegate<() => void>;
	OnConnected: UnrealEngineMulticastDelegate<() => void>;
	OnError: UnrealEngineMulticastDelegate<() => void>;
	static Load(ResourceName: string): JavascriptWebSocket;
	static Find(Outer: UObject, ResourceName: string): JavascriptWebSocket;
	static GetDefaultObject(): JavascriptWebSocket;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptWebSocket;
	Tick(): void;
	SendMemory(NumBytes: number): void;
	RemoteEndPoint(): string;
	LocalEndPoint(): string;
	GetReceivedBytes(): number;
	Flush(): void;
	Dispose(): void;
	CopyBuffer(): void;
	static Connect(Endpoint: string): JavascriptWebSocket;
	static C(Other: UObject | any): JavascriptWebSocket;
}

declare class JavascriptWebSocketServer extends UObject { 
	OnConnected: UnrealEngineMulticastDelegate<(WebSocket: JavascriptWebSocket) => void>;
	Connections: JavascriptWebSocket[];
	static Load(ResourceName: string): JavascriptWebSocketServer;
	static Find(Outer: UObject, ResourceName: string): JavascriptWebSocketServer;
	static GetDefaultObject(): JavascriptWebSocketServer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): JavascriptWebSocketServer;
	Tick(): void;
	Info(): string;
	Dispose(): void;
	static Create(Port: number): JavascriptWebSocketServer;
	static C(Other: UObject | any): JavascriptWebSocketServer;
}

declare class VaRestLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): VaRestLibrary;
	static Find(Outer: UObject, ResourceName: string): VaRestLibrary;
	static GetDefaultObject(): VaRestLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VaRestLibrary;
	static PercentEncode(Source: string): string;
	static LoadJsonFromFile(WorldContextObject: UObject,Path: string): VaRestJsonObject;
	static Base64EncodeData(Data: number[],Dest?: string): {Dest: string, $: boolean};
	static Base64Encode(Source: string): string;
	static Base64DecodeData(Source: string,Dest?: number[]): {Dest: number[], $: boolean};
	static Base64Decode(Source: string,Dest?: string): {Dest: string, $: boolean};
	static C(Other: UObject | any): VaRestLibrary;
}

declare class VaRestSettings extends UObject { 
	bExtendedLog: boolean;
	static Load(ResourceName: string): VaRestSettings;
	static Find(Outer: UObject, ResourceName: string): VaRestSettings;
	static GetDefaultObject(): VaRestSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VaRestSettings;
	static C(Other: UObject | any): VaRestSettings;
}

declare class VtaPluginFunctionLibrary extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): VtaPluginFunctionLibrary;
	static Find(Outer: UObject, ResourceName: string): VtaPluginFunctionLibrary;
	static GetDefaultObject(): VtaPluginFunctionLibrary;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VtaPluginFunctionLibrary;
	static DrawSlateTexture9Slice(Target: HUD,Texture: VtaSlateTexture,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number,TextureU: number,TextureV: number,TextureUWidth: number,TextureVHeight: number,MarginLeft: number,MarginTop: number,MarginRight: number,MarginBottom: number,OriginalWidth: number,OriginalHeight: number,Tint: LinearColor,BlendMode: EBlendMode): void;
	static DrawSlateTexture(Target: HUD,Texture: VtaSlateTexture,ScreenX: number,ScreenY: number,ScreenW: number,ScreenH: number,TextureU: number,TextureV: number,TextureUWidth: number,TextureVHeight: number,Tint: LinearColor,BlendMode: EBlendMode,Scale: number,bScalePosition: boolean,Rotation: number,RotPivot: Vector2D,bFlipX: boolean,bFlipY: boolean): void;
	static CopyBrushWithSlateTexture(Texture: VtaSlateTexture,SourceBrush: SlateBrush): SlateBrush;
	static C(Other: UObject | any): VtaPluginFunctionLibrary;
}

declare class TcpMessagingSettings extends UObject { 
	EnableTransport: boolean;
	ListenEndpoint: string;
	ConnectToEndpoints: string[];
	ConnectionRetryDelay: number;
	static Load(ResourceName: string): TcpMessagingSettings;
	static Find(Outer: UObject, ResourceName: string): TcpMessagingSettings;
	static GetDefaultObject(): TcpMessagingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TcpMessagingSettings;
	static C(Other: UObject | any): TcpMessagingSettings;
}

declare class UdpMessagingSettings extends UObject { 
	EnableTransport: boolean;
	UnicastEndpoint: string;
	MulticastEndpoint: string;
	MulticastTimeToLive: number;
	StaticEndpoints: string[];
	EnableTunnel: boolean;
	TunnelUnicastEndpoint: string;
	TunnelMulticastEndpoint: string;
	RemoteTunnelEndpoints: string[];
	static Load(ResourceName: string): UdpMessagingSettings;
	static Find(Outer: UObject, ResourceName: string): UdpMessagingSettings;
	static GetDefaultObject(): UdpMessagingSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): UdpMessagingSettings;
	static C(Other: UObject | any): UdpMessagingSettings;
}

declare type EActorSequenceObjectReferenceType = 'ContextActor' | 'ExternalActor' | 'Component' | 'EActorSequenceObjectReferenceType_MAX';
declare var EActorSequenceObjectReferenceType : { ContextActor:'ContextActor',ExternalActor:'ExternalActor',Component:'Component',EActorSequenceObjectReferenceType_MAX:'EActorSequenceObjectReferenceType_MAX', };
declare class ActorSequenceObjectReference { 
	Type: EActorSequenceObjectReferenceType;
	ActorId: Guid;
	PathToComponent: string;
	clone() : ActorSequenceObjectReference;
	static C(Other: UObject | any): ActorSequenceObjectReference;
}

declare class ActorSequenceObjectReferences { 
	Array: ActorSequenceObjectReference[];
	clone() : ActorSequenceObjectReferences;
	static C(Other: UObject | any): ActorSequenceObjectReferences;
}

declare class ActorSequenceObjectReferenceMap { 
	BindingIds: Guid[];
	References: ActorSequenceObjectReferences[];
	clone() : ActorSequenceObjectReferenceMap;
	static C(Other: UObject | any): ActorSequenceObjectReferenceMap;
}

declare class ActorSequence extends MovieSceneSequence { 
	MovieScene: MovieScene;
	ObjectReferences: ActorSequenceObjectReferenceMap;
	bHasBeenInitialized: boolean;
	static Load(ResourceName: string): ActorSequence;
	static Find(Outer: UObject, ResourceName: string): ActorSequence;
	static GetDefaultObject(): ActorSequence;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSequence;
	static C(Other: UObject | any): ActorSequence;
}

declare class ActorSequencePlayer extends MovieSceneSequencePlayer { 
	static Load(ResourceName: string): ActorSequencePlayer;
	static Find(Outer: UObject, ResourceName: string): ActorSequencePlayer;
	static GetDefaultObject(): ActorSequencePlayer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSequencePlayer;
	static C(Other: UObject | any): ActorSequencePlayer;
}

declare class ActorSequenceComponent extends ActorComponent { 
	bAutoPlay: boolean;
	PlaybackSettings: MovieSceneSequencePlaybackSettings;
	Sequence: ActorSequence;
	SequencePlayer: ActorSequencePlayer;
	static Load(ResourceName: string): ActorSequenceComponent;
	static Find(Outer: UObject, ResourceName: string): ActorSequenceComponent;
	static GetDefaultObject(): ActorSequenceComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): ActorSequenceComponent;
	static C(Other: UObject | any): ActorSequenceComponent;
}

declare type ELocationAccuracy = 'LA_ThreeKilometers' | 'LA_OneKilometer' | 'LA_HundredMeters' | 'LA_TenMeters' | 'LA_Best' | 'LA_Navigation' | 'LA_MAX';
declare var ELocationAccuracy : { LA_ThreeKilometers:'LA_ThreeKilometers',LA_OneKilometer:'LA_OneKilometer',LA_HundredMeters:'LA_HundredMeters',LA_TenMeters:'LA_TenMeters',LA_Best:'LA_Best',LA_Navigation:'LA_Navigation',LA_MAX:'LA_MAX', };
declare class LocationServicesData { 
	Timestamp: number;
	Longitude: number;
	Latitude: number;
	HorizontalAccuracy: number;
	VerticalAccuracy: number;
	Altitude: number;
	clone() : LocationServicesData;
	static C(Other: UObject | any): LocationServicesData;
	static GetLastKnownLocation(): LocationServicesData;
}

declare class LocationServicesImpl extends UObject { 
	OnLocationChanged: UnrealEngineMulticastDelegate<(LocationData: LocationServicesData) => void>;
	static Load(ResourceName: string): LocationServicesImpl;
	static Find(Outer: UObject, ResourceName: string): LocationServicesImpl;
	static GetDefaultObject(): LocationServicesImpl;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocationServicesImpl;
	static C(Other: UObject | any): LocationServicesImpl;
}

declare class LocationServices extends BlueprintFunctionLibrary { 
	static Load(ResourceName: string): LocationServices;
	static Find(Outer: UObject, ResourceName: string): LocationServices;
	static GetDefaultObject(): LocationServices;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): LocationServices;
	static StopLocationServices(): boolean;
	static StartLocationServices(): boolean;
	static IsLocationAccuracyAvailable(Accuracy: ELocationAccuracy): boolean;
	static InitLocationServices(Accuracy: ELocationAccuracy,UpdateFrequency: number,MinDistanceFilter: number): boolean;
	static GetLocationServicesImpl(): LocationServicesImpl;
	static GetLastKnownLocation(): LocationServicesData;
	static AreLocationServicesEnabled(): boolean;
	static C(Other: UObject | any): LocationServices;
}

declare type EOculusPlatform = 'PC' | 'Mobile' | 'Length' | 'EOculusPlatform_MAX';
declare var EOculusPlatform : { PC:'PC',Mobile:'Mobile',Length:'Length',EOculusPlatform_MAX:'EOculusPlatform_MAX', };
declare class OculusEditorSettings extends UObject { 
	PerfToolIgnoreList: any;
	PerfToolTargetPlatform: EOculusPlatform;
	static Load(ResourceName: string): OculusEditorSettings;
	static Find(Outer: UObject, ResourceName: string): OculusEditorSettings;
	static GetDefaultObject(): OculusEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): OculusEditorSettings;
	static C(Other: UObject | any): OculusEditorSettings;
}

declare class TireConfigMaterialFriction { 
	PhysicalMaterial: PhysicalMaterial;
	FrictionScale: number;
	clone() : TireConfigMaterialFriction;
	static C(Other: UObject | any): TireConfigMaterialFriction;
}

declare class TireConfig extends DataAsset { 
	FrictionScale: number;
	TireFrictionScales: TireConfigMaterialFriction[];
	static Load(ResourceName: string): TireConfig;
	static Find(Outer: UObject, ResourceName: string): TireConfig;
	static GetDefaultObject(): TireConfig;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TireConfig;
	static C(Other: UObject | any): TireConfig;
}

declare type EWheelSweepType = 'SimpleAndComplex' | 'Simple' | 'Complex' | 'EWheelSweepType_MAX';
declare var EWheelSweepType : { SimpleAndComplex:'SimpleAndComplex',Simple:'Simple',Complex:'Complex',EWheelSweepType_MAX:'EWheelSweepType_MAX', };
declare class VehicleWheel extends UObject { 
	CollisionMesh: StaticMesh;
	bDontCreateShape: boolean;
	bAutoAdjustCollisionSize: boolean;
	Offset: Vector;
	ShapeRadius: number;
	ShapeWidth: number;
	Mass: number;
	DampingRate: number;
	SteerAngle: number;
	bAffectedByHandbrake: boolean;
	TireType: TireType;
	TireConfig: TireConfig;
	LatStiffMaxLoad: number;
	LatStiffValue: number;
	LongStiffValue: number;
	SuspensionForceOffset: number;
	SuspensionMaxRaise: number;
	SuspensionMaxDrop: number;
	SuspensionNaturalFrequency: number;
	SuspensionDampingRatio: number;
	SweepType: EWheelSweepType;
	MaxBrakeTorque: number;
	MaxHandBrakeTorque: number;
	VehicleSim: WheeledVehicleMovementComponent;
	WheelIndex: number;
	DebugLongSlip: number;
	DebugLatSlip: number;
	DebugNormalizedTireLoad: number;
	DebugWheelTorque: number;
	DebugLongForce: number;
	DebugLatForce: number;
	Location: Vector;
	OldLocation: Vector;
	Velocity: Vector;
	static Load(ResourceName: string): VehicleWheel;
	static Find(Outer: UObject, ResourceName: string): VehicleWheel;
	static GetDefaultObject(): VehicleWheel;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleWheel;
	IsInAir(): boolean;
	GetSuspensionOffset(): number;
	GetSteerAngle(): number;
	GetRotationAngle(): number;
	static C(Other: UObject | any): VehicleWheel;
}

declare class WheelSetup { 
	WheelClass: UnrealEngineClass;
	BoneName: string;
	AdditionalOffset: Vector;
	bDisableSteering: boolean;
	clone() : WheelSetup;
	static C(Other: UObject | any): WheelSetup;
}

declare class ReplicatedVehicleState { 
	SteeringInput: number;
	ThrottleInput: number;
	BrakeInput: number;
	HandbrakeInput: number;
	CurrentGear: number;
	clone() : ReplicatedVehicleState;
	static C(Other: UObject | any): ReplicatedVehicleState;
}

declare class VehicleInputRate { 
	RiseRate: number;
	FallRate: number;
	clone() : VehicleInputRate;
	static C(Other: UObject | any): VehicleInputRate;
}

declare class WheeledVehicleMovementComponent extends PawnMovementComponent { 
	bDeprecatedSpringOffsetMode: boolean;
	bReverseAsBrake: boolean;
	bUseRVOAvoidance: boolean;
	bRawHandbrakeInput: boolean;
	bRawGearUpInput: boolean;
	bRawGearDownInput: boolean;
	bWasAvoidanceUpdated: boolean;
	Mass: number;
	WheelSetups: WheelSetup[];
	DragCoefficient: number;
	ChassisWidth: number;
	ChassisHeight: number;
	DragArea: number;
	EstimatedMaxEngineSpeed: number;
	MaxEngineRPM: number;
	DebugDragMagnitude: number;
	InertiaTensorScale: Vector;
	MinNormalizedTireLoad: number;
	MinNormalizedTireLoadFiltered: number;
	MaxNormalizedTireLoad: number;
	MaxNormalizedTireLoadFiltered: number;
	ThresholdLongitudinalSpeed: number;
	LowForwardSpeedSubStepCount: number;
	HighForwardSpeedSubStepCount: number;
	Wheels: VehicleWheel[];
	RVOAvoidanceRadius: number;
	RVOAvoidanceHeight: number;
	AvoidanceConsiderationRadius: number;
	RVOSteeringStep: number;
	RVOThrottleStep: number;
	AvoidanceUID: number;
	AvoidanceGroup: NavAvoidanceMask;
	GroupsToAvoid: NavAvoidanceMask;
	GroupsToIgnore: NavAvoidanceMask;
	AvoidanceWeight: number;
	PendingLaunchVelocity: Vector;
	ReplicatedState: ReplicatedVehicleState;
	RawSteeringInput: number;
	RawThrottleInput: number;
	RawBrakeInput: number;
	SteeringInput: number;
	ThrottleInput: number;
	BrakeInput: number;
	HandbrakeInput: number;
	IdleBrakeInput: number;
	StopThreshold: number;
	WrongDirectionThreshold: number;
	ThrottleInputRate: VehicleInputRate;
	BrakeInputRate: VehicleInputRate;
	HandbrakeInputRate: VehicleInputRate;
	SteeringInputRate: VehicleInputRate;
	OverrideController: Controller;
	static Load(ResourceName: string): WheeledVehicleMovementComponent;
	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent;
	static GetDefaultObject(): WheeledVehicleMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent;
	SetUseAutoGears(bUseAuto: boolean): void;
	SetThrottleInput(Throttle: number): void;
	SetTargetGear(GearNum: number,bImmediate: boolean): void;
	SetSteeringInput(Steering: number): void;
	SetHandbrakeInput(bNewHandbrake: boolean): void;
	SetGroupsToIgnoreMask(GroupMask: NavAvoidanceMask): void;
	SetGroupsToIgnore(GroupFlags: number): void;
	SetGroupsToAvoidMask(GroupMask: NavAvoidanceMask): void;
	SetGroupsToAvoid(GroupFlags: number): void;
	SetGearUp(bNewGearUp: boolean): void;
	SetGearDown(bNewGearDown: boolean): void;
	SetBrakeInput(Brake: number): void;
	SetAvoidanceGroupMask(GroupMask: NavAvoidanceMask): void;
	SetAvoidanceGroup(GroupFlags: number): void;
	SetAvoidanceEnabled(bEnable: boolean): void;
	ServerUpdateState(InSteeringInput: number,InThrottleInput: number,InBrakeInput: number,InHandbrakeInput: number,CurrentGear: number): void;
	GetUseAutoGears(): boolean;
	GetTargetGear(): number;
	GetForwardSpeed(): number;
	GetEngineRotationSpeed(): number;
	GetEngineMaxRotationSpeed(): number;
	GetCurrentGear(): number;
	static C(Other: UObject | any): WheeledVehicleMovementComponent;
}

declare class SimpleWheeledVehicleMovementComponent extends WheeledVehicleMovementComponent { 
	static Load(ResourceName: string): SimpleWheeledVehicleMovementComponent;
	static Find(Outer: UObject, ResourceName: string): SimpleWheeledVehicleMovementComponent;
	static GetDefaultObject(): SimpleWheeledVehicleMovementComponent;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SimpleWheeledVehicleMovementComponent;
	SetSteerAngle(SteerAngle: number,WheelIndex: number): void;
	SetDriveTorque(DriveTorque: number,WheelIndex: number): void;
	SetBrakeTorque(BrakeTorque: number,WheelIndex: number): void;
	static C(Other: UObject | any): SimpleWheeledVehicleMovementComponent;
}

declare class WheeledVehicle extends Pawn { 
	Mesh: SkeletalMeshComponent;
	VehicleMovement: WheeledVehicleMovementComponent;
	static GetDefaultObject(): WheeledVehicle;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicle;
	static C(Other: UObject | any): WheeledVehicle;
}

declare class VehicleAnimInstance extends AnimInstance { 
	WheeledVehicleMovementComponent: WheeledVehicleMovementComponent;
	static Load(ResourceName: string): VehicleAnimInstance;
	static Find(Outer: UObject, ResourceName: string): VehicleAnimInstance;
	static GetDefaultObject(): VehicleAnimInstance;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VehicleAnimInstance;
	GetVehicle(): WheeledVehicle;
	static C(Other: UObject | any): VehicleAnimInstance;
}

declare class VehicleEngineData { 
	TorqueCurve: RuntimeFloatCurve;
	MaxRPM: number;
	MOI: number;
	DampingRateFullThrottle: number;
	DampingRateZeroThrottleClutchEngaged: number;
	DampingRateZeroThrottleClutchDisengaged: number;
	clone() : VehicleEngineData;
	static C(Other: UObject | any): VehicleEngineData;
}

declare type EVehicleDifferential4W = 'LimitedSlip_4W' | 'LimitedSlip_FrontDrive' | 'LimitedSlip_RearDrive' | 'Open_4W' | 'Open_FrontDrive' | 'Open_RearDrive' | 'EVehicleDifferential4W_MAX';
declare var EVehicleDifferential4W : { LimitedSlip_4W:'LimitedSlip_4W',LimitedSlip_FrontDrive:'LimitedSlip_FrontDrive',LimitedSlip_RearDrive:'LimitedSlip_RearDrive',Open_4W:'Open_4W',Open_FrontDrive:'Open_FrontDrive',Open_RearDrive:'Open_RearDrive',EVehicleDifferential4W_MAX:'EVehicleDifferential4W_MAX', };
declare class VehicleDifferential4WData { 
	DifferentialType: EVehicleDifferential4W;
	FrontRearSplit: number;
	FrontLeftRightSplit: number;
	RearLeftRightSplit: number;
	CentreBias: number;
	FrontBias: number;
	RearBias: number;
	clone() : VehicleDifferential4WData;
	static C(Other: UObject | any): VehicleDifferential4WData;
}

declare class VehicleGearData { 
	Ratio: number;
	DownRatio: number;
	UpRatio: number;
	clone() : VehicleGearData;
	static C(Other: UObject | any): VehicleGearData;
}

declare class VehicleTransmissionData { 
	bUseGearAutoBox: boolean;
	GearSwitchTime: number;
	GearAutoBoxLatency: number;
	FinalRatio: number;
	ForwardGears: VehicleGearData[];
	ReverseGearRatio: number;
	NeutralGearUpRatio: number;
	ClutchStrength: number;
	clone() : VehicleTransmissionData;
	static C(Other: UObject | any): VehicleTransmissionData;
}

declare class WheeledVehicleMovementComponent4W extends WheeledVehicleMovementComponent { 
	EngineSetup: VehicleEngineData;
	DifferentialSetup: VehicleDifferential4WData;
	AckermannAccuracy: number;
	TransmissionSetup: VehicleTransmissionData;
	SteeringCurve: RuntimeFloatCurve;
	static Load(ResourceName: string): WheeledVehicleMovementComponent4W;
	static Find(Outer: UObject, ResourceName: string): WheeledVehicleMovementComponent4W;
	static GetDefaultObject(): WheeledVehicleMovementComponent4W;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WheeledVehicleMovementComponent4W;
	static C(Other: UObject | any): WheeledVehicleMovementComponent4W;
}

declare class AnimNode_WheelHandler extends AnimNode_SkeletalControlBase { 
	clone() : AnimNode_WheelHandler;
	static C(Other: UObject | any): AnimNode_WheelHandler;
}

declare class AnimGraphNode_WheelHandler extends AnimGraphNode_SkeletalControlBase { 
	UNode: AnimNode_WheelHandler;
	static Load(ResourceName: string): AnimGraphNode_WheelHandler;
	static Find(Outer: UObject, ResourceName: string): AnimGraphNode_WheelHandler;
	static GetDefaultObject(): AnimGraphNode_WheelHandler;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): AnimGraphNode_WheelHandler;
	static C(Other: UObject | any): AnimGraphNode_WheelHandler;
}

declare class WebBrowserTexture extends Texture { 
	static Load(ResourceName: string): WebBrowserTexture;
	static Find(Outer: UObject, ResourceName: string): WebBrowserTexture;
	static GetDefaultObject(): WebBrowserTexture;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WebBrowserTexture;
	static C(Other: UObject | any): WebBrowserTexture;
}

declare class WebBrowser extends Widget { 
	OnUrlChanged: UnrealEngineMulticastDelegate<(text: string) => void>;
	OnBeforePopup: UnrealEngineMulticastDelegate<(URL: string, Frame: string) => void>;
	InitialURL: string;
	bSupportsTransparency: boolean;
	static Load(ResourceName: string): WebBrowser;
	static Find(Outer: UObject, ResourceName: string): WebBrowser;
	static GetDefaultObject(): WebBrowser;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WebBrowser;
	LoadURL(NewURL: string): void;
	LoadString(Contents: string,DummyURL: string): void;
	GetUrl(): string;
	GetTitleText(): string;
	ExecuteJavascript(ScriptText: string): void;
	static C(Other: UObject | any): WebBrowser;
}

declare class WebBrowserAssetManager extends UObject { 
	DefaultMaterial: Material;
	static Load(ResourceName: string): WebBrowserAssetManager;
	static Find(Outer: UObject, ResourceName: string): WebBrowserAssetManager;
	static GetDefaultObject(): WebBrowserAssetManager;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): WebBrowserAssetManager;
	static C(Other: UObject | any): WebBrowserAssetManager;
}

declare type EMeshPaintColorViewMode = 'Normal' | 'RGB' | 'Alpha' | 'Red' | 'Green' | 'Blue' | 'EMeshPaintColorViewMode_MAX';
declare var EMeshPaintColorViewMode : { Normal:'Normal',RGB:'RGB',Alpha:'Alpha',Red:'Red',Green:'Green',Blue:'Blue',EMeshPaintColorViewMode_MAX:'EMeshPaintColorViewMode_MAX', };
declare class PaintBrushSettings extends UObject { 
	BrushRadius: number;
	BrushStrength: number;
	BrushFalloffAmount: number;
	bEnableFlow: boolean;
	bOnlyFrontFacingTriangles: boolean;
	ColorViewMode: EMeshPaintColorViewMode;
	static Load(ResourceName: string): PaintBrushSettings;
	static Find(Outer: UObject, ResourceName: string): PaintBrushSettings;
	static GetDefaultObject(): PaintBrushSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaintBrushSettings;
	static C(Other: UObject | any): PaintBrushSettings;
}

declare class MeshPaintSettings extends UObject { 
	VertexPreviewSize: number;
	static Load(ResourceName: string): MeshPaintSettings;
	static Find(Outer: UObject, ResourceName: string): MeshPaintSettings;
	static GetDefaultObject(): MeshPaintSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): MeshPaintSettings;
	static C(Other: UObject | any): MeshPaintSettings;
}

declare class VertexColorImportOptions extends UObject { 
	UVIndex: number;
	LODIndex: number;
	bRed: boolean;
	bBlue: boolean;
	bGreen: boolean;
	bAlpha: boolean;
	bImportToInstance: boolean;
	bCanImportToInstance: boolean;
	static Load(ResourceName: string): VertexColorImportOptions;
	static Find(Outer: UObject, ResourceName: string): VertexColorImportOptions;
	static GetDefaultObject(): VertexColorImportOptions;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): VertexColorImportOptions;
	static C(Other: UObject | any): VertexColorImportOptions;
}

declare class FlipbookEditorSettings extends UObject { 
	BackgroundColor: Color;
	bShowGridByDefault: boolean;
	static Load(ResourceName: string): FlipbookEditorSettings;
	static Find(Outer: UObject, ResourceName: string): FlipbookEditorSettings;
	static GetDefaultObject(): FlipbookEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): FlipbookEditorSettings;
	static C(Other: UObject | any): FlipbookEditorSettings;
}

declare type ESpriteExtractMode = 'Auto' | 'Grid' | 'ESpriteExtractMode_MAX';
declare var ESpriteExtractMode : { Auto:'Auto',Grid:'Grid',ESpriteExtractMode_MAX:'ESpriteExtractMode_MAX', };
declare class PaperExtractSpritesSettings extends UObject { 
	SpriteExtractMode: ESpriteExtractMode;
	OutlineColor: LinearColor;
	ViewportTextureTint: LinearColor;
	BackgroundColor: LinearColor;
	NamingTemplate: string;
	NamingStartIndex: number;
	static Load(ResourceName: string): PaperExtractSpritesSettings;
	static Find(Outer: UObject, ResourceName: string): PaperExtractSpritesSettings;
	static GetDefaultObject(): PaperExtractSpritesSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperExtractSpritesSettings;
	static C(Other: UObject | any): PaperExtractSpritesSettings;
}

declare class PaperExtractSpriteGridSettings extends UObject { 
	CellWidth: number;
	CellHeight: number;
	NumCellsX: number;
	NumCellsY: number;
	MarginX: number;
	MarginY: number;
	SpacingX: number;
	SpacingY: number;
	static Load(ResourceName: string): PaperExtractSpriteGridSettings;
	static Find(Outer: UObject, ResourceName: string): PaperExtractSpriteGridSettings;
	static GetDefaultObject(): PaperExtractSpriteGridSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperExtractSpriteGridSettings;
	static C(Other: UObject | any): PaperExtractSpriteGridSettings;
}

declare class PaperFlipbookActorFactory extends ActorFactory { 
	static Load(ResourceName: string): PaperFlipbookActorFactory;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbookActorFactory;
	static GetDefaultObject(): PaperFlipbookActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookActorFactory;
	static C(Other: UObject | any): PaperFlipbookActorFactory;
}

declare class PaperFlipbookFactory extends Factory { 
	static Load(ResourceName: string): PaperFlipbookFactory;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbookFactory;
	static GetDefaultObject(): PaperFlipbookFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookFactory;
	static C(Other: UObject | any): PaperFlipbookFactory;
}

declare class PaperSpriteThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): PaperSpriteThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteThumbnailRenderer;
	static GetDefaultObject(): PaperSpriteThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteThumbnailRenderer;
	static C(Other: UObject | any): PaperSpriteThumbnailRenderer;
}

declare class PaperFlipbookThumbnailRenderer extends PaperSpriteThumbnailRenderer { 
	static Load(ResourceName: string): PaperFlipbookThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PaperFlipbookThumbnailRenderer;
	static GetDefaultObject(): PaperFlipbookThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperFlipbookThumbnailRenderer;
	static C(Other: UObject | any): PaperFlipbookThumbnailRenderer;
}

declare class PaperImporterSettings extends UObject { 
	bPickBestMaterialWhenCreatingSprites: boolean;
	bPickBestMaterialWhenCreatingTileMaps: boolean;
	bAnalysisCanUseOpaque: boolean;
	DefaultPixelsPerUnrealUnit: number;
	NormalMapTextureSuffixes: string[];
	BaseMapTextureSuffixes: string[];
	DefaultSpriteTextureGroup: TextureGroup;
	bOverrideTextureCompression: boolean;
	DefaultSpriteTextureCompression: TextureCompressionSettings;
	UnlitDefaultMaskedMaterialName: SoftObjectPath;
	UnlitDefaultTranslucentMaterialName: SoftObjectPath;
	UnlitDefaultOpaqueMaterialName: SoftObjectPath;
	LitDefaultMaskedMaterialName: SoftObjectPath;
	LitDefaultTranslucentMaterialName: SoftObjectPath;
	LitDefaultOpaqueMaterialName: SoftObjectPath;
	static Load(ResourceName: string): PaperImporterSettings;
	static Find(Outer: UObject, ResourceName: string): PaperImporterSettings;
	static GetDefaultObject(): PaperImporterSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperImporterSettings;
	static C(Other: UObject | any): PaperImporterSettings;
}

declare class PaperSpriteActorFactory extends ActorFactory { 
	static Load(ResourceName: string): PaperSpriteActorFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteActorFactory;
	static GetDefaultObject(): PaperSpriteActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteActorFactory;
	static C(Other: UObject | any): PaperSpriteActorFactory;
}

declare class PaperSpriteAtlasFactory extends Factory { 
	static Load(ResourceName: string): PaperSpriteAtlasFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteAtlasFactory;
	static GetDefaultObject(): PaperSpriteAtlasFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteAtlasFactory;
	static C(Other: UObject | any): PaperSpriteAtlasFactory;
}

declare class PaperSpriteFactory extends Factory { 
	static Load(ResourceName: string): PaperSpriteFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteFactory;
	static GetDefaultObject(): PaperSpriteFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteFactory;
	static C(Other: UObject | any): PaperSpriteFactory;
}

declare class PaperTileMapFactory extends Factory { 
	static Load(ResourceName: string): PaperTileMapFactory;
	static Find(Outer: UObject, ResourceName: string): PaperTileMapFactory;
	static GetDefaultObject(): PaperTileMapFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMapFactory;
	static C(Other: UObject | any): PaperTileMapFactory;
}

declare class PaperTileMapPromotionFactory extends Factory { 
	AssetToRename: PaperTileMap;
	static Load(ResourceName: string): PaperTileMapPromotionFactory;
	static Find(Outer: UObject, ResourceName: string): PaperTileMapPromotionFactory;
	static GetDefaultObject(): PaperTileMapPromotionFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileMapPromotionFactory;
	static C(Other: UObject | any): PaperTileMapPromotionFactory;
}

declare class PaperTileSetFactory extends Factory { 
	static Load(ResourceName: string): PaperTileSetFactory;
	static Find(Outer: UObject, ResourceName: string): PaperTileSetFactory;
	static GetDefaultObject(): PaperTileSetFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileSetFactory;
	static C(Other: UObject | any): PaperTileSetFactory;
}

declare class PaperTileSetThumbnailRenderer extends DefaultSizedThumbnailRenderer { 
	static Load(ResourceName: string): PaperTileSetThumbnailRenderer;
	static Find(Outer: UObject, ResourceName: string): PaperTileSetThumbnailRenderer;
	static GetDefaultObject(): PaperTileSetThumbnailRenderer;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperTileSetThumbnailRenderer;
	static C(Other: UObject | any): PaperTileSetThumbnailRenderer;
}

declare class SpriteEditorSettings extends UObject { 
	BackgroundColor: Color;
	bShowGridByDefault: boolean;
	static Load(ResourceName: string): SpriteEditorSettings;
	static Find(Outer: UObject, ResourceName: string): SpriteEditorSettings;
	static GetDefaultObject(): SpriteEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): SpriteEditorSettings;
	static C(Other: UObject | any): SpriteEditorSettings;
}

declare class TerrainSplineActorFactory extends ActorFactory { 
	static Load(ResourceName: string): TerrainSplineActorFactory;
	static Find(Outer: UObject, ResourceName: string): TerrainSplineActorFactory;
	static GetDefaultObject(): TerrainSplineActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TerrainSplineActorFactory;
	static C(Other: UObject | any): TerrainSplineActorFactory;
}

declare class TileMapActorFactory extends ActorFactory { 
	static Load(ResourceName: string): TileMapActorFactory;
	static Find(Outer: UObject, ResourceName: string): TileMapActorFactory;
	static GetDefaultObject(): TileMapActorFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileMapActorFactory;
	static C(Other: UObject | any): TileMapActorFactory;
}

declare class TileSetImportMapping { 
	SourceName: string;
	ImportedTileSet: any;
	ImportedTexture: any;
	clone() : TileSetImportMapping;
	static C(Other: UObject | any): TileSetImportMapping;
}

declare class TileMapAssetImportData extends AssetImportData { 
	TileSetMap: TileSetImportMapping[];
	static Load(ResourceName: string): TileMapAssetImportData;
	static Find(Outer: UObject, ResourceName: string): TileMapAssetImportData;
	static GetDefaultObject(): TileMapAssetImportData;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileMapAssetImportData;
	static C(Other: UObject | any): TileMapAssetImportData;
}

declare class TileMapEditorSettings extends UObject { 
	DefaultBackgroundColor: Color;
	bShowGridByDefault: boolean;
	DefaultTileGridColor: Color;
	DefaultMultiTileGridColor: Color;
	DefaultMultiTileGridWidth: number;
	DefaultMultiTileGridHeight: number;
	DefaultMultiTileGridOffsetX: number;
	DefaultMultiTileGridOffsetY: number;
	DefaultLayerGridColor: Color;
	static Load(ResourceName: string): TileMapEditorSettings;
	static Find(Outer: UObject, ResourceName: string): TileMapEditorSettings;
	static GetDefaultObject(): TileMapEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileMapEditorSettings;
	static C(Other: UObject | any): TileMapEditorSettings;
}

declare class TileSetEditorSettings extends UObject { 
	DefaultBackgroundColor: Color;
	bShowGridByDefault: boolean;
	ExtrusionAmount: number;
	bPadToPowerOf2: boolean;
	bFillWithTransparentBlack: boolean;
	static Load(ResourceName: string): TileSetEditorSettings;
	static Find(Outer: UObject, ResourceName: string): TileSetEditorSettings;
	static GetDefaultObject(): TileSetEditorSettings;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileSetEditorSettings;
	static C(Other: UObject | any): TileSetEditorSettings;
}

declare class TileSheetPaddingFactory extends Factory { 
	SourceTileSet: PaperTileSet;
	ExtrusionAmount: number;
	bPadToPowerOf2: boolean;
	bFillWithTransparentBlack: boolean;
	static Load(ResourceName: string): TileSheetPaddingFactory;
	static Find(Outer: UObject, ResourceName: string): TileSheetPaddingFactory;
	static GetDefaultObject(): TileSheetPaddingFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): TileSheetPaddingFactory;
	static C(Other: UObject | any): TileSheetPaddingFactory;
}

declare class PaperSpriteSheet extends UObject { 
	SpriteNames: string[];
	Sprites: PaperSprite[];
	TextureName: string;
	Texture: Texture2D;
	NormalMapTextureName: string;
	NormalMapTexture: Texture2D;
	AssetImportData: AssetImportData;
	static Load(ResourceName: string): PaperSpriteSheet;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteSheet;
	static GetDefaultObject(): PaperSpriteSheet;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteSheet;
	static C(Other: UObject | any): PaperSpriteSheet;
}

declare class PaperSpriteSheetImportFactory extends Factory { 
	static Load(ResourceName: string): PaperSpriteSheetImportFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteSheetImportFactory;
	static GetDefaultObject(): PaperSpriteSheetImportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteSheetImportFactory;
	static C(Other: UObject | any): PaperSpriteSheetImportFactory;
}

declare class PaperSpriteSheetReimportFactory extends PaperSpriteSheetImportFactory { 
	static Load(ResourceName: string): PaperSpriteSheetReimportFactory;
	static Find(Outer: UObject, ResourceName: string): PaperSpriteSheetReimportFactory;
	static GetDefaultObject(): PaperSpriteSheetReimportFactory;
	static CreateDefaultSubobject(Name: string, Transient?: boolean, Required?: boolean, Abstract?: boolean): PaperSpriteSheetReimportFactory;
	static C(Other: UObject | any): PaperSpriteSheetReimportFactory;
}

